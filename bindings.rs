/* automatically generated by rust-bindgen 0.59.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const LVGL_VERSION_MAJOR: u32 = 8;
pub const LVGL_VERSION_MINOR: u32 = 0;
pub const LVGL_VERSION_PATCH: u32 = 2;
pub const LVGL_VERSION_INFO: &'static [u8; 1usize] = b"\0";
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const LV_COLOR_DEPTH: u32 = 32;
pub const LV_COLOR_16_SWAP: u32 = 0;
pub const LV_COLOR_SCREEN_TRANSP: u32 = 0;
pub const LV_MEM_CUSTOM: u32 = 0;
pub const LV_MEM_SIZE: u32 = 32768;
pub const LV_MEM_ADR: u32 = 0;
pub const LV_MEMCPY_MEMSET_STD: u32 = 0;
pub const LV_DISP_DEF_REFR_PERIOD: u32 = 30;
pub const LV_INDEV_DEF_READ_PERIOD: u32 = 30;
pub const LV_TICK_CUSTOM: u32 = 0;
pub const LV_DPI_DEF: u32 = 130;
pub const LV_DRAW_COMPLEX: u32 = 1;
pub const LV_SHADOW_CACHE_SIZE: u32 = 0;
pub const LV_IMG_CACHE_DEF_SIZE: u32 = 0;
pub const LV_DISP_ROT_MAX_BUF: u32 = 10240;
pub const LV_USE_GPU_STM32_DMA2D: u32 = 0;
pub const LV_USE_GPU_NXP_PXP: u32 = 0;
pub const LV_USE_GPU_NXP_VG_LITE: u32 = 0;
pub const LV_USE_LOG: u32 = 0;
pub const LV_USE_ASSERT_NULL: u32 = 1;
pub const LV_USE_ASSERT_MALLOC: u32 = 1;
pub const LV_USE_ASSERT_STYLE: u32 = 0;
pub const LV_USE_ASSERT_MEM_INTEGRITY: u32 = 0;
pub const LV_USE_ASSERT_OBJ: u32 = 0;
pub const LV_USE_PERF_MONITOR: u32 = 0;
pub const LV_USE_MEM_MONITOR: u32 = 0;
pub const LV_USE_REFR_DEBUG: u32 = 0;
pub const LV_SPRINTF_CUSTOM: u32 = 0;
pub const LV_SPRINTF_USE_FLOAT: u32 = 0;
pub const LV_USE_USER_DATA: u32 = 1;
pub const LV_ENABLE_GC: u32 = 0;
pub const LV_BIG_ENDIAN_SYSTEM: u32 = 0;
pub const LV_USE_LARGE_COORD: u32 = 0;
pub const LV_FONT_MONTSERRAT_8: u32 = 0;
pub const LV_FONT_MONTSERRAT_10: u32 = 0;
pub const LV_FONT_MONTSERRAT_12: u32 = 0;
pub const LV_FONT_MONTSERRAT_14: u32 = 1;
pub const LV_FONT_MONTSERRAT_16: u32 = 0;
pub const LV_FONT_MONTSERRAT_18: u32 = 0;
pub const LV_FONT_MONTSERRAT_20: u32 = 0;
pub const LV_FONT_MONTSERRAT_22: u32 = 0;
pub const LV_FONT_MONTSERRAT_24: u32 = 0;
pub const LV_FONT_MONTSERRAT_26: u32 = 0;
pub const LV_FONT_MONTSERRAT_28: u32 = 0;
pub const LV_FONT_MONTSERRAT_30: u32 = 0;
pub const LV_FONT_MONTSERRAT_32: u32 = 0;
pub const LV_FONT_MONTSERRAT_34: u32 = 0;
pub const LV_FONT_MONTSERRAT_36: u32 = 0;
pub const LV_FONT_MONTSERRAT_38: u32 = 0;
pub const LV_FONT_MONTSERRAT_40: u32 = 0;
pub const LV_FONT_MONTSERRAT_42: u32 = 0;
pub const LV_FONT_MONTSERRAT_44: u32 = 0;
pub const LV_FONT_MONTSERRAT_46: u32 = 0;
pub const LV_FONT_MONTSERRAT_48: u32 = 0;
pub const LV_FONT_MONTSERRAT_12_SUBPX: u32 = 0;
pub const LV_FONT_MONTSERRAT_28_COMPRESSED: u32 = 0;
pub const LV_FONT_DEJAVU_16_PERSIAN_HEBREW: u32 = 0;
pub const LV_FONT_SIMSUN_16_CJK: u32 = 0;
pub const LV_FONT_UNSCII_8: u32 = 0;
pub const LV_FONT_UNSCII_16: u32 = 0;
pub const LV_FONT_FMT_TXT_LARGE: u32 = 0;
pub const LV_USE_FONT_COMPRESSED: u32 = 0;
pub const LV_USE_FONT_SUBPX: u32 = 0;
pub const LV_TXT_BREAK_CHARS: &'static [u8; 8usize] = b" ,.;:-_\0";
pub const LV_TXT_LINE_BREAK_LONG_LEN: u32 = 0;
pub const LV_TXT_LINE_BREAK_LONG_PRE_MIN_LEN: u32 = 3;
pub const LV_TXT_LINE_BREAK_LONG_POST_MIN_LEN: u32 = 3;
pub const LV_TXT_COLOR_CMD: &'static [u8; 2usize] = b"#\0";
pub const LV_USE_BIDI: u32 = 0;
pub const LV_USE_ARABIC_PERSIAN_CHARS: u32 = 0;
pub const LV_USE_ARC: u32 = 1;
pub const LV_USE_ANIMIMG: u32 = 1;
pub const LV_USE_BAR: u32 = 1;
pub const LV_USE_BTN: u32 = 1;
pub const LV_USE_BTNMATRIX: u32 = 1;
pub const LV_USE_CANVAS: u32 = 1;
pub const LV_USE_CHECKBOX: u32 = 1;
pub const LV_USE_DROPDOWN: u32 = 1;
pub const LV_USE_IMG: u32 = 1;
pub const LV_USE_LABEL: u32 = 1;
pub const LV_LABEL_TEXT_SELECTION: u32 = 1;
pub const LV_LABEL_LONG_TXT_HINT: u32 = 1;
pub const LV_USE_LINE: u32 = 1;
pub const LV_USE_ROLLER: u32 = 1;
pub const LV_ROLLER_INF_PAGES: u32 = 7;
pub const LV_USE_SLIDER: u32 = 1;
pub const LV_USE_SWITCH: u32 = 1;
pub const LV_USE_TEXTAREA: u32 = 1;
pub const LV_TEXTAREA_DEF_PWD_SHOW_TIME: u32 = 1500;
pub const LV_USE_TABLE: u32 = 1;
pub const LV_USE_CALENDAR: u32 = 1;
pub const LV_CALENDAR_WEEK_STARTS_MONDAY: u32 = 0;
pub const LV_USE_CALENDAR_HEADER_ARROW: u32 = 1;
pub const LV_USE_CALENDAR_HEADER_DROPDOWN: u32 = 1;
pub const LV_USE_CHART: u32 = 1;
pub const LV_USE_COLORWHEEL: u32 = 1;
pub const LV_USE_IMGBTN: u32 = 1;
pub const LV_USE_KEYBOARD: u32 = 1;
pub const LV_USE_LED: u32 = 1;
pub const LV_USE_LIST: u32 = 1;
pub const LV_USE_METER: u32 = 1;
pub const LV_USE_MSGBOX: u32 = 1;
pub const LV_USE_SPINBOX: u32 = 1;
pub const LV_USE_SPINNER: u32 = 1;
pub const LV_USE_TABVIEW: u32 = 1;
pub const LV_USE_TILEVIEW: u32 = 1;
pub const LV_USE_WIN: u32 = 1;
pub const LV_USE_SPAN: u32 = 1;
pub const LV_SPAN_SNIPPET_STACK_SIZE: u32 = 64;
pub const LV_USE_THEME_DEFAULT: u32 = 1;
pub const LV_THEME_DEFAULT_DARK: u32 = 0;
pub const LV_THEME_DEFAULT_GROW: u32 = 1;
pub const LV_THEME_DEFAULT_TRANSITON_TIME: u32 = 80;
pub const LV_USE_THEME_BASIC: u32 = 1;
pub const LV_USE_THEME_MONO: u32 = 1;
pub const LV_USE_FLEX: u32 = 1;
pub const LV_USE_GRID: u32 = 1;
pub const LV_BUILD_EXAMPLES: u32 = 1;
pub const LV_LOG_LEVEL_TRACE: u32 = 0;
pub const LV_LOG_LEVEL_INFO: u32 = 1;
pub const LV_LOG_LEVEL_WARN: u32 = 2;
pub const LV_LOG_LEVEL_ERROR: u32 = 3;
pub const LV_LOG_LEVEL_USER: u32 = 4;
pub const LV_LOG_LEVEL_NONE: u32 = 5;
pub const _LV_LOG_LEVEL_NUM: u32 = 6;
pub const __bool_true_false_are_defined: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const LV_MEM_BUF_MAX_NUM: u32 = 16;
pub const LV_NO_TIMER_READY: u32 = 4294967295;
pub const LV_TRIGO_SIN_MAX: u32 = 32767;
pub const LV_TRIGO_SHIFT: u32 = 15;
pub const LV_BEZIER_VAL_MAX: u32 = 1024;
pub const LV_BEZIER_VAL_SHIFT: u32 = 10;
pub const LV_OPA_MIN: u32 = 2;
pub const LV_OPA_MAX: u32 = 253;
pub const LV_COLOR_SIZE: u32 = 32;
pub const LV_COLOR_MIX_ROUND_OFS: u32 = 0;
pub const _LV_COLOR_HAS_MODERN_CPP: u32 = 0;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const _LV_COORD_MAX_REDUCE: u32 = 8192;
pub const _LV_COORD_TYPE_SHIFT: u32 = 13;
pub const _LV_COORD_TYPE_MASK: u32 = 24576;
pub const _LV_COORD_TYPE_PX: u32 = 0;
pub const _LV_COORD_TYPE_SPEC: u32 = 8192;
pub const _LV_COORD_TYPE_RESERVED: u32 = 24576;
pub const LV_INV_BUF_SIZE: u32 = 32;
pub const LV_INDEV_DEF_SCROLL_LIMIT: u32 = 10;
pub const LV_INDEV_DEF_SCROLL_THROW: u32 = 10;
pub const LV_INDEV_DEF_LONG_PRESS_TIME: u32 = 400;
pub const LV_INDEV_DEF_LONG_PRESS_REP_TIME: u32 = 100;
pub const LV_INDEV_DEF_GESTURE_LIMIT: u32 = 50;
pub const LV_INDEV_DEF_GESTURE_MIN_VELOCITY: u32 = 3;
pub const LV_SYMBOL_AUDIO: &'static [u8; 4usize] = b"\xEF\x80\x81\0";
pub const LV_SYMBOL_VIDEO: &'static [u8; 4usize] = b"\xEF\x80\x88\0";
pub const LV_SYMBOL_LIST: &'static [u8; 4usize] = b"\xEF\x80\x8B\0";
pub const LV_SYMBOL_OK: &'static [u8; 4usize] = b"\xEF\x80\x8C\0";
pub const LV_SYMBOL_CLOSE: &'static [u8; 4usize] = b"\xEF\x80\x8D\0";
pub const LV_SYMBOL_POWER: &'static [u8; 4usize] = b"\xEF\x80\x91\0";
pub const LV_SYMBOL_SETTINGS: &'static [u8; 4usize] = b"\xEF\x80\x93\0";
pub const LV_SYMBOL_HOME: &'static [u8; 4usize] = b"\xEF\x80\x95\0";
pub const LV_SYMBOL_DOWNLOAD: &'static [u8; 4usize] = b"\xEF\x80\x99\0";
pub const LV_SYMBOL_DRIVE: &'static [u8; 4usize] = b"\xEF\x80\x9C\0";
pub const LV_SYMBOL_REFRESH: &'static [u8; 4usize] = b"\xEF\x80\xA1\0";
pub const LV_SYMBOL_MUTE: &'static [u8; 4usize] = b"\xEF\x80\xA6\0";
pub const LV_SYMBOL_VOLUME_MID: &'static [u8; 4usize] = b"\xEF\x80\xA7\0";
pub const LV_SYMBOL_VOLUME_MAX: &'static [u8; 4usize] = b"\xEF\x80\xA8\0";
pub const LV_SYMBOL_IMAGE: &'static [u8; 4usize] = b"\xEF\x80\xBE\0";
pub const LV_SYMBOL_ENVELOPE: &'static [u8; 4usize] = b"\xEF\x83\xA0\0";
pub const LV_SYMBOL_EDIT: &'static [u8; 4usize] = b"\xEF\x8C\x84\0";
pub const LV_SYMBOL_TINT: &'static [u8; 4usize] = b"\xEF\x81\x83\0";
pub const LV_SYMBOL_PREV: &'static [u8; 4usize] = b"\xEF\x81\x88\0";
pub const LV_SYMBOL_PLAY: &'static [u8; 4usize] = b"\xEF\x81\x8B\0";
pub const LV_SYMBOL_PAUSE: &'static [u8; 4usize] = b"\xEF\x81\x8C\0";
pub const LV_SYMBOL_STOP: &'static [u8; 4usize] = b"\xEF\x81\x8D\0";
pub const LV_SYMBOL_NEXT: &'static [u8; 4usize] = b"\xEF\x81\x91\0";
pub const LV_SYMBOL_EJECT: &'static [u8; 4usize] = b"\xEF\x81\x92\0";
pub const LV_SYMBOL_LEFT: &'static [u8; 4usize] = b"\xEF\x81\x93\0";
pub const LV_SYMBOL_RIGHT: &'static [u8; 4usize] = b"\xEF\x81\x94\0";
pub const LV_SYMBOL_PLUS: &'static [u8; 4usize] = b"\xEF\x81\xA7\0";
pub const LV_SYMBOL_MINUS: &'static [u8; 4usize] = b"\xEF\x81\xA8\0";
pub const LV_SYMBOL_EYE_OPEN: &'static [u8; 4usize] = b"\xEF\x81\xAE\0";
pub const LV_SYMBOL_EYE_CLOSE: &'static [u8; 4usize] = b"\xEF\x81\xB0\0";
pub const LV_SYMBOL_WARNING: &'static [u8; 4usize] = b"\xEF\x81\xB1\0";
pub const LV_SYMBOL_SHUFFLE: &'static [u8; 4usize] = b"\xEF\x81\xB4\0";
pub const LV_SYMBOL_UP: &'static [u8; 4usize] = b"\xEF\x81\xB7\0";
pub const LV_SYMBOL_DOWN: &'static [u8; 4usize] = b"\xEF\x81\xB8\0";
pub const LV_SYMBOL_LOOP: &'static [u8; 4usize] = b"\xEF\x81\xB9\0";
pub const LV_SYMBOL_DIRECTORY: &'static [u8; 4usize] = b"\xEF\x81\xBB\0";
pub const LV_SYMBOL_UPLOAD: &'static [u8; 4usize] = b"\xEF\x82\x93\0";
pub const LV_SYMBOL_CALL: &'static [u8; 4usize] = b"\xEF\x82\x95\0";
pub const LV_SYMBOL_CUT: &'static [u8; 4usize] = b"\xEF\x83\x84\0";
pub const LV_SYMBOL_COPY: &'static [u8; 4usize] = b"\xEF\x83\x85\0";
pub const LV_SYMBOL_SAVE: &'static [u8; 4usize] = b"\xEF\x83\x87\0";
pub const LV_SYMBOL_BARS: &'static [u8; 4usize] = b"\xEF\x83\x89\0";
pub const LV_SYMBOL_CHARGE: &'static [u8; 4usize] = b"\xEF\x83\xA7\0";
pub const LV_SYMBOL_PASTE: &'static [u8; 4usize] = b"\xEF\x83\xAA\0";
pub const LV_SYMBOL_BELL: &'static [u8; 4usize] = b"\xEF\x83\xB3\0";
pub const LV_SYMBOL_KEYBOARD: &'static [u8; 4usize] = b"\xEF\x84\x9C\0";
pub const LV_SYMBOL_GPS: &'static [u8; 4usize] = b"\xEF\x84\xA4\0";
pub const LV_SYMBOL_FILE: &'static [u8; 4usize] = b"\xEF\x85\x9B\0";
pub const LV_SYMBOL_WIFI: &'static [u8; 4usize] = b"\xEF\x87\xAB\0";
pub const LV_SYMBOL_BATTERY_FULL: &'static [u8; 4usize] = b"\xEF\x89\x80\0";
pub const LV_SYMBOL_BATTERY_3: &'static [u8; 4usize] = b"\xEF\x89\x81\0";
pub const LV_SYMBOL_BATTERY_2: &'static [u8; 4usize] = b"\xEF\x89\x82\0";
pub const LV_SYMBOL_BATTERY_1: &'static [u8; 4usize] = b"\xEF\x89\x83\0";
pub const LV_SYMBOL_BATTERY_EMPTY: &'static [u8; 4usize] = b"\xEF\x89\x84\0";
pub const LV_SYMBOL_USB: &'static [u8; 4usize] = b"\xEF\x8A\x87\0";
pub const LV_SYMBOL_BLUETOOTH: &'static [u8; 4usize] = b"\xEF\x8A\x93\0";
pub const LV_SYMBOL_TRASH: &'static [u8; 4usize] = b"\xEF\x8B\xAD\0";
pub const LV_SYMBOL_BACKSPACE: &'static [u8; 4usize] = b"\xEF\x95\x9A\0";
pub const LV_SYMBOL_SD_CARD: &'static [u8; 4usize] = b"\xEF\x9F\x82\0";
pub const LV_SYMBOL_NEW_LINE: &'static [u8; 4usize] = b"\xEF\xA2\xA2\0";
pub const LV_SYMBOL_DUMMY: &'static [u8; 4usize] = b"\xEF\xA3\xBF\0";
pub const LV_SYMBOL_BULLET: &'static [u8; 4usize] = b"\xE2\x80\xA2\0";
pub const LV_ANIM_REPEAT_INFINITE: u32 = 65535;
pub const LV_TXT_ENC_UTF8: u32 = 1;
pub const LV_TXT_ENC_ASCII: u32 = 2;
pub const LV_BIDI_LRO: &'static [u8; 4usize] = b"\xE2\x80\xAD\0";
pub const LV_BIDI_RLO: &'static [u8; 4usize] = b"\xE2\x80\xAE\0";
pub const LV_STYLE_SENTINEL_VALUE: u32 = 2864434397;
pub const LV_STYLE_PROP_INHERIT: u32 = 1024;
pub const LV_STYLE_PROP_EXT_DRAW: u32 = 2048;
pub const LV_STYLE_PROP_LAYOUT_REFR: u32 = 4096;
pub const LV_STYLE_PROP_PARENT_LAYOUT_REFR: u32 = 8192;
pub const LV_STYLE_PROP_FILTER: u32 = 16384;
pub const LV_IMG_ZOOM_NONE: u32 = 256;
pub const LV_IMG_PX_SIZE_ALPHA_BYTE: u32 = 4;
pub const _LV_TRANSFORM_TRIGO_SHIFT: u32 = 10;
pub const _LV_ZOOM_INV_UPSCALE: u32 = 5;
pub const LV_FS_MAX_FN_LENGTH: u32 = 64;
pub const LV_FS_MAX_PATH_LENGTH: u32 = 256;
pub const LV_MASK_ID_INV: i32 = -1;
pub const _LV_MASK_MAX_NUM: u32 = 16;
pub const _LV_MASK_BUF_MAX_SIZE: u32 = 2048;
pub const LV_RADIUS_CIRCLE: u32 = 32767;
pub const LV_DRAW_LABEL_NO_TXT_SEL: u32 = 65535;
pub const LV_LABEL_WAIT_CHAR_COUNT: u32 = 3;
pub const LV_LABEL_DOT_NUM: u32 = 3;
pub const LV_LABEL_POS_LAST: u32 = 65535;
pub const LV_LABEL_TEXT_SELECTION_OFF: u32 = 65535;
pub const LV_TABLE_CELL_NONE: u32 = 65535;
pub const LV_BTNMATRIX_BTN_NONE: u32 = 65535;
pub const LV_DROPDOWN_POS_LAST: u32 = 65535;
pub const LV_TEXTAREA_CURSOR_LAST: u32 = 32767;
pub const LV_NO_TASK_READY: u32 = 4294967295;
pub const _LV_FLEX_COLUMN: u32 = 1;
pub const _LV_FLEX_WRAP: u32 = 4;
pub const _LV_FLEX_REVERSE: u32 = 8;
pub const LV_SPINBOX_MAX_DIGIT_COUNT: u32 = 10;
pub type va_list = *mut cty::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut cty::c_char, ...);
}
pub type size_t = cty::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = cty::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = cty::c_schar;
pub type int_least16_t = cty::c_short;
pub type int_least32_t = cty::c_int;
pub type int_least64_t = cty::c_longlong;
pub type uint_least8_t = cty::c_uchar;
pub type uint_least16_t = cty::c_ushort;
pub type uint_least32_t = cty::c_uint;
pub type uint_least64_t = cty::c_ulonglong;
pub type int_fast8_t = cty::c_schar;
pub type int_fast16_t = cty::c_int;
pub type int_fast32_t = cty::c_int;
pub type int_fast64_t = cty::c_longlong;
pub type uint_fast8_t = cty::c_uchar;
pub type uint_fast16_t = cty::c_uint;
pub type uint_fast32_t = cty::c_uint;
pub type uint_fast64_t = cty::c_ulonglong;
pub type intmax_t = cty::c_longlong;
pub type uintmax_t = cty::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _silence_gcc_warning {
    _unused: [u8; 0],
}
pub type lv_log_level_t = i8;
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: cty::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = cty::c_int;
pub type wint_t = cty::c_ushort;
pub type wctype_t = cty::c_ushort;
pub type __time32_t = cty::c_long;
pub type __time64_t = cty::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const cty::c_ushort,
    pub _locale_mb_cur_max: cty::c_int,
    pub _locale_lc_codepage: cty::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: cty::c_ulong,
    pub _Byte: cty::c_ushort,
    pub _State: cty::c_ushort,
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
extern "C" {
    pub fn _errno() -> *mut cty::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: cty::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut cty::c_int) -> errno_t;
}
extern "C" {
    pub fn __threadid() -> cty::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
pub const LV_RES_INV: cty::c_int = 0;
pub const LV_RES_OK: cty::c_int = 1;
pub type _bindgen_ty_1 = cty::c_int;
pub type lv_res_t = u8;
pub type lv_uintptr_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_mem_monitor_t {
    pub total_size: u32,
    pub free_cnt: u32,
    pub free_size: u32,
    pub free_biggest_size: u32,
    pub used_cnt: u32,
    pub max_used: u32,
    pub used_pct: u8,
    pub frag_pct: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_mem_buf_t {
    pub p: *mut cty::c_void,
    pub size: u16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 5usize],
}
impl lv_mem_buf_t {
    #[inline]
    pub fn used(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_used(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(used: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let used: u8 = unsafe { ::core::mem::transmute(used) };
            used as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type lv_mem_buf_arr_t = [lv_mem_buf_t; 16usize];
extern "C" {
    pub fn lv_mem_init();
}
extern "C" {
    pub fn lv_mem_deinit();
}
extern "C" {
    pub fn lv_mem_alloc(size: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn lv_mem_free(data: *mut cty::c_void);
}
extern "C" {
    pub fn lv_mem_realloc(data_p: *mut cty::c_void, new_size: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn lv_mem_test() -> lv_res_t;
}
extern "C" {
    pub fn lv_mem_monitor(mon_p: *mut lv_mem_monitor_t);
}
extern "C" {
    pub fn lv_mem_buf_get(size: u32) -> *mut cty::c_void;
}
extern "C" {
    pub fn lv_mem_buf_release(p: *mut cty::c_void);
}
extern "C" {
    pub fn lv_mem_buf_free_all();
}
extern "C" {
    pub fn lv_memcpy(
        dst: *mut cty::c_void,
        src: *const cty::c_void,
        len: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn lv_memset(dst: *mut cty::c_void, v: u8, len: size_t);
}
extern "C" {
    pub fn lv_memset_00(dst: *mut cty::c_void, len: size_t);
}
extern "C" {
    pub fn lv_memset_ff(dst: *mut cty::c_void, len: size_t);
}
pub type lv_ll_node_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_ll_t {
    pub n_size: u32,
    pub head: *mut lv_ll_node_t,
    pub tail: *mut lv_ll_node_t,
}
extern "C" {
    pub fn _lv_ll_init(ll_p: *mut lv_ll_t, node_size: u32);
}
extern "C" {
    pub fn _lv_ll_ins_head(ll_p: *mut lv_ll_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn _lv_ll_ins_prev(ll_p: *mut lv_ll_t, n_act: *mut cty::c_void) -> *mut cty::c_void;
}
extern "C" {
    pub fn _lv_ll_ins_tail(ll_p: *mut lv_ll_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn _lv_ll_remove(ll_p: *mut lv_ll_t, node_p: *mut cty::c_void);
}
extern "C" {
    pub fn _lv_ll_clear(ll_p: *mut lv_ll_t);
}
extern "C" {
    pub fn _lv_ll_chg_list(
        ll_ori_p: *mut lv_ll_t,
        ll_new_p: *mut lv_ll_t,
        node: *mut cty::c_void,
        head: bool,
    );
}
extern "C" {
    pub fn _lv_ll_get_head(ll_p: *const lv_ll_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn _lv_ll_get_tail(ll_p: *const lv_ll_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn _lv_ll_get_next(ll_p: *const lv_ll_t, n_act: *const cty::c_void) -> *mut cty::c_void;
}
extern "C" {
    pub fn _lv_ll_get_prev(ll_p: *const lv_ll_t, n_act: *const cty::c_void) -> *mut cty::c_void;
}
extern "C" {
    pub fn _lv_ll_get_len(ll_p: *const lv_ll_t) -> u32;
}
extern "C" {
    pub fn _lv_ll_move_before(
        ll_p: *mut lv_ll_t,
        n_act: *mut cty::c_void,
        n_after: *mut cty::c_void,
    );
}
extern "C" {
    pub fn _lv_ll_is_empty(ll_p: *mut lv_ll_t) -> bool;
}
pub type lv_timer_cb_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut _lv_timer_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_timer_t {
    pub period: u32,
    pub last_run: u32,
    pub timer_cb: lv_timer_cb_t,
    pub user_data: *mut cty::c_void,
    pub repeat_count: i32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl _lv_timer_t {
    #[inline]
    pub fn paused(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_paused(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(paused: u32) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let paused: u32 = unsafe { ::core::mem::transmute(paused) };
            paused as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type lv_timer_t = _lv_timer_t;
extern "C" {
    pub fn _lv_timer_core_init();
}
extern "C" {
    pub fn lv_timer_handler() -> u32;
}
extern "C" {
    pub fn lv_timer_create_basic() -> *mut lv_timer_t;
}
extern "C" {
    pub fn lv_timer_create(
        timer_xcb: lv_timer_cb_t,
        period: u32,
        user_data: *mut cty::c_void,
    ) -> *mut lv_timer_t;
}
extern "C" {
    pub fn lv_timer_del(timer: *mut lv_timer_t);
}
extern "C" {
    pub fn lv_timer_pause(timer: *mut lv_timer_t);
}
extern "C" {
    pub fn lv_timer_resume(timer: *mut lv_timer_t);
}
extern "C" {
    pub fn lv_timer_set_cb(timer: *mut lv_timer_t, timer_cb: lv_timer_cb_t);
}
extern "C" {
    pub fn lv_timer_set_period(timer: *mut lv_timer_t, period: u32);
}
extern "C" {
    pub fn lv_timer_ready(timer: *mut lv_timer_t);
}
extern "C" {
    pub fn lv_timer_set_repeat_count(timer: *mut lv_timer_t, repeat_count: i32);
}
extern "C" {
    pub fn lv_timer_reset(timer: *mut lv_timer_t);
}
extern "C" {
    pub fn lv_timer_enable(en: bool);
}
extern "C" {
    pub fn lv_timer_get_idle() -> u8;
}
extern "C" {
    pub fn lv_timer_get_next(timer: *mut lv_timer_t) -> *mut lv_timer_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_sqrt_res_t {
    pub i: u16,
    pub f: u16,
}
extern "C" {
    pub fn lv_trigo_sin(angle: i16) -> i16;
}
extern "C" {
    pub fn lv_bezier3(t: u32, u0: u32, u1: u32, u2: u32, u3: u32) -> u32;
}
extern "C" {
    pub fn lv_atan2(x: cty::c_int, y: cty::c_int) -> u16;
}
extern "C" {
    pub fn lv_sqrt(x: u32, q: *mut lv_sqrt_res_t, mask: u32);
}
extern "C" {
    pub fn lv_pow(base: i64, exp: i8) -> i64;
}
extern "C" {
    pub fn lv_map(x: i32, min_in: i32, max_in: i32, min: i32, max: i32) -> i32;
}
extern "C" {
    pub fn lv_rand(min: u32, max: u32) -> u32;
}
pub type lv_async_cb_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>;
extern "C" {
    pub fn lv_async_call(async_xcb: lv_async_cb_t, user_data: *mut cty::c_void) -> lv_res_t;
}
pub const LV_OPA_TRANSP: cty::c_int = 0;
pub const LV_OPA_0: cty::c_int = 0;
pub const LV_OPA_10: cty::c_int = 25;
pub const LV_OPA_20: cty::c_int = 51;
pub const LV_OPA_30: cty::c_int = 76;
pub const LV_OPA_40: cty::c_int = 102;
pub const LV_OPA_50: cty::c_int = 127;
pub const LV_OPA_60: cty::c_int = 153;
pub const LV_OPA_70: cty::c_int = 178;
pub const LV_OPA_80: cty::c_int = 204;
pub const LV_OPA_90: cty::c_int = 229;
pub const LV_OPA_100: cty::c_int = 255;
pub const LV_OPA_COVER: cty::c_int = 255;
pub type _bindgen_ty_2 = cty::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union lv_color1_t {
    pub full: u8,
    pub ch: lv_color1_t__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(1))]
#[derive(Copy, Clone)]
pub union lv_color1_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl lv_color1_t__bindgen_ty_1 {
    #[inline]
    pub fn blue(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_blue(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn green(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_green(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn red(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_red(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(blue: u8, green: u8, red: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let blue: u8 = unsafe { ::core::mem::transmute(blue) };
            blue as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let green: u8 = unsafe { ::core::mem::transmute(green) };
            green as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let red: u8 = unsafe { ::core::mem::transmute(red) };
            red as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lv_color8_t {
    pub ch: lv_color8_t__bindgen_ty_1,
    pub full: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct lv_color8_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl lv_color8_t__bindgen_ty_1 {
    #[inline]
    pub fn blue(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_blue(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn green(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_green(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn red(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_red(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(blue: u8, green: u8, red: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let blue: u8 = unsafe { ::core::mem::transmute(blue) };
            blue as u64
        });
        __bindgen_bitfield_unit.set(2usize, 3u8, {
            let green: u8 = unsafe { ::core::mem::transmute(green) };
            green as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let red: u8 = unsafe { ::core::mem::transmute(red) };
            red as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lv_color16_t {
    pub ch: lv_color16_t__bindgen_ty_1,
    pub full: u16,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct lv_color16_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl lv_color16_t__bindgen_ty_1 {
    #[inline]
    pub fn blue(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_blue(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn green(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_green(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn red(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_red(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(blue: u16, green: u16, red: u16) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let blue: u16 = unsafe { ::core::mem::transmute(blue) };
            blue as u64
        });
        __bindgen_bitfield_unit.set(5usize, 6u8, {
            let green: u16 = unsafe { ::core::mem::transmute(green) };
            green as u64
        });
        __bindgen_bitfield_unit.set(11usize, 5u8, {
            let red: u16 = unsafe { ::core::mem::transmute(red) };
            red as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lv_color32_t {
    pub ch: lv_color32_t__bindgen_ty_1,
    pub full: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_color32_t__bindgen_ty_1 {
    pub blue: u8,
    pub green: u8,
    pub red: u8,
    pub alpha: u8,
}
pub type lv_color_int_t = u32;
pub type lv_color_t = lv_color32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_color_hsv_t {
    pub h: u16,
    pub s: u8,
    pub v: u8,
}
pub type lv_opa_t = u8;
pub type lv_color_filter_cb_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *const _lv_color_filter_dsc_t,
        arg2: lv_color_t,
        arg3: lv_opa_t,
    ) -> lv_color_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_color_filter_dsc_t {
    pub filter_cb: lv_color_filter_cb_t,
    pub user_data: *mut cty::c_void,
}
pub type lv_color_filter_dsc_t = _lv_color_filter_dsc_t;
pub const lv_palette_t_LV_PALETTE_RED: lv_palette_t = 0;
pub const lv_palette_t_LV_PALETTE_PINK: lv_palette_t = 1;
pub const lv_palette_t_LV_PALETTE_PURPLE: lv_palette_t = 2;
pub const lv_palette_t_LV_PALETTE_DEEP_PURPLE: lv_palette_t = 3;
pub const lv_palette_t_LV_PALETTE_INDIGO: lv_palette_t = 4;
pub const lv_palette_t_LV_PALETTE_BLUE: lv_palette_t = 5;
pub const lv_palette_t_LV_PALETTE_LIGHT_BLUE: lv_palette_t = 6;
pub const lv_palette_t_LV_PALETTE_CYAN: lv_palette_t = 7;
pub const lv_palette_t_LV_PALETTE_TEAL: lv_palette_t = 8;
pub const lv_palette_t_LV_PALETTE_GREEN: lv_palette_t = 9;
pub const lv_palette_t_LV_PALETTE_LIGHT_GREEN: lv_palette_t = 10;
pub const lv_palette_t_LV_PALETTE_LIME: lv_palette_t = 11;
pub const lv_palette_t_LV_PALETTE_YELLOW: lv_palette_t = 12;
pub const lv_palette_t_LV_PALETTE_AMBER: lv_palette_t = 13;
pub const lv_palette_t_LV_PALETTE_ORANGE: lv_palette_t = 14;
pub const lv_palette_t_LV_PALETTE_DEEP_ORANGE: lv_palette_t = 15;
pub const lv_palette_t_LV_PALETTE_BROWN: lv_palette_t = 16;
pub const lv_palette_t_LV_PALETTE_BLUE_GREY: lv_palette_t = 17;
pub const lv_palette_t_LV_PALETTE_GREY: lv_palette_t = 18;
pub const lv_palette_t__LV_PALETTE_LAST: lv_palette_t = 19;
pub const lv_palette_t_LV_PALETTE_NONE: lv_palette_t = 255;
pub type lv_palette_t = cty::c_int;
extern "C" {
    pub fn lv_color_fill(buf: *mut lv_color_t, color: lv_color_t, px_num: u32);
}
extern "C" {
    pub fn lv_color_lighten(c: lv_color_t, lvl: lv_opa_t) -> lv_color_t;
}
extern "C" {
    pub fn lv_color_darken(c: lv_color_t, lvl: lv_opa_t) -> lv_color_t;
}
extern "C" {
    pub fn lv_color_change_lightness(c: lv_color_t, lvl: lv_opa_t) -> lv_color_t;
}
extern "C" {
    pub fn lv_color_hsv_to_rgb(h: u16, s: u8, v: u8) -> lv_color_t;
}
extern "C" {
    pub fn lv_color_rgb_to_hsv(r8: u8, g8: u8, b8: u8) -> lv_color_hsv_t;
}
extern "C" {
    pub fn lv_color_to_hsv(color: lv_color_t) -> lv_color_hsv_t;
}
extern "C" {
    pub fn lv_palette_main(p: lv_palette_t) -> lv_color_t;
}
extern "C" {
    pub fn lv_palette_lighten(p: lv_palette_t, lvl: u8) -> lv_color_t;
}
extern "C" {
    pub fn lv_palette_darken(p: lv_palette_t, lvl: u8) -> lv_color_t;
}
extern "C" {
    pub fn __doserrno() -> *mut cty::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: cty::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut cty::c_ulong) -> errno_t;
}
extern "C" {
    pub fn memchr(
        _Buf: *const cty::c_void,
        _Val: cty::c_int,
        _MaxCount: cty::c_ulonglong,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memcmp(
        _Buf1: *const cty::c_void,
        _Buf2: *const cty::c_void,
        _Size: cty::c_ulonglong,
    ) -> cty::c_int;
}
extern "C" {
    pub fn memcpy(
        _Dst: *mut cty::c_void,
        _Src: *const cty::c_void,
        _Size: cty::c_ulonglong,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memmove(
        _Dst: *mut cty::c_void,
        _Src: *const cty::c_void,
        _Size: cty::c_ulonglong,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memset(
        _Dst: *mut cty::c_void,
        _Val: cty::c_int,
        _Size: cty::c_ulonglong,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn strchr(_Str: *const cty::c_char, _Val: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strrchr(_Str: *const cty::c_char, _Ch: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strstr(_Str: *const cty::c_char, _SubStr: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn wcschr(_Str: *const cty::c_ushort, _Ch: cty::c_ushort) -> *mut cty::c_ushort;
}
extern "C" {
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _memicmp(
        _Buf1: *const cty::c_void,
        _Buf2: *const cty::c_void,
        _Size: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _memicmp_l(
        _Buf1: *const cty::c_void,
        _Buf2: *const cty::c_void,
        _Size: size_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn memccpy(
        _Dst: *mut cty::c_void,
        _Src: *const cty::c_void,
        _Val: cty::c_int,
        _Size: cty::c_ulonglong,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memicmp(
        _Buf1: *const cty::c_void,
        _Buf2: *const cty::c_void,
        _Size: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn wcscat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcscpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstok_s(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(_String1: *const cty::c_ushort, _String2: *const cty::c_ushort) -> cty::c_int;
}
extern "C" {
    pub fn wcscpy(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(_String: *const wchar_t, _Control: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcslen(_String: *const cty::c_ushort) -> cty::c_ulonglong;
}
extern "C" {
    pub fn wcsnlen(_Source: *const wchar_t, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn wcsncat(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        _String1: *const cty::c_ushort,
        _String2: *const cty::c_ushort,
        _MaxCount: cty::c_ulonglong,
    ) -> cty::c_int;
}
extern "C" {
    pub fn wcsncpy(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(_String: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsspn(_String: *const wchar_t, _Control: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcstok(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror(_ErrorNumber: cty::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _ErrorNumber: cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn __wcserror(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn __wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _ErrorMessage: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> cty::c_int;
}
extern "C" {
    pub fn _wcsicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _wcsnicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _wcsnset_s(
        _Destination: *mut wchar_t,
        _SizeInWords: size_t,
        _Value: wchar_t,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsset_s(_Destination: *mut wchar_t, _SizeInWords: size_t, _Value: wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s(_String: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s_l(_String: *mut wchar_t, _SizeInWords: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s(_String: *mut wchar_t, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s_l(_String: *mut wchar_t, _Size: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wcsxfrm_l(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcscoll(_String1: *const wchar_t, _String2: *const wchar_t) -> cty::c_int;
}
extern "C" {
    pub fn _wcscoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> cty::c_int;
}
extern "C" {
    pub fn _wcsicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _wcsncoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _wcsncoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _wcsnicoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _wcsnicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> cty::c_int;
}
extern "C" {
    pub fn wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> cty::c_int;
}
extern "C" {
    pub fn strcpy_s(
        _Destination: *mut cty::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const cty::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strcat_s(
        _Destination: *mut cty::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const cty::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror_s(
        _Buffer: *mut cty::c_char,
        _SizeInBytes: size_t,
        _ErrorNumber: cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn strncat_s(
        _Destination: *mut cty::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const cty::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strncpy_s(
        _Destination: *mut cty::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const cty::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strtok_s(
        _String: *mut cty::c_char,
        _Delimiter: *const cty::c_char,
        _Context: *mut *mut cty::c_char,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn _memccpy(
        _Dst: *mut cty::c_void,
        _Src: *const cty::c_void,
        _Val: cty::c_int,
        _MaxCount: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn strcat(_Destination: *mut cty::c_char, _Source: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcmp(_Str1: *const cty::c_char, _Str2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn _strcmpi(_String1: *const cty::c_char, _String2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn strcoll(_String1: *const cty::c_char, _String2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn _strcoll_l(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strcpy(_Destination: *mut cty::c_char, _Source: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcspn(_Str: *const cty::c_char, _Control: *const cty::c_char) -> cty::c_ulonglong;
}
extern "C" {
    pub fn _strdup(_Source: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn _strerror(_ErrorMessage: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn _strerror_s(
        _Buffer: *mut cty::c_char,
        _SizeInBytes: size_t,
        _ErrorMessage: *const cty::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror(_ErrorMessage: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn _stricmp(_String1: *const cty::c_char, _String2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn _stricoll(_String1: *const cty::c_char, _String2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn _stricoll_l(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _stricmp_l(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strlen(_Str: *const cty::c_char) -> cty::c_ulonglong;
}
extern "C" {
    pub fn _strlwr_s(_String: *mut cty::c_char, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _strlwr(_String: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn _strlwr_s_l(_String: *mut cty::c_char, _Size: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _strlwr_l(_String: *mut cty::c_char, _Locale: _locale_t) -> *mut cty::c_char;
}
extern "C" {
    pub fn strncat(
        _Destination: *mut cty::c_char,
        _Source: *const cty::c_char,
        _Count: cty::c_ulonglong,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strncmp(
        _Str1: *const cty::c_char,
        _Str2: *const cty::c_char,
        _MaxCount: cty::c_ulonglong,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _strnicmp(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _MaxCount: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _strnicmp_l(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _strnicoll(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _MaxCount: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _strnicoll_l(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _strncoll(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _MaxCount: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn _strncoll_l(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __strncnt(_String: *const cty::c_char, _Count: size_t) -> size_t;
}
extern "C" {
    pub fn strncpy(
        _Destination: *mut cty::c_char,
        _Source: *const cty::c_char,
        _Count: cty::c_ulonglong,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strnlen(_String: *const cty::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _strnset_s(
        _String: *mut cty::c_char,
        _SizeInBytes: size_t,
        _Value: cty::c_int,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strnset(
        _Destination: *mut cty::c_char,
        _Value: cty::c_int,
        _Count: size_t,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strpbrk(_Str: *const cty::c_char, _Control: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn _strrev(_Str: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn _strset_s(
        _Destination: *mut cty::c_char,
        _DestinationSize: size_t,
        _Value: cty::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _strset(_Destination: *mut cty::c_char, _Value: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strspn(_Str: *const cty::c_char, _Control: *const cty::c_char) -> cty::c_ulonglong;
}
extern "C" {
    pub fn strtok(_String: *mut cty::c_char, _Delimiter: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn _strupr_s(_String: *mut cty::c_char, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _strupr(_String: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn _strupr_s_l(_String: *mut cty::c_char, _Size: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _strupr_l(_String: *mut cty::c_char, _Locale: _locale_t) -> *mut cty::c_char;
}
extern "C" {
    pub fn strxfrm(
        _Destination: *mut cty::c_char,
        _Source: *const cty::c_char,
        _MaxCount: cty::c_ulonglong,
    ) -> cty::c_ulonglong;
}
extern "C" {
    pub fn _strxfrm_l(
        _Destination: *mut cty::c_char,
        _Source: *const cty::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(_String: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcmpi(_String1: *const cty::c_char, _String2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn stricmp(_String1: *const cty::c_char, _String2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn strlwr(_String: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strnicmp(
        _String1: *const cty::c_char,
        _String2: *const cty::c_char,
        _MaxCount: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strnset(
        _String: *mut cty::c_char,
        _Value: cty::c_int,
        _MaxCount: size_t,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strrev(_String: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strset(_String: *mut cty::c_char, _Value: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strupr(_String: *mut cty::c_char) -> *mut cty::c_char;
}
pub type lv_coord_t = i16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_point_t {
    pub x: lv_coord_t,
    pub y: lv_coord_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_area_t {
    pub x1: lv_coord_t,
    pub y1: lv_coord_t,
    pub x2: lv_coord_t,
    pub y2: lv_coord_t,
}
pub const LV_ALIGN_DEFAULT: cty::c_int = 0;
pub const LV_ALIGN_TOP_LEFT: cty::c_int = 1;
pub const LV_ALIGN_TOP_MID: cty::c_int = 2;
pub const LV_ALIGN_TOP_RIGHT: cty::c_int = 3;
pub const LV_ALIGN_BOTTOM_LEFT: cty::c_int = 4;
pub const LV_ALIGN_BOTTOM_MID: cty::c_int = 5;
pub const LV_ALIGN_BOTTOM_RIGHT: cty::c_int = 6;
pub const LV_ALIGN_LEFT_MID: cty::c_int = 7;
pub const LV_ALIGN_RIGHT_MID: cty::c_int = 8;
pub const LV_ALIGN_CENTER: cty::c_int = 9;
pub const LV_ALIGN_OUT_TOP_LEFT: cty::c_int = 10;
pub const LV_ALIGN_OUT_TOP_MID: cty::c_int = 11;
pub const LV_ALIGN_OUT_TOP_RIGHT: cty::c_int = 12;
pub const LV_ALIGN_OUT_BOTTOM_LEFT: cty::c_int = 13;
pub const LV_ALIGN_OUT_BOTTOM_MID: cty::c_int = 14;
pub const LV_ALIGN_OUT_BOTTOM_RIGHT: cty::c_int = 15;
pub const LV_ALIGN_OUT_LEFT_TOP: cty::c_int = 16;
pub const LV_ALIGN_OUT_LEFT_MID: cty::c_int = 17;
pub const LV_ALIGN_OUT_LEFT_BOTTOM: cty::c_int = 18;
pub const LV_ALIGN_OUT_RIGHT_TOP: cty::c_int = 19;
pub const LV_ALIGN_OUT_RIGHT_MID: cty::c_int = 20;
pub const LV_ALIGN_OUT_RIGHT_BOTTOM: cty::c_int = 21;
pub type _bindgen_ty_3 = cty::c_int;
pub type lv_align_t = u8;
pub const LV_DIR_NONE: cty::c_int = 0;
pub const LV_DIR_LEFT: cty::c_int = 1;
pub const LV_DIR_RIGHT: cty::c_int = 2;
pub const LV_DIR_TOP: cty::c_int = 4;
pub const LV_DIR_BOTTOM: cty::c_int = 8;
pub const LV_DIR_HOR: cty::c_int = 3;
pub const LV_DIR_VER: cty::c_int = 12;
pub const LV_DIR_ALL: cty::c_int = 15;
pub type _bindgen_ty_4 = cty::c_int;
pub type lv_dir_t = u8;
extern "C" {
    pub fn lv_area_set(
        area_p: *mut lv_area_t,
        x1: lv_coord_t,
        y1: lv_coord_t,
        x2: lv_coord_t,
        y2: lv_coord_t,
    );
}
extern "C" {
    pub fn lv_area_set_width(area_p: *mut lv_area_t, w: lv_coord_t);
}
extern "C" {
    pub fn lv_area_set_height(area_p: *mut lv_area_t, h: lv_coord_t);
}
extern "C" {
    pub fn _lv_area_set_pos(area_p: *mut lv_area_t, x: lv_coord_t, y: lv_coord_t);
}
extern "C" {
    pub fn lv_area_get_size(area_p: *const lv_area_t) -> u32;
}
extern "C" {
    pub fn lv_area_increase(area: *mut lv_area_t, w_extra: lv_coord_t, h_extra: lv_coord_t);
}
extern "C" {
    pub fn lv_area_move(area: *mut lv_area_t, x_ofs: lv_coord_t, y_ofs: lv_coord_t);
}
extern "C" {
    pub fn _lv_area_intersect(
        res_p: *mut lv_area_t,
        a1_p: *const lv_area_t,
        a2_p: *const lv_area_t,
    ) -> bool;
}
extern "C" {
    pub fn _lv_area_join(a_res_p: *mut lv_area_t, a1_p: *const lv_area_t, a2_p: *const lv_area_t);
}
extern "C" {
    pub fn _lv_area_is_point_on(
        a_p: *const lv_area_t,
        p_p: *const lv_point_t,
        radius: lv_coord_t,
    ) -> bool;
}
extern "C" {
    pub fn _lv_area_is_on(a1_p: *const lv_area_t, a2_p: *const lv_area_t) -> bool;
}
extern "C" {
    pub fn _lv_area_is_in(
        ain_p: *const lv_area_t,
        aholder_p: *const lv_area_t,
        radius: lv_coord_t,
    ) -> bool;
}
extern "C" {
    pub fn lv_area_align(
        base: *const lv_area_t,
        to_align: *mut lv_area_t,
        align: lv_align_t,
        ofs_x: lv_coord_t,
        ofs_y: lv_coord_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_disp_draw_buf_t {
    pub buf1: *mut cty::c_void,
    pub buf2: *mut cty::c_void,
    pub buf_act: *mut cty::c_void,
    pub size: u32,
    pub area: lv_area_t,
    pub flushing: cty::c_int,
    pub flushing_last: cty::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl _lv_disp_draw_buf_t {
    #[inline]
    pub fn last_area(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_last_area(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn last_part(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_last_part(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(last_area: u32, last_part: u32) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let last_area: u32 = unsafe { ::core::mem::transmute(last_area) };
            last_area as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let last_part: u32 = unsafe { ::core::mem::transmute(last_part) };
            last_part as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type lv_disp_draw_buf_t = _lv_disp_draw_buf_t;
pub const lv_disp_rot_t_LV_DISP_ROT_NONE: lv_disp_rot_t = 0;
pub const lv_disp_rot_t_LV_DISP_ROT_90: lv_disp_rot_t = 1;
pub const lv_disp_rot_t_LV_DISP_ROT_180: lv_disp_rot_t = 2;
pub const lv_disp_rot_t_LV_DISP_ROT_270: lv_disp_rot_t = 3;
pub type lv_disp_rot_t = cty::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _lv_disp_drv_t {
    pub hor_res: lv_coord_t,
    pub ver_res: lv_coord_t,
    pub draw_buf: *mut lv_disp_draw_buf_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub flush_cb: ::core::option::Option<
        unsafe extern "C" fn(
            disp_drv: *mut _lv_disp_drv_t,
            area: *const lv_area_t,
            color_p: *mut lv_color_t,
        ),
    >,
    pub rounder_cb: ::core::option::Option<
        unsafe extern "C" fn(disp_drv: *mut _lv_disp_drv_t, area: *mut lv_area_t),
    >,
    pub set_px_cb: ::core::option::Option<
        unsafe extern "C" fn(
            disp_drv: *mut _lv_disp_drv_t,
            buf: *mut u8,
            buf_w: lv_coord_t,
            x: lv_coord_t,
            y: lv_coord_t,
            color: lv_color_t,
            opa: lv_opa_t,
        ),
    >,
    pub monitor_cb: ::core::option::Option<
        unsafe extern "C" fn(disp_drv: *mut _lv_disp_drv_t, time: u32, px: u32),
    >,
    pub wait_cb: ::core::option::Option<unsafe extern "C" fn(disp_drv: *mut _lv_disp_drv_t)>,
    pub clean_dcache_cb:
        ::core::option::Option<unsafe extern "C" fn(disp_drv: *mut _lv_disp_drv_t)>,
    pub gpu_wait_cb: ::core::option::Option<unsafe extern "C" fn(disp_drv: *mut _lv_disp_drv_t)>,
    pub drv_update_cb: ::core::option::Option<unsafe extern "C" fn(disp_drv: *mut _lv_disp_drv_t)>,
    pub gpu_fill_cb: ::core::option::Option<
        unsafe extern "C" fn(
            disp_drv: *mut _lv_disp_drv_t,
            dest_buf: *mut lv_color_t,
            dest_width: lv_coord_t,
            fill_area: *const lv_area_t,
            color: lv_color_t,
        ),
    >,
    pub color_chroma_key: lv_color_t,
    pub user_data: *mut cty::c_void,
}
impl _lv_disp_drv_t {
    #[inline]
    pub fn full_refresh(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_full_refresh(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sw_rotate(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sw_rotate(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn antialiasing(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_antialiasing(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rotated(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_rotated(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn screen_transp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_screen_transp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dpi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_dpi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        full_refresh: u32,
        sw_rotate: u32,
        antialiasing: u32,
        rotated: u32,
        screen_transp: u32,
        dpi: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let full_refresh: u32 = unsafe { ::core::mem::transmute(full_refresh) };
            full_refresh as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let sw_rotate: u32 = unsafe { ::core::mem::transmute(sw_rotate) };
            sw_rotate as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let antialiasing: u32 = unsafe { ::core::mem::transmute(antialiasing) };
            antialiasing as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let rotated: u32 = unsafe { ::core::mem::transmute(rotated) };
            rotated as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let screen_transp: u32 = unsafe { ::core::mem::transmute(screen_transp) };
            screen_transp as u64
        });
        __bindgen_bitfield_unit.set(6usize, 10u8, {
            let dpi: u32 = unsafe { ::core::mem::transmute(dpi) };
            dpi as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type lv_disp_drv_t = _lv_disp_drv_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _lv_disp_t {
    pub driver: *mut _lv_disp_drv_t,
    pub refr_timer: *mut lv_timer_t,
    pub theme: *mut _lv_theme_t,
    pub screens: *mut *mut _lv_obj_t,
    pub act_scr: *mut _lv_obj_t,
    pub prev_scr: *mut _lv_obj_t,
    pub scr_to_load: *mut _lv_obj_t,
    pub top_layer: *mut _lv_obj_t,
    pub sys_layer: *mut _lv_obj_t,
    pub screen_cnt: u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub bg_opa: lv_opa_t,
    pub bg_color: lv_color_t,
    pub bg_img: *const cty::c_void,
    pub inv_areas: [lv_area_t; 32usize],
    pub inv_area_joined: [u8; 32usize],
    pub inv_p: u16,
    pub last_activity_time: u32,
}
impl _lv_disp_t {
    #[inline]
    pub fn del_prev(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_del_prev(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(del_prev: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let del_prev: u8 = unsafe { ::core::mem::transmute(del_prev) };
            del_prev as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type lv_disp_t = _lv_disp_t;
extern "C" {
    pub fn lv_disp_drv_init(driver: *mut lv_disp_drv_t);
}
extern "C" {
    pub fn lv_disp_draw_buf_init(
        draw_buf: *mut lv_disp_draw_buf_t,
        buf1: *mut cty::c_void,
        buf2: *mut cty::c_void,
        size_in_px_cnt: u32,
    );
}
extern "C" {
    pub fn lv_disp_drv_register(driver: *mut lv_disp_drv_t) -> *mut lv_disp_t;
}
extern "C" {
    pub fn lv_disp_drv_update(disp: *mut lv_disp_t, new_drv: *mut lv_disp_drv_t);
}
extern "C" {
    pub fn lv_disp_remove(disp: *mut lv_disp_t);
}
extern "C" {
    pub fn lv_disp_set_default(disp: *mut lv_disp_t);
}
extern "C" {
    pub fn lv_disp_get_default() -> *mut lv_disp_t;
}
extern "C" {
    pub fn lv_disp_get_hor_res(disp: *mut lv_disp_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_disp_get_ver_res(disp: *mut lv_disp_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_disp_get_antialiasing(disp: *mut lv_disp_t) -> bool;
}
extern "C" {
    pub fn lv_disp_get_dpi(disp: *const lv_disp_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_disp_set_rotation(disp: *mut lv_disp_t, rotation: lv_disp_rot_t);
}
extern "C" {
    pub fn lv_disp_get_rotation(disp: *mut lv_disp_t) -> lv_disp_rot_t;
}
extern "C" {
    pub fn lv_disp_flush_ready(disp_drv: *mut lv_disp_drv_t);
}
extern "C" {
    pub fn lv_disp_flush_is_last(disp_drv: *mut lv_disp_drv_t) -> bool;
}
extern "C" {
    pub fn lv_disp_get_next(disp: *mut lv_disp_t) -> *mut lv_disp_t;
}
extern "C" {
    pub fn lv_disp_get_draw_buf(disp: *mut lv_disp_t) -> *mut lv_disp_draw_buf_t;
}
pub const lv_indev_type_t_LV_INDEV_TYPE_NONE: lv_indev_type_t = 0;
pub const lv_indev_type_t_LV_INDEV_TYPE_POINTER: lv_indev_type_t = 1;
pub const lv_indev_type_t_LV_INDEV_TYPE_KEYPAD: lv_indev_type_t = 2;
pub const lv_indev_type_t_LV_INDEV_TYPE_BUTTON: lv_indev_type_t = 3;
pub const lv_indev_type_t_LV_INDEV_TYPE_ENCODER: lv_indev_type_t = 4;
pub type lv_indev_type_t = cty::c_int;
pub const lv_indev_state_t_LV_INDEV_STATE_RELEASED: lv_indev_state_t = 0;
pub const lv_indev_state_t_LV_INDEV_STATE_PRESSED: lv_indev_state_t = 1;
pub type lv_indev_state_t = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_indev_data_t {
    pub point: lv_point_t,
    pub key: u32,
    pub btn_id: u32,
    pub enc_diff: i16,
    pub state: lv_indev_state_t,
    pub continue_reading: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_indev_drv_t {
    pub type_: lv_indev_type_t,
    pub read_cb: ::core::option::Option<
        unsafe extern "C" fn(indev_drv: *mut _lv_indev_drv_t, data: *mut lv_indev_data_t),
    >,
    pub feedback_cb:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut _lv_indev_drv_t, arg2: u8)>,
    pub user_data: *mut cty::c_void,
    pub disp: *mut _lv_disp_t,
    pub read_timer: *mut lv_timer_t,
    pub scroll_limit: u8,
    pub scroll_throw: u8,
    pub gesture_min_velocity: u8,
    pub gesture_limit: u8,
    pub long_press_time: u16,
    pub long_press_repeat_time: u16,
}
pub type lv_indev_drv_t = _lv_indev_drv_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _lv_indev_proc_t {
    pub state: lv_indev_state_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub types: _lv_indev_proc_t__bindgen_ty_1,
    pub pr_timestamp: u32,
    pub longpr_rep_timestamp: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _lv_indev_proc_t__bindgen_ty_1 {
    pub pointer: _lv_indev_proc_t__bindgen_ty_1__bindgen_ty_1,
    pub keypad: _lv_indev_proc_t__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_indev_proc_t__bindgen_ty_1__bindgen_ty_1 {
    pub act_point: lv_point_t,
    pub last_point: lv_point_t,
    pub last_raw_point: lv_point_t,
    pub vect: lv_point_t,
    pub scroll_sum: lv_point_t,
    pub scroll_throw_vect: lv_point_t,
    pub scroll_throw_vect_ori: lv_point_t,
    pub act_obj: *mut _lv_obj_t,
    pub last_obj: *mut _lv_obj_t,
    pub scroll_obj: *mut _lv_obj_t,
    pub last_pressed: *mut _lv_obj_t,
    pub scroll_area: lv_area_t,
    pub gesture_sum: lv_point_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
impl _lv_indev_proc_t__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn scroll_dir(&self) -> lv_dir_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_scroll_dir(&mut self, val: lv_dir_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn gesture_dir(&self) -> lv_dir_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_gesture_dir(&mut self, val: lv_dir_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn gesture_sent(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_gesture_sent(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        scroll_dir: lv_dir_t,
        gesture_dir: lv_dir_t,
        gesture_sent: u8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let scroll_dir: u8 = unsafe { ::core::mem::transmute(scroll_dir) };
            scroll_dir as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let gesture_dir: u8 = unsafe { ::core::mem::transmute(gesture_dir) };
            gesture_dir as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let gesture_sent: u8 = unsafe { ::core::mem::transmute(gesture_sent) };
            gesture_sent as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_indev_proc_t__bindgen_ty_1__bindgen_ty_2 {
    pub last_state: lv_indev_state_t,
    pub last_key: u32,
}
impl _lv_indev_proc_t {
    #[inline]
    pub fn long_pr_sent(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_long_pr_sent(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reset_query(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_reset_query(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disabled(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_disabled(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wait_until_release(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wait_until_release(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        long_pr_sent: u8,
        reset_query: u8,
        disabled: u8,
        wait_until_release: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let long_pr_sent: u8 = unsafe { ::core::mem::transmute(long_pr_sent) };
            long_pr_sent as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let reset_query: u8 = unsafe { ::core::mem::transmute(reset_query) };
            reset_query as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let disabled: u8 = unsafe { ::core::mem::transmute(disabled) };
            disabled as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let wait_until_release: u8 = unsafe { ::core::mem::transmute(wait_until_release) };
            wait_until_release as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _lv_indev_t {
    pub driver: *mut _lv_indev_drv_t,
    pub proc_: _lv_indev_proc_t,
    pub cursor: *mut _lv_obj_t,
    pub group: *mut _lv_group_t,
    pub btn_points: *const lv_point_t,
}
pub type lv_indev_t = _lv_indev_t;
extern "C" {
    pub fn lv_indev_drv_init(driver: *mut _lv_indev_drv_t);
}
extern "C" {
    pub fn lv_indev_drv_register(driver: *mut _lv_indev_drv_t) -> *mut lv_indev_t;
}
extern "C" {
    pub fn lv_indev_drv_update(indev: *mut lv_indev_t, new_drv: *mut _lv_indev_drv_t);
}
extern "C" {
    pub fn lv_indev_get_next(indev: *mut lv_indev_t) -> *mut lv_indev_t;
}
extern "C" {
    pub fn _lv_indev_read(indev: *mut lv_indev_t, data: *mut lv_indev_data_t);
}
extern "C" {
    pub fn lv_tick_inc(tick_period: u32);
}
extern "C" {
    pub fn lv_tick_get() -> u32;
}
extern "C" {
    pub fn lv_tick_elaps(prev_tick: u32) -> u32;
}
pub const _LV_STR_SYMBOL_AUDIO: cty::c_int = 0;
pub const _LV_STR_SYMBOL_VIDEO: cty::c_int = 1;
pub const _LV_STR_SYMBOL_LIST: cty::c_int = 2;
pub const _LV_STR_SYMBOL_OK: cty::c_int = 3;
pub const _LV_STR_SYMBOL_CLOSE: cty::c_int = 4;
pub const _LV_STR_SYMBOL_POWER: cty::c_int = 5;
pub const _LV_STR_SYMBOL_SETTINGS: cty::c_int = 6;
pub const _LV_STR_SYMBOL_HOME: cty::c_int = 7;
pub const _LV_STR_SYMBOL_DOWNLOAD: cty::c_int = 8;
pub const _LV_STR_SYMBOL_DRIVE: cty::c_int = 9;
pub const _LV_STR_SYMBOL_REFRESH: cty::c_int = 10;
pub const _LV_STR_SYMBOL_MUTE: cty::c_int = 11;
pub const _LV_STR_SYMBOL_VOLUME_MID: cty::c_int = 12;
pub const _LV_STR_SYMBOL_VOLUME_MAX: cty::c_int = 13;
pub const _LV_STR_SYMBOL_IMAGE: cty::c_int = 14;
pub const _LV_STR_SYMBOL_EDIT: cty::c_int = 15;
pub const _LV_STR_SYMBOL_PREV: cty::c_int = 16;
pub const _LV_STR_SYMBOL_PLAY: cty::c_int = 17;
pub const _LV_STR_SYMBOL_PAUSE: cty::c_int = 18;
pub const _LV_STR_SYMBOL_STOP: cty::c_int = 19;
pub const _LV_STR_SYMBOL_NEXT: cty::c_int = 20;
pub const _LV_STR_SYMBOL_EJECT: cty::c_int = 21;
pub const _LV_STR_SYMBOL_LEFT: cty::c_int = 22;
pub const _LV_STR_SYMBOL_RIGHT: cty::c_int = 23;
pub const _LV_STR_SYMBOL_PLUS: cty::c_int = 24;
pub const _LV_STR_SYMBOL_MINUS: cty::c_int = 25;
pub const _LV_STR_SYMBOL_EYE_OPEN: cty::c_int = 26;
pub const _LV_STR_SYMBOL_EYE_CLOSE: cty::c_int = 27;
pub const _LV_STR_SYMBOL_WARNING: cty::c_int = 28;
pub const _LV_STR_SYMBOL_SHUFFLE: cty::c_int = 29;
pub const _LV_STR_SYMBOL_UP: cty::c_int = 30;
pub const _LV_STR_SYMBOL_DOWN: cty::c_int = 31;
pub const _LV_STR_SYMBOL_LOOP: cty::c_int = 32;
pub const _LV_STR_SYMBOL_DIRECTORY: cty::c_int = 33;
pub const _LV_STR_SYMBOL_UPLOAD: cty::c_int = 34;
pub const _LV_STR_SYMBOL_CALL: cty::c_int = 35;
pub const _LV_STR_SYMBOL_CUT: cty::c_int = 36;
pub const _LV_STR_SYMBOL_COPY: cty::c_int = 37;
pub const _LV_STR_SYMBOL_SAVE: cty::c_int = 38;
pub const _LV_STR_SYMBOL_CHARGE: cty::c_int = 39;
pub const _LV_STR_SYMBOL_PASTE: cty::c_int = 40;
pub const _LV_STR_SYMBOL_BELL: cty::c_int = 41;
pub const _LV_STR_SYMBOL_KEYBOARD: cty::c_int = 42;
pub const _LV_STR_SYMBOL_GPS: cty::c_int = 43;
pub const _LV_STR_SYMBOL_FILE: cty::c_int = 44;
pub const _LV_STR_SYMBOL_WIFI: cty::c_int = 45;
pub const _LV_STR_SYMBOL_BATTERY_FULL: cty::c_int = 46;
pub const _LV_STR_SYMBOL_BATTERY_3: cty::c_int = 47;
pub const _LV_STR_SYMBOL_BATTERY_2: cty::c_int = 48;
pub const _LV_STR_SYMBOL_BATTERY_1: cty::c_int = 49;
pub const _LV_STR_SYMBOL_BATTERY_EMPTY: cty::c_int = 50;
pub const _LV_STR_SYMBOL_USB: cty::c_int = 51;
pub const _LV_STR_SYMBOL_BLUETOOTH: cty::c_int = 52;
pub const _LV_STR_SYMBOL_TRASH: cty::c_int = 53;
pub const _LV_STR_SYMBOL_BACKSPACE: cty::c_int = 54;
pub const _LV_STR_SYMBOL_SD_CARD: cty::c_int = 55;
pub const _LV_STR_SYMBOL_NEW_LINE: cty::c_int = 56;
pub const _LV_STR_SYMBOL_DUMMY: cty::c_int = 57;
pub const _LV_STR_SYMBOL_BULLET: cty::c_int = 58;
pub type _bindgen_ty_5 = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_font_glyph_dsc_t {
    pub adv_w: u16,
    pub box_w: u16,
    pub box_h: u16,
    pub ofs_x: i16,
    pub ofs_y: i16,
    pub bpp: u8,
}
pub const LV_FONT_SUBPX_NONE: cty::c_int = 0;
pub const LV_FONT_SUBPX_HOR: cty::c_int = 1;
pub const LV_FONT_SUBPX_VER: cty::c_int = 2;
pub const LV_FONT_SUBPX_BOTH: cty::c_int = 3;
pub type _bindgen_ty_6 = cty::c_int;
pub type lv_font_subpx_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_font_t {
    pub get_glyph_dsc: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *const _lv_font_t,
            arg2: *mut lv_font_glyph_dsc_t,
            letter: u32,
            letter_next: u32,
        ) -> bool,
    >,
    pub get_glyph_bitmap: ::core::option::Option<
        unsafe extern "C" fn(arg1: *const _lv_font_t, arg2: u32) -> *const u8,
    >,
    pub line_height: lv_coord_t,
    pub base_line: lv_coord_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub underline_position: i8,
    pub underline_thickness: i8,
    pub dsc: *const cty::c_void,
    pub user_data: *mut cty::c_void,
}
impl _lv_font_t {
    #[inline]
    pub fn subpx(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_subpx(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(subpx: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let subpx: u8 = unsafe { ::core::mem::transmute(subpx) };
            subpx as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type lv_font_t = _lv_font_t;
extern "C" {
    pub fn lv_font_get_glyph_bitmap(font_p: *const lv_font_t, letter: u32) -> *const u8;
}
extern "C" {
    pub fn lv_font_get_glyph_dsc(
        font_p: *const lv_font_t,
        dsc_out: *mut lv_font_glyph_dsc_t,
        letter: u32,
        letter_next: u32,
    ) -> bool;
}
extern "C" {
    pub fn lv_font_get_glyph_width(font: *const lv_font_t, letter: u32, letter_next: u32) -> u16;
}
extern "C" {
    pub static lv_font_montserrat_14: lv_font_t;
}
pub const lv_anim_enable_t_LV_ANIM_OFF: lv_anim_enable_t = 0;
pub const lv_anim_enable_t_LV_ANIM_ON: lv_anim_enable_t = 1;
pub type lv_anim_enable_t = cty::c_int;
pub type lv_anim_path_cb_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *const _lv_anim_t) -> i32>;
pub type lv_anim_exec_xcb_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void, arg2: i32)>;
pub type lv_anim_custom_exec_cb_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut _lv_anim_t, arg2: i32)>;
pub type lv_anim_ready_cb_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut _lv_anim_t)>;
pub type lv_anim_start_cb_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut _lv_anim_t)>;
pub type lv_anim_get_value_cb_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut _lv_anim_t) -> i32>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_anim_t {
    pub var: *mut cty::c_void,
    pub exec_cb: lv_anim_exec_xcb_t,
    pub start_cb: lv_anim_start_cb_t,
    pub ready_cb: lv_anim_ready_cb_t,
    pub get_value_cb: lv_anim_get_value_cb_t,
    pub user_data: *mut cty::c_void,
    pub path_cb: lv_anim_path_cb_t,
    pub start_value: i32,
    pub current_value: i32,
    pub end_value: i32,
    pub time: i32,
    pub act_time: i32,
    pub playback_delay: u32,
    pub playback_time: u32,
    pub repeat_delay: u32,
    pub repeat_cnt: u16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub time_orig: u32,
}
impl _lv_anim_t {
    #[inline]
    pub fn early_apply(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_early_apply(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn playback_now(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_playback_now(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn run_round(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_run_round(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn start_cb_called(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_start_cb_called(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        early_apply: u8,
        playback_now: u8,
        run_round: u8,
        start_cb_called: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let early_apply: u8 = unsafe { ::core::mem::transmute(early_apply) };
            early_apply as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let playback_now: u8 = unsafe { ::core::mem::transmute(playback_now) };
            playback_now as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let run_round: u8 = unsafe { ::core::mem::transmute(run_round) };
            run_round as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let start_cb_called: u8 = unsafe { ::core::mem::transmute(start_cb_called) };
            start_cb_called as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type lv_anim_t = _lv_anim_t;
extern "C" {
    pub fn _lv_anim_core_init();
}
extern "C" {
    pub fn lv_anim_init(a: *mut lv_anim_t);
}
extern "C" {
    pub fn lv_anim_start(a: *const lv_anim_t) -> *mut lv_anim_t;
}
extern "C" {
    pub fn lv_anim_del(var: *mut cty::c_void, exec_cb: lv_anim_exec_xcb_t) -> bool;
}
extern "C" {
    pub fn lv_anim_del_all();
}
extern "C" {
    pub fn lv_anim_get(var: *mut cty::c_void, exec_cb: lv_anim_exec_xcb_t) -> *mut lv_anim_t;
}
extern "C" {
    pub fn lv_anim_count_running() -> u16;
}
extern "C" {
    pub fn lv_anim_speed_to_time(speed: u32, start: i32, end: i32) -> u32;
}
extern "C" {
    pub fn lv_anim_refr_now();
}
extern "C" {
    pub fn lv_anim_path_linear(a: *const lv_anim_t) -> i32;
}
extern "C" {
    pub fn lv_anim_path_ease_in(a: *const lv_anim_t) -> i32;
}
extern "C" {
    pub fn lv_anim_path_ease_out(a: *const lv_anim_t) -> i32;
}
extern "C" {
    pub fn lv_anim_path_ease_in_out(a: *const lv_anim_t) -> i32;
}
extern "C" {
    pub fn lv_anim_path_overshoot(a: *const lv_anim_t) -> i32;
}
extern "C" {
    pub fn lv_anim_path_bounce(a: *const lv_anim_t) -> i32;
}
extern "C" {
    pub fn lv_anim_path_step(a: *const lv_anim_t) -> i32;
}
extern "C" {
    pub fn lv_snprintf(
        buffer: *mut cty::c_char,
        count: size_t,
        format: *const cty::c_char,
        ...
    ) -> cty::c_int;
}
extern "C" {
    pub fn lv_vsnprintf(
        buffer: *mut cty::c_char,
        count: size_t,
        format: *const cty::c_char,
        va: va_list,
    ) -> cty::c_int;
}
pub const LV_TEXT_FLAG_NONE: cty::c_int = 0;
pub const LV_TEXT_FLAG_RECOLOR: cty::c_int = 1;
pub const LV_TEXT_FLAG_EXPAND: cty::c_int = 2;
pub const LV_TEXT_FLAG_FIT: cty::c_int = 4;
pub type _bindgen_ty_7 = cty::c_int;
pub type lv_text_flag_t = u8;
pub const LV_TEXT_CMD_STATE_WAIT: cty::c_int = 0;
pub const LV_TEXT_CMD_STATE_PAR: cty::c_int = 1;
pub const LV_TEXT_CMD_STATE_IN: cty::c_int = 2;
pub type _bindgen_ty_8 = cty::c_int;
pub type lv_text_cmd_state_t = u8;
pub const LV_TEXT_ALIGN_AUTO: cty::c_int = 0;
pub const LV_TEXT_ALIGN_LEFT: cty::c_int = 1;
pub const LV_TEXT_ALIGN_CENTER: cty::c_int = 2;
pub const LV_TEXT_ALIGN_RIGHT: cty::c_int = 3;
pub type _bindgen_ty_9 = cty::c_int;
pub type lv_text_align_t = u8;
extern "C" {
    pub fn lv_txt_get_size(
        size_res: *mut lv_point_t,
        text: *const cty::c_char,
        font: *const lv_font_t,
        letter_space: lv_coord_t,
        line_space: lv_coord_t,
        max_width: lv_coord_t,
        flag: lv_text_flag_t,
    );
}
extern "C" {
    pub fn _lv_txt_get_next_line(
        txt: *const cty::c_char,
        font: *const lv_font_t,
        letter_space: lv_coord_t,
        max_width: lv_coord_t,
        flag: lv_text_flag_t,
    ) -> u32;
}
extern "C" {
    pub fn lv_txt_get_width(
        txt: *const cty::c_char,
        length: u32,
        font: *const lv_font_t,
        letter_space: lv_coord_t,
        flag: lv_text_flag_t,
    ) -> lv_coord_t;
}
extern "C" {
    pub fn _lv_txt_is_cmd(state: *mut lv_text_cmd_state_t, c: u32) -> bool;
}
extern "C" {
    pub fn _lv_txt_ins(txt_buf: *mut cty::c_char, pos: u32, ins_txt: *const cty::c_char);
}
extern "C" {
    pub fn _lv_txt_cut(txt: *mut cty::c_char, pos: u32, len: u32);
}
extern "C" {
    pub fn _lv_txt_set_text_vfmt(fmt: *const cty::c_char, ap: va_list) -> *mut cty::c_char;
}
extern "C" {
    pub fn _lv_txt_encoded_letter_next_2(
        txt: *const cty::c_char,
        letter: *mut u32,
        letter_next: *mut u32,
        ofs: *mut u32,
    );
}
extern "C" {
    pub static mut _lv_txt_encoded_size:
        ::core::option::Option<unsafe extern "C" fn(arg1: *const cty::c_char) -> u8>;
}
extern "C" {
    pub static mut _lv_txt_unicode_to_encoded:
        ::core::option::Option<unsafe extern "C" fn(arg1: u32) -> u32>;
}
extern "C" {
    pub static mut _lv_txt_encoded_conv_wc:
        ::core::option::Option<unsafe extern "C" fn(c: u32) -> u32>;
}
extern "C" {
    pub static mut _lv_txt_encoded_next: ::core::option::Option<
        unsafe extern "C" fn(arg1: *const cty::c_char, arg2: *mut u32) -> u32,
    >;
}
extern "C" {
    pub static mut _lv_txt_encoded_prev: ::core::option::Option<
        unsafe extern "C" fn(arg1: *const cty::c_char, arg2: *mut u32) -> u32,
    >;
}
extern "C" {
    pub static mut _lv_txt_encoded_get_byte_id:
        ::core::option::Option<unsafe extern "C" fn(arg1: *const cty::c_char, arg2: u32) -> u32>;
}
extern "C" {
    pub static mut _lv_txt_encoded_get_char_id:
        ::core::option::Option<unsafe extern "C" fn(arg1: *const cty::c_char, arg2: u32) -> u32>;
}
extern "C" {
    pub static mut _lv_txt_get_encoded_length:
        ::core::option::Option<unsafe extern "C" fn(arg1: *const cty::c_char) -> u32>;
}
pub const LV_BASE_DIR_LTR: cty::c_int = 0;
pub const LV_BASE_DIR_RTL: cty::c_int = 1;
pub const LV_BASE_DIR_AUTO: cty::c_int = 2;
pub const LV_BASE_DIR_NEUTRAL: cty::c_int = 32;
pub const LV_BASE_DIR_WEAK: cty::c_int = 33;
pub type _bindgen_ty_10 = cty::c_int;
pub type lv_base_dir_t = u8;
pub const LV_BLEND_MODE_NORMAL: cty::c_int = 0;
pub const LV_BLEND_MODE_ADDITIVE: cty::c_int = 1;
pub const LV_BLEND_MODE_SUBTRACTIVE: cty::c_int = 2;
pub type _bindgen_ty_11 = cty::c_int;
pub type lv_blend_mode_t = u8;
pub const LV_TEXT_DECOR_NONE: cty::c_int = 0;
pub const LV_TEXT_DECOR_UNDERLINE: cty::c_int = 1;
pub const LV_TEXT_DECOR_STRIKETHROUGH: cty::c_int = 2;
pub type _bindgen_ty_12 = cty::c_int;
pub type lv_text_decor_t = u8;
pub const LV_BORDER_SIDE_NONE: cty::c_int = 0;
pub const LV_BORDER_SIDE_BOTTOM: cty::c_int = 1;
pub const LV_BORDER_SIDE_TOP: cty::c_int = 2;
pub const LV_BORDER_SIDE_LEFT: cty::c_int = 4;
pub const LV_BORDER_SIDE_RIGHT: cty::c_int = 8;
pub const LV_BORDER_SIDE_FULL: cty::c_int = 15;
pub const LV_BORDER_SIDE_INTERNAL: cty::c_int = 16;
pub type _bindgen_ty_13 = cty::c_int;
pub type lv_border_side_t = u8;
pub const LV_GRAD_DIR_NONE: cty::c_int = 0;
pub const LV_GRAD_DIR_VER: cty::c_int = 1;
pub const LV_GRAD_DIR_HOR: cty::c_int = 2;
pub type _bindgen_ty_14 = cty::c_int;
pub type lv_grad_dir_t = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub union lv_style_value_t {
    pub num: i32,
    pub ptr: *const cty::c_void,
    pub color: lv_color_t,
}
pub const lv_style_prop_t_LV_STYLE_PROP_INV: lv_style_prop_t = 0;
pub const lv_style_prop_t_LV_STYLE_WIDTH: lv_style_prop_t = 4097;
pub const lv_style_prop_t_LV_STYLE_MIN_WIDTH: lv_style_prop_t = 4098;
pub const lv_style_prop_t_LV_STYLE_MAX_WIDTH: lv_style_prop_t = 4099;
pub const lv_style_prop_t_LV_STYLE_HEIGHT: lv_style_prop_t = 4100;
pub const lv_style_prop_t_LV_STYLE_MIN_HEIGHT: lv_style_prop_t = 4101;
pub const lv_style_prop_t_LV_STYLE_MAX_HEIGHT: lv_style_prop_t = 4102;
pub const lv_style_prop_t_LV_STYLE_X: lv_style_prop_t = 4103;
pub const lv_style_prop_t_LV_STYLE_Y: lv_style_prop_t = 4104;
pub const lv_style_prop_t_LV_STYLE_ALIGN: lv_style_prop_t = 4105;
pub const lv_style_prop_t_LV_STYLE_TRANSFORM_WIDTH: lv_style_prop_t = 2058;
pub const lv_style_prop_t_LV_STYLE_TRANSFORM_HEIGHT: lv_style_prop_t = 2059;
pub const lv_style_prop_t_LV_STYLE_TRANSLATE_X: lv_style_prop_t = 12300;
pub const lv_style_prop_t_LV_STYLE_TRANSLATE_Y: lv_style_prop_t = 12301;
pub const lv_style_prop_t_LV_STYLE_TRANSFORM_ZOOM: lv_style_prop_t = 2062;
pub const lv_style_prop_t_LV_STYLE_TRANSFORM_ANGLE: lv_style_prop_t = 2063;
pub const lv_style_prop_t_LV_STYLE_PAD_TOP: lv_style_prop_t = 4112;
pub const lv_style_prop_t_LV_STYLE_PAD_BOTTOM: lv_style_prop_t = 4113;
pub const lv_style_prop_t_LV_STYLE_PAD_LEFT: lv_style_prop_t = 4114;
pub const lv_style_prop_t_LV_STYLE_PAD_RIGHT: lv_style_prop_t = 4115;
pub const lv_style_prop_t_LV_STYLE_PAD_ROW: lv_style_prop_t = 4116;
pub const lv_style_prop_t_LV_STYLE_PAD_COLUMN: lv_style_prop_t = 4117;
pub const lv_style_prop_t_LV_STYLE_BG_COLOR: lv_style_prop_t = 32;
pub const lv_style_prop_t_LV_STYLE_BG_COLOR_FILTERED: lv_style_prop_t = 16416;
pub const lv_style_prop_t_LV_STYLE_BG_OPA: lv_style_prop_t = 33;
pub const lv_style_prop_t_LV_STYLE_BG_GRAD_COLOR: lv_style_prop_t = 34;
pub const lv_style_prop_t_LV_STYLE_BG_GRAD_COLOR_FILTERED: lv_style_prop_t = 16418;
pub const lv_style_prop_t_LV_STYLE_BG_GRAD_DIR: lv_style_prop_t = 35;
pub const lv_style_prop_t_LV_STYLE_BG_MAIN_STOP: lv_style_prop_t = 36;
pub const lv_style_prop_t_LV_STYLE_BG_GRAD_STOP: lv_style_prop_t = 37;
pub const lv_style_prop_t_LV_STYLE_BG_IMG_SRC: lv_style_prop_t = 38;
pub const lv_style_prop_t_LV_STYLE_BG_IMG_OPA: lv_style_prop_t = 39;
pub const lv_style_prop_t_LV_STYLE_BG_IMG_RECOLOR: lv_style_prop_t = 40;
pub const lv_style_prop_t_LV_STYLE_BG_IMG_RECOLOR_FILTERED: lv_style_prop_t = 16424;
pub const lv_style_prop_t_LV_STYLE_BG_IMG_RECOLOR_OPA: lv_style_prop_t = 41;
pub const lv_style_prop_t_LV_STYLE_BG_IMG_TILED: lv_style_prop_t = 42;
pub const lv_style_prop_t_LV_STYLE_BORDER_COLOR: lv_style_prop_t = 48;
pub const lv_style_prop_t_LV_STYLE_BORDER_COLOR_FILTERED: lv_style_prop_t = 16432;
pub const lv_style_prop_t_LV_STYLE_BORDER_OPA: lv_style_prop_t = 49;
pub const lv_style_prop_t_LV_STYLE_BORDER_WIDTH: lv_style_prop_t = 4146;
pub const lv_style_prop_t_LV_STYLE_BORDER_SIDE: lv_style_prop_t = 51;
pub const lv_style_prop_t_LV_STYLE_BORDER_POST: lv_style_prop_t = 52;
pub const lv_style_prop_t_LV_STYLE_OUTLINE_WIDTH: lv_style_prop_t = 2106;
pub const lv_style_prop_t_LV_STYLE_OUTLINE_COLOR: lv_style_prop_t = 59;
pub const lv_style_prop_t_LV_STYLE_OUTLINE_COLOR_FILTERED: lv_style_prop_t = 16443;
pub const lv_style_prop_t_LV_STYLE_OUTLINE_OPA: lv_style_prop_t = 2108;
pub const lv_style_prop_t_LV_STYLE_OUTLINE_PAD: lv_style_prop_t = 2109;
pub const lv_style_prop_t_LV_STYLE_SHADOW_WIDTH: lv_style_prop_t = 2112;
pub const lv_style_prop_t_LV_STYLE_SHADOW_OFS_X: lv_style_prop_t = 2113;
pub const lv_style_prop_t_LV_STYLE_SHADOW_OFS_Y: lv_style_prop_t = 2114;
pub const lv_style_prop_t_LV_STYLE_SHADOW_SPREAD: lv_style_prop_t = 2115;
pub const lv_style_prop_t_LV_STYLE_SHADOW_COLOR: lv_style_prop_t = 68;
pub const lv_style_prop_t_LV_STYLE_SHADOW_COLOR_FILTERED: lv_style_prop_t = 16452;
pub const lv_style_prop_t_LV_STYLE_SHADOW_OPA: lv_style_prop_t = 2117;
pub const lv_style_prop_t_LV_STYLE_IMG_OPA: lv_style_prop_t = 70;
pub const lv_style_prop_t_LV_STYLE_IMG_RECOLOR: lv_style_prop_t = 71;
pub const lv_style_prop_t_LV_STYLE_IMG_RECOLOR_FILTERED: lv_style_prop_t = 16455;
pub const lv_style_prop_t_LV_STYLE_IMG_RECOLOR_OPA: lv_style_prop_t = 72;
pub const lv_style_prop_t_LV_STYLE_LINE_WIDTH: lv_style_prop_t = 2121;
pub const lv_style_prop_t_LV_STYLE_LINE_DASH_WIDTH: lv_style_prop_t = 74;
pub const lv_style_prop_t_LV_STYLE_LINE_DASH_GAP: lv_style_prop_t = 75;
pub const lv_style_prop_t_LV_STYLE_LINE_ROUNDED: lv_style_prop_t = 76;
pub const lv_style_prop_t_LV_STYLE_LINE_COLOR: lv_style_prop_t = 77;
pub const lv_style_prop_t_LV_STYLE_LINE_COLOR_FILTERED: lv_style_prop_t = 16461;
pub const lv_style_prop_t_LV_STYLE_LINE_OPA: lv_style_prop_t = 78;
pub const lv_style_prop_t_LV_STYLE_ARC_WIDTH: lv_style_prop_t = 2128;
pub const lv_style_prop_t_LV_STYLE_ARC_ROUNDED: lv_style_prop_t = 81;
pub const lv_style_prop_t_LV_STYLE_ARC_COLOR: lv_style_prop_t = 82;
pub const lv_style_prop_t_LV_STYLE_ARC_COLOR_FILTERED: lv_style_prop_t = 16466;
pub const lv_style_prop_t_LV_STYLE_ARC_OPA: lv_style_prop_t = 83;
pub const lv_style_prop_t_LV_STYLE_ARC_IMG_SRC: lv_style_prop_t = 84;
pub const lv_style_prop_t_LV_STYLE_TEXT_COLOR: lv_style_prop_t = 1111;
pub const lv_style_prop_t_LV_STYLE_TEXT_COLOR_FILTERED: lv_style_prop_t = 17495;
pub const lv_style_prop_t_LV_STYLE_TEXT_OPA: lv_style_prop_t = 1112;
pub const lv_style_prop_t_LV_STYLE_TEXT_FONT: lv_style_prop_t = 5209;
pub const lv_style_prop_t_LV_STYLE_TEXT_LETTER_SPACE: lv_style_prop_t = 5210;
pub const lv_style_prop_t_LV_STYLE_TEXT_LINE_SPACE: lv_style_prop_t = 5211;
pub const lv_style_prop_t_LV_STYLE_TEXT_DECOR: lv_style_prop_t = 1116;
pub const lv_style_prop_t_LV_STYLE_TEXT_ALIGN: lv_style_prop_t = 5213;
pub const lv_style_prop_t_LV_STYLE_RADIUS: lv_style_prop_t = 96;
pub const lv_style_prop_t_LV_STYLE_CLIP_CORNER: lv_style_prop_t = 97;
pub const lv_style_prop_t_LV_STYLE_OPA: lv_style_prop_t = 1122;
pub const lv_style_prop_t_LV_STYLE_COLOR_FILTER_DSC: lv_style_prop_t = 99;
pub const lv_style_prop_t_LV_STYLE_COLOR_FILTER_OPA: lv_style_prop_t = 100;
pub const lv_style_prop_t_LV_STYLE_ANIM_TIME: lv_style_prop_t = 101;
pub const lv_style_prop_t_LV_STYLE_ANIM_SPEED: lv_style_prop_t = 102;
pub const lv_style_prop_t_LV_STYLE_TRANSITION: lv_style_prop_t = 103;
pub const lv_style_prop_t_LV_STYLE_BLEND_MODE: lv_style_prop_t = 104;
pub const lv_style_prop_t_LV_STYLE_LAYOUT: lv_style_prop_t = 4201;
pub const lv_style_prop_t_LV_STYLE_BASE_DIR: lv_style_prop_t = 5226;
pub const lv_style_prop_t__LV_STYLE_LAST_BUILT_IN_PROP: lv_style_prop_t = 111;
pub const lv_style_prop_t_LV_STYLE_PROP_ANY: lv_style_prop_t = 65535;
pub type lv_style_prop_t = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_style_transition_dsc_t {
    pub props: *const lv_style_prop_t,
    pub user_data: *mut cty::c_void,
    pub path_xcb: lv_anim_path_cb_t,
    pub time: u32,
    pub delay: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_style_const_prop_t {
    pub prop: lv_style_prop_t,
    pub value: lv_style_value_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_style_t {
    pub v_p: lv_style_t__bindgen_ty_1,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub has_group: u8,
    pub prop_cnt: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lv_style_t__bindgen_ty_1 {
    pub value1: lv_style_value_t,
    pub values_and_props: *mut u8,
    pub const_props: *const lv_style_const_prop_t,
}
impl lv_style_t {
    #[inline]
    pub fn prop1(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 15u8) as u16) }
    }
    #[inline]
    pub fn set_prop1(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn is_const(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_is_const(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(prop1: u16, is_const: u16) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 15u8, {
            let prop1: u16 = unsafe { ::core::mem::transmute(prop1) };
            prop1 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let is_const: u16 = unsafe { ::core::mem::transmute(is_const) };
            is_const as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn lv_style_init(style: *mut lv_style_t);
}
extern "C" {
    pub fn lv_style_reset(style: *mut lv_style_t);
}
extern "C" {
    pub fn lv_style_register_prop() -> lv_style_prop_t;
}
extern "C" {
    pub fn lv_style_remove_prop(style: *mut lv_style_t, prop: lv_style_prop_t) -> bool;
}
extern "C" {
    pub fn lv_style_set_prop(
        style: *mut lv_style_t,
        prop: lv_style_prop_t,
        value: lv_style_value_t,
    );
}
extern "C" {
    pub fn lv_style_get_prop(
        style: *mut lv_style_t,
        prop: lv_style_prop_t,
        value: *mut lv_style_value_t,
    ) -> lv_res_t;
}
extern "C" {
    pub fn lv_style_transition_dsc_init(
        tr: *mut lv_style_transition_dsc_t,
        props: *const lv_style_prop_t,
        path_cb: lv_anim_path_cb_t,
        time: u32,
        delay: u32,
        user_data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn lv_style_prop_get_default(prop: lv_style_prop_t) -> lv_style_value_t;
}
extern "C" {
    pub fn lv_style_is_empty(style: *const lv_style_t) -> bool;
}
extern "C" {
    pub fn _lv_style_get_prop_group(prop: lv_style_prop_t) -> u8;
}
extern "C" {
    pub fn lv_style_set_width(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_min_width(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_max_width(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_height(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_min_height(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_max_height(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_x(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_y(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_align(style: *mut lv_style_t, value: lv_align_t);
}
extern "C" {
    pub fn lv_style_set_transform_width(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_transform_height(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_translate_x(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_translate_y(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_transform_zoom(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_transform_angle(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_pad_top(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_pad_bottom(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_pad_left(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_pad_right(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_pad_row(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_pad_column(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_radius(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_clip_corner(style: *mut lv_style_t, value: bool);
}
extern "C" {
    pub fn lv_style_set_opa(style: *mut lv_style_t, value: lv_opa_t);
}
extern "C" {
    pub fn lv_style_set_color_filter_dsc(
        style: *mut lv_style_t,
        value: *const lv_color_filter_dsc_t,
    );
}
extern "C" {
    pub fn lv_style_set_color_filter_opa(style: *mut lv_style_t, value: lv_opa_t);
}
extern "C" {
    pub fn lv_style_set_anim_time(style: *mut lv_style_t, value: u32);
}
extern "C" {
    pub fn lv_style_set_anim_speed(style: *mut lv_style_t, value: u32);
}
extern "C" {
    pub fn lv_style_set_transition(style: *mut lv_style_t, value: *const lv_style_transition_dsc_t);
}
extern "C" {
    pub fn lv_style_set_blend_mode(style: *mut lv_style_t, value: lv_blend_mode_t);
}
extern "C" {
    pub fn lv_style_set_layout(style: *mut lv_style_t, value: u16);
}
extern "C" {
    pub fn lv_style_set_base_dir(style: *mut lv_style_t, value: lv_base_dir_t);
}
extern "C" {
    pub fn lv_style_set_bg_color(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_bg_color_filtered(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_bg_opa(style: *mut lv_style_t, value: lv_opa_t);
}
extern "C" {
    pub fn lv_style_set_bg_grad_color(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_bg_grad_color_filtered(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_bg_grad_dir(style: *mut lv_style_t, value: lv_grad_dir_t);
}
extern "C" {
    pub fn lv_style_set_bg_main_stop(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_bg_grad_stop(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_bg_img_src(style: *mut lv_style_t, value: *const cty::c_void);
}
extern "C" {
    pub fn lv_style_set_bg_img_opa(style: *mut lv_style_t, value: lv_opa_t);
}
extern "C" {
    pub fn lv_style_set_bg_img_recolor(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_bg_img_recolor_filtered(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_bg_img_recolor_opa(style: *mut lv_style_t, value: lv_opa_t);
}
extern "C" {
    pub fn lv_style_set_bg_img_tiled(style: *mut lv_style_t, value: bool);
}
extern "C" {
    pub fn lv_style_set_border_color(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_border_color_filtered(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_border_opa(style: *mut lv_style_t, value: lv_opa_t);
}
extern "C" {
    pub fn lv_style_set_border_width(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_border_side(style: *mut lv_style_t, value: lv_border_side_t);
}
extern "C" {
    pub fn lv_style_set_border_post(style: *mut lv_style_t, value: bool);
}
extern "C" {
    pub fn lv_style_set_text_color(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_text_color_filtered(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_text_opa(style: *mut lv_style_t, value: lv_opa_t);
}
extern "C" {
    pub fn lv_style_set_text_font(style: *mut lv_style_t, value: *const lv_font_t);
}
extern "C" {
    pub fn lv_style_set_text_letter_space(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_text_line_space(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_text_decor(style: *mut lv_style_t, value: lv_text_decor_t);
}
extern "C" {
    pub fn lv_style_set_text_align(style: *mut lv_style_t, value: lv_text_align_t);
}
extern "C" {
    pub fn lv_style_set_img_opa(style: *mut lv_style_t, value: lv_opa_t);
}
extern "C" {
    pub fn lv_style_set_img_recolor(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_img_recolor_filtered(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_img_recolor_opa(style: *mut lv_style_t, value: lv_opa_t);
}
extern "C" {
    pub fn lv_style_set_outline_width(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_outline_color(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_outline_color_filtered(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_outline_opa(style: *mut lv_style_t, value: lv_opa_t);
}
extern "C" {
    pub fn lv_style_set_outline_pad(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_shadow_width(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_shadow_ofs_x(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_shadow_ofs_y(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_shadow_spread(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_shadow_color(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_shadow_color_filtered(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_shadow_opa(style: *mut lv_style_t, value: lv_opa_t);
}
extern "C" {
    pub fn lv_style_set_line_width(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_line_dash_width(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_line_dash_gap(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_line_rounded(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_line_color(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_line_color_filtered(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_line_opa(style: *mut lv_style_t, value: lv_opa_t);
}
extern "C" {
    pub fn lv_style_set_arc_width(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_arc_rounded(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_arc_color(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_arc_color_filtered(style: *mut lv_style_t, value: lv_color_t);
}
extern "C" {
    pub fn lv_style_set_arc_opa(style: *mut lv_style_t, value: lv_opa_t);
}
extern "C" {
    pub fn lv_style_set_arc_img_src(style: *mut lv_style_t, value: *const cty::c_void);
}
pub const LV_STATE_DEFAULT: cty::c_int = 0;
pub const LV_STATE_CHECKED: cty::c_int = 1;
pub const LV_STATE_FOCUSED: cty::c_int = 2;
pub const LV_STATE_FOCUS_KEY: cty::c_int = 4;
pub const LV_STATE_EDITED: cty::c_int = 8;
pub const LV_STATE_HOVERED: cty::c_int = 16;
pub const LV_STATE_PRESSED: cty::c_int = 32;
pub const LV_STATE_SCROLLED: cty::c_int = 64;
pub const LV_STATE_DISABLED: cty::c_int = 128;
pub const LV_STATE_USER_1: cty::c_int = 4096;
pub const LV_STATE_USER_2: cty::c_int = 8192;
pub const LV_STATE_USER_3: cty::c_int = 16384;
pub const LV_STATE_USER_4: cty::c_int = 32768;
pub const LV_STATE_ANY: cty::c_int = 65535;
pub type _bindgen_ty_15 = cty::c_int;
pub type lv_state_t = u16;
pub const LV_PART_MAIN: cty::c_int = 0;
pub const LV_PART_SCROLLBAR: cty::c_int = 65536;
pub const LV_PART_INDICATOR: cty::c_int = 131072;
pub const LV_PART_KNOB: cty::c_int = 196608;
pub const LV_PART_SELECTED: cty::c_int = 262144;
pub const LV_PART_ITEMS: cty::c_int = 327680;
pub const LV_PART_TICKS: cty::c_int = 393216;
pub const LV_PART_CURSOR: cty::c_int = 458752;
pub const LV_PART_CUSTOM_FIRST: cty::c_int = 524288;
pub const LV_PART_ANY: cty::c_int = 983040;
pub type _bindgen_ty_16 = cty::c_int;
pub type lv_part_t = u32;
pub const LV_OBJ_FLAG_HIDDEN: cty::c_int = 1;
pub const LV_OBJ_FLAG_CLICKABLE: cty::c_int = 2;
pub const LV_OBJ_FLAG_CLICK_FOCUSABLE: cty::c_int = 4;
pub const LV_OBJ_FLAG_CHECKABLE: cty::c_int = 8;
pub const LV_OBJ_FLAG_SCROLLABLE: cty::c_int = 16;
pub const LV_OBJ_FLAG_SCROLL_ELASTIC: cty::c_int = 32;
pub const LV_OBJ_FLAG_SCROLL_MOMENTUM: cty::c_int = 64;
pub const LV_OBJ_FLAG_SCROLL_ONE: cty::c_int = 128;
pub const LV_OBJ_FLAG_SCROLL_CHAIN: cty::c_int = 256;
pub const LV_OBJ_FLAG_SCROLL_ON_FOCUS: cty::c_int = 512;
pub const LV_OBJ_FLAG_SNAPABLE: cty::c_int = 1024;
pub const LV_OBJ_FLAG_PRESS_LOCK: cty::c_int = 2048;
pub const LV_OBJ_FLAG_EVENT_BUBBLE: cty::c_int = 4096;
pub const LV_OBJ_FLAG_GESTURE_BUBBLE: cty::c_int = 8192;
pub const LV_OBJ_FLAG_ADV_HITTEST: cty::c_int = 16384;
pub const LV_OBJ_FLAG_IGNORE_LAYOUT: cty::c_int = 32768;
pub const LV_OBJ_FLAG_FLOATING: cty::c_int = 65536;
pub const LV_OBJ_FLAG_LAYOUT_1: cty::c_int = 8388608;
pub const LV_OBJ_FLAG_LAYOUT_2: cty::c_int = 16777216;
pub const LV_OBJ_FLAG_WIDGET_1: cty::c_int = 33554432;
pub const LV_OBJ_FLAG_WIDGET_2: cty::c_int = 67108864;
pub const LV_OBJ_FLAG_USER_1: cty::c_int = 134217728;
pub const LV_OBJ_FLAG_USER_2: cty::c_int = 268435456;
pub const LV_OBJ_FLAG_USER_3: cty::c_int = 536870912;
pub const LV_OBJ_FLAG_USER_4: cty::c_int = 1073741824;
pub type _bindgen_ty_17 = cty::c_int;
pub type lv_obj_flag_t = u32;
pub const lv_obj_tree_walk_res_t_LV_OBJ_TREE_WALK_NEXT: lv_obj_tree_walk_res_t = 0;
pub const lv_obj_tree_walk_res_t_LV_OBJ_TREE_WALK_SKIP_CHILDREN: lv_obj_tree_walk_res_t = 1;
pub const lv_obj_tree_walk_res_t_LV_OBJ_TREE_WALK_END: lv_obj_tree_walk_res_t = 2;
pub type lv_obj_tree_walk_res_t = cty::c_int;
pub type lv_obj_tree_walk_cb_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut _lv_obj_t, arg2: *mut cty::c_void) -> lv_obj_tree_walk_res_t,
>;
extern "C" {
    pub fn lv_obj_del(obj: *mut _lv_obj_t);
}
extern "C" {
    pub fn lv_obj_clean(obj: *mut _lv_obj_t);
}
extern "C" {
    pub fn lv_obj_del_anim_ready_cb(a: *mut lv_anim_t);
}
extern "C" {
    pub fn lv_obj_del_async(obj: *mut _lv_obj_t);
}
extern "C" {
    pub fn lv_obj_set_parent(obj: *mut _lv_obj_t, parent: *mut _lv_obj_t);
}
extern "C" {
    pub fn lv_obj_move_foreground(obj: *mut _lv_obj_t);
}
extern "C" {
    pub fn lv_obj_move_background(obj: *mut _lv_obj_t);
}
extern "C" {
    pub fn lv_obj_get_screen(obj: *const _lv_obj_t) -> *mut _lv_obj_t;
}
extern "C" {
    pub fn lv_obj_get_disp(obj: *const _lv_obj_t) -> *mut lv_disp_t;
}
extern "C" {
    pub fn lv_obj_get_parent(obj: *const _lv_obj_t) -> *mut _lv_obj_t;
}
extern "C" {
    pub fn lv_obj_get_child(obj: *const _lv_obj_t, id: i32) -> *mut _lv_obj_t;
}
extern "C" {
    pub fn lv_obj_get_child_cnt(obj: *const _lv_obj_t) -> u32;
}
extern "C" {
    pub fn lv_obj_get_child_id(obj: *const _lv_obj_t) -> u32;
}
extern "C" {
    pub fn lv_obj_tree_walk(
        start_obj: *mut _lv_obj_t,
        cb: lv_obj_tree_walk_cb_t,
        user_data: *mut cty::c_void,
    );
}
pub type lv_layout_update_cb_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut _lv_obj_t, user_data: *mut cty::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_layout_dsc_t {
    pub cb: lv_layout_update_cb_t,
    pub user_data: *mut cty::c_void,
}
extern "C" {
    pub fn lv_obj_set_pos(obj: *mut _lv_obj_t, x: lv_coord_t, y: lv_coord_t);
}
extern "C" {
    pub fn lv_obj_set_x(obj: *mut _lv_obj_t, x: lv_coord_t);
}
extern "C" {
    pub fn lv_obj_set_y(obj: *mut _lv_obj_t, y: lv_coord_t);
}
extern "C" {
    pub fn lv_obj_set_size(obj: *mut _lv_obj_t, w: lv_coord_t, h: lv_coord_t);
}
extern "C" {
    pub fn lv_obj_refr_size(obj: *mut _lv_obj_t) -> bool;
}
extern "C" {
    pub fn lv_obj_set_width(obj: *mut _lv_obj_t, w: lv_coord_t);
}
extern "C" {
    pub fn lv_obj_set_height(obj: *mut _lv_obj_t, h: lv_coord_t);
}
extern "C" {
    pub fn lv_obj_set_content_width(obj: *mut _lv_obj_t, w: lv_coord_t);
}
extern "C" {
    pub fn lv_obj_set_content_height(obj: *mut _lv_obj_t, h: lv_coord_t);
}
extern "C" {
    pub fn lv_obj_set_layout(obj: *mut _lv_obj_t, layout: u32);
}
extern "C" {
    pub fn lv_obj_is_layout_positioned(obj: *const _lv_obj_t) -> bool;
}
extern "C" {
    pub fn lv_obj_mark_layout_as_dirty(obj: *mut _lv_obj_t);
}
extern "C" {
    pub fn lv_obj_update_layout(obj: *const _lv_obj_t);
}
extern "C" {
    pub fn lv_layout_register(cb: lv_layout_update_cb_t, user_data: *mut cty::c_void) -> u32;
}
extern "C" {
    pub fn lv_obj_set_align(obj: *mut _lv_obj_t, align: lv_align_t);
}
extern "C" {
    pub fn lv_obj_align(
        obj: *mut _lv_obj_t,
        align: lv_align_t,
        x_ofs: lv_coord_t,
        y_ofs: lv_coord_t,
    );
}
extern "C" {
    pub fn lv_obj_align_to(
        obj: *mut _lv_obj_t,
        base: *const _lv_obj_t,
        align: lv_align_t,
        x_ofs: lv_coord_t,
        y_ofs: lv_coord_t,
    );
}
extern "C" {
    pub fn lv_obj_get_coords(obj: *const _lv_obj_t, coords: *mut lv_area_t);
}
extern "C" {
    pub fn lv_obj_get_x(obj: *const _lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_obj_get_x2(obj: *const _lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_obj_get_y(obj: *const _lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_obj_get_y2(obj: *const _lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_obj_get_width(obj: *const _lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_obj_get_height(obj: *const _lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_obj_get_content_width(obj: *const _lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_obj_get_content_height(obj: *const _lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_obj_get_content_coords(obj: *const _lv_obj_t, area: *mut lv_area_t);
}
extern "C" {
    pub fn lv_obj_get_self_width(obj: *const _lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_obj_get_self_height(obj: *const _lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_obj_refresh_self_size(obj: *mut _lv_obj_t) -> bool;
}
extern "C" {
    pub fn lv_obj_refr_pos(obj: *mut _lv_obj_t);
}
extern "C" {
    pub fn lv_obj_move_to(obj: *mut _lv_obj_t, x: lv_coord_t, y: lv_coord_t);
}
extern "C" {
    pub fn lv_obj_move_children_by(
        obj: *mut _lv_obj_t,
        x_diff: lv_coord_t,
        y_diff: lv_coord_t,
        ignore_floating: bool,
    );
}
extern "C" {
    pub fn lv_obj_invalidate_area(obj: *const _lv_obj_t, area: *const lv_area_t);
}
extern "C" {
    pub fn lv_obj_invalidate(obj: *const _lv_obj_t);
}
extern "C" {
    pub fn lv_obj_area_is_visible(obj: *const _lv_obj_t, area: *mut lv_area_t) -> bool;
}
extern "C" {
    pub fn lv_obj_is_visible(obj: *const _lv_obj_t) -> bool;
}
extern "C" {
    pub fn lv_obj_set_ext_click_area(obj: *mut _lv_obj_t, size: lv_coord_t);
}
extern "C" {
    pub fn lv_obj_get_click_area(obj: *const _lv_obj_t, area: *mut lv_area_t);
}
extern "C" {
    pub fn lv_obj_hit_test(obj: *mut _lv_obj_t, point: *const lv_point_t) -> bool;
}
extern "C" {
    pub fn lv_clamp_width(
        width: lv_coord_t,
        min_width: lv_coord_t,
        max_width: lv_coord_t,
        ref_width: lv_coord_t,
    ) -> lv_coord_t;
}
extern "C" {
    pub fn lv_clamp_height(
        height: lv_coord_t,
        min_height: lv_coord_t,
        max_height: lv_coord_t,
        ref_height: lv_coord_t,
    ) -> lv_coord_t;
}
pub const LV_SCROLLBAR_MODE_OFF: cty::c_int = 0;
pub const LV_SCROLLBAR_MODE_ON: cty::c_int = 1;
pub const LV_SCROLLBAR_MODE_ACTIVE: cty::c_int = 2;
pub const LV_SCROLLBAR_MODE_AUTO: cty::c_int = 3;
pub type _bindgen_ty_18 = cty::c_int;
pub type lv_scrollbar_mode_t = u8;
pub const LV_SCROLL_SNAP_NONE: cty::c_int = 0;
pub const LV_SCROLL_SNAP_START: cty::c_int = 1;
pub const LV_SCROLL_SNAP_END: cty::c_int = 2;
pub const LV_SCROLL_SNAP_CENTER: cty::c_int = 3;
pub type _bindgen_ty_19 = cty::c_int;
pub type lv_scroll_snap_t = u8;
extern "C" {
    pub fn lv_obj_set_scrollbar_mode(obj: *mut _lv_obj_t, mode: lv_scrollbar_mode_t);
}
extern "C" {
    pub fn lv_obj_set_scroll_dir(obj: *mut _lv_obj_t, dir: lv_dir_t);
}
extern "C" {
    pub fn lv_obj_set_scroll_snap_x(obj: *mut _lv_obj_t, align: lv_scroll_snap_t);
}
extern "C" {
    pub fn lv_obj_set_scroll_snap_y(obj: *mut _lv_obj_t, align: lv_scroll_snap_t);
}
extern "C" {
    pub fn lv_obj_get_scrollbar_mode(obj: *const _lv_obj_t) -> lv_scrollbar_mode_t;
}
extern "C" {
    pub fn lv_obj_get_scroll_dir(obj: *const _lv_obj_t) -> lv_dir_t;
}
extern "C" {
    pub fn lv_obj_get_scroll_snap_x(obj: *const _lv_obj_t) -> lv_scroll_snap_t;
}
extern "C" {
    pub fn lv_obj_get_scroll_snap_y(obj: *const _lv_obj_t) -> lv_scroll_snap_t;
}
extern "C" {
    pub fn lv_obj_get_scroll_x(obj: *const _lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_obj_get_scroll_y(obj: *const _lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_obj_get_scroll_top(obj: *mut _lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_obj_get_scroll_bottom(obj: *mut _lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_obj_get_scroll_left(obj: *mut _lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_obj_get_scroll_right(obj: *mut _lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_obj_get_scroll_end(obj: *mut _lv_obj_t, end: *mut lv_point_t);
}
extern "C" {
    pub fn lv_obj_scroll_by(
        obj: *mut _lv_obj_t,
        x: lv_coord_t,
        y: lv_coord_t,
        anim_en: lv_anim_enable_t,
    );
}
extern "C" {
    pub fn lv_obj_scroll_to(
        obj: *mut _lv_obj_t,
        x: lv_coord_t,
        y: lv_coord_t,
        anim_en: lv_anim_enable_t,
    );
}
extern "C" {
    pub fn lv_obj_scroll_to_x(obj: *mut _lv_obj_t, x: lv_coord_t, anim_en: lv_anim_enable_t);
}
extern "C" {
    pub fn lv_obj_scroll_to_y(obj: *mut _lv_obj_t, y: lv_coord_t, anim_en: lv_anim_enable_t);
}
extern "C" {
    pub fn lv_obj_scroll_to_view(obj: *mut _lv_obj_t, anim_en: lv_anim_enable_t);
}
extern "C" {
    pub fn lv_obj_scroll_to_view_recursive(obj: *mut _lv_obj_t, anim_en: lv_anim_enable_t);
}
extern "C" {
    pub fn lv_obj_is_scrolling(obj: *const _lv_obj_t) -> bool;
}
extern "C" {
    pub fn lv_obj_update_snap(obj: *mut _lv_obj_t, anim_en: lv_anim_enable_t);
}
extern "C" {
    pub fn lv_obj_get_scrollbar_area(obj: *mut _lv_obj_t, hor: *mut lv_area_t, ver: *mut lv_area_t);
}
extern "C" {
    pub fn lv_obj_scrollbar_invalidate(obj: *mut _lv_obj_t);
}
extern "C" {
    pub fn lv_obj_readjust_scroll(obj: *mut _lv_obj_t, anim_en: lv_anim_enable_t);
}
pub const _lv_style_state_cmp_t__LV_STYLE_STATE_CMP_SAME: _lv_style_state_cmp_t = 0;
pub const _lv_style_state_cmp_t__LV_STYLE_STATE_CMP_DIFF_REDRAW: _lv_style_state_cmp_t = 1;
pub const _lv_style_state_cmp_t__LV_STYLE_STATE_CMP_DIFF_DRAW_PAD: _lv_style_state_cmp_t = 2;
pub const _lv_style_state_cmp_t__LV_STYLE_STATE_CMP_DIFF_LAYOUT: _lv_style_state_cmp_t = 3;
pub type _lv_style_state_cmp_t = cty::c_int;
pub type lv_style_selector_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_obj_style_t {
    pub style: *mut lv_style_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
impl _lv_obj_style_t {
    #[inline]
    pub fn selector(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_selector(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn is_local(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_local(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_trans(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_trans(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        selector: u32,
        is_local: u32,
        is_trans: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let selector: u32 = unsafe { ::core::mem::transmute(selector) };
            selector as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let is_local: u32 = unsafe { ::core::mem::transmute(is_local) };
            is_local as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let is_trans: u32 = unsafe { ::core::mem::transmute(is_trans) };
            is_trans as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_obj_style_transition_dsc_t {
    pub time: u16,
    pub delay: u16,
    pub selector: lv_style_selector_t,
    pub prop: lv_style_prop_t,
    pub path_cb: lv_anim_path_cb_t,
    pub user_data: *mut cty::c_void,
}
extern "C" {
    pub fn _lv_obj_style_init();
}
extern "C" {
    pub fn lv_obj_add_style(
        obj: *mut _lv_obj_t,
        style: *mut lv_style_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_remove_style(
        obj: *mut _lv_obj_t,
        style: *mut lv_style_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_report_style_change(style: *mut lv_style_t);
}
extern "C" {
    pub fn lv_obj_refresh_style(obj: *mut _lv_obj_t, part: lv_part_t, prop: lv_style_prop_t);
}
extern "C" {
    pub fn lv_obj_enable_style_refresh(en: bool);
}
extern "C" {
    pub fn lv_obj_get_style_prop(
        obj: *const _lv_obj_t,
        part: lv_part_t,
        prop: lv_style_prop_t,
    ) -> lv_style_value_t;
}
extern "C" {
    pub fn lv_obj_set_local_style_prop(
        obj: *mut _lv_obj_t,
        prop: lv_style_prop_t,
        value: lv_style_value_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_get_local_style_prop(
        obj: *mut _lv_obj_t,
        prop: lv_style_prop_t,
        value: *mut lv_style_value_t,
        selector: lv_style_selector_t,
    ) -> lv_res_t;
}
extern "C" {
    pub fn lv_obj_remove_local_style_prop(
        obj: *mut _lv_obj_t,
        prop: lv_style_prop_t,
        selector: lv_style_selector_t,
    ) -> bool;
}
extern "C" {
    pub fn _lv_obj_style_create_transition(
        obj: *mut _lv_obj_t,
        part: lv_part_t,
        prev_state: lv_state_t,
        new_state: lv_state_t,
        tr: *const _lv_obj_style_transition_dsc_t,
    );
}
extern "C" {
    pub fn _lv_obj_style_state_compare(
        obj: *mut _lv_obj_t,
        state1: lv_state_t,
        state2: lv_state_t,
    ) -> _lv_style_state_cmp_t;
}
extern "C" {
    pub fn lv_obj_fade_in(obj: *mut _lv_obj_t, time: u32, delay: u32);
}
extern "C" {
    pub fn lv_obj_fade_out(obj: *mut _lv_obj_t, time: u32, delay: u32);
}
extern "C" {
    pub fn lv_obj_style_get_selector_state(selector: lv_style_selector_t) -> lv_state_t;
}
extern "C" {
    pub fn lv_obj_style_get_selector_part(selector: lv_style_selector_t) -> lv_part_t;
}
extern "C" {
    pub fn lv_obj_set_style_width(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_min_width(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_max_width(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_height(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_min_height(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_max_height(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_x(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_y(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_align(
        obj: *mut _lv_obj_t,
        value: lv_align_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_transform_width(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_transform_height(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_translate_x(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_translate_y(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_transform_zoom(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_transform_angle(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_pad_top(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_pad_bottom(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_pad_left(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_pad_right(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_pad_row(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_pad_column(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_radius(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_clip_corner(
        obj: *mut _lv_obj_t,
        value: bool,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_opa(
        obj: *mut _lv_obj_t,
        value: lv_opa_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_color_filter_dsc(
        obj: *mut _lv_obj_t,
        value: *const lv_color_filter_dsc_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_color_filter_opa(
        obj: *mut _lv_obj_t,
        value: lv_opa_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_anim_time(
        obj: *mut _lv_obj_t,
        value: u32,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_anim_speed(
        obj: *mut _lv_obj_t,
        value: u32,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_transition(
        obj: *mut _lv_obj_t,
        value: *const lv_style_transition_dsc_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_blend_mode(
        obj: *mut _lv_obj_t,
        value: lv_blend_mode_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_layout(obj: *mut _lv_obj_t, value: u16, selector: lv_style_selector_t);
}
extern "C" {
    pub fn lv_obj_set_style_base_dir(
        obj: *mut _lv_obj_t,
        value: lv_base_dir_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_bg_color(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_bg_color_filtered(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_bg_opa(
        obj: *mut _lv_obj_t,
        value: lv_opa_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_bg_grad_color(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_bg_grad_color_filtered(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_bg_grad_dir(
        obj: *mut _lv_obj_t,
        value: lv_grad_dir_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_bg_main_stop(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_bg_grad_stop(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_bg_img_src(
        obj: *mut _lv_obj_t,
        value: *const cty::c_void,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_bg_img_opa(
        obj: *mut _lv_obj_t,
        value: lv_opa_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_bg_img_recolor(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_bg_img_recolor_filtered(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_bg_img_recolor_opa(
        obj: *mut _lv_obj_t,
        value: lv_opa_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_bg_img_tiled(
        obj: *mut _lv_obj_t,
        value: bool,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_border_color(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_border_color_filtered(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_border_opa(
        obj: *mut _lv_obj_t,
        value: lv_opa_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_border_width(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_border_side(
        obj: *mut _lv_obj_t,
        value: lv_border_side_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_border_post(
        obj: *mut _lv_obj_t,
        value: bool,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_text_color(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_text_color_filtered(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_text_opa(
        obj: *mut _lv_obj_t,
        value: lv_opa_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_text_font(
        obj: *mut _lv_obj_t,
        value: *const lv_font_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_text_letter_space(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_text_line_space(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_text_decor(
        obj: *mut _lv_obj_t,
        value: lv_text_decor_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_text_align(
        obj: *mut _lv_obj_t,
        value: lv_text_align_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_img_opa(
        obj: *mut _lv_obj_t,
        value: lv_opa_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_img_recolor(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_img_recolor_filtered(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_img_recolor_opa(
        obj: *mut _lv_obj_t,
        value: lv_opa_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_outline_width(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_outline_color(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_outline_color_filtered(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_outline_opa(
        obj: *mut _lv_obj_t,
        value: lv_opa_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_outline_pad(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_shadow_width(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_shadow_ofs_x(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_shadow_ofs_y(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_shadow_spread(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_shadow_color(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_shadow_color_filtered(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_shadow_opa(
        obj: *mut _lv_obj_t,
        value: lv_opa_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_line_width(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_line_dash_width(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_line_dash_gap(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_line_rounded(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_line_color(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_line_color_filtered(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_line_opa(
        obj: *mut _lv_obj_t,
        value: lv_opa_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_arc_width(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_arc_rounded(
        obj: *mut _lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_arc_color(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_arc_color_filtered(
        obj: *mut _lv_obj_t,
        value: lv_color_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_arc_opa(
        obj: *mut _lv_obj_t,
        value: lv_opa_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_arc_img_src(
        obj: *mut _lv_obj_t,
        value: *const cty::c_void,
        selector: lv_style_selector_t,
    );
}
pub const LV_IMG_CF_UNKNOWN: cty::c_int = 0;
pub const LV_IMG_CF_RAW: cty::c_int = 1;
pub const LV_IMG_CF_RAW_ALPHA: cty::c_int = 2;
pub const LV_IMG_CF_RAW_CHROMA_KEYED: cty::c_int = 3;
pub const LV_IMG_CF_TRUE_COLOR: cty::c_int = 4;
pub const LV_IMG_CF_TRUE_COLOR_ALPHA: cty::c_int = 5;
pub const LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED: cty::c_int = 6;
pub const LV_IMG_CF_INDEXED_1BIT: cty::c_int = 7;
pub const LV_IMG_CF_INDEXED_2BIT: cty::c_int = 8;
pub const LV_IMG_CF_INDEXED_4BIT: cty::c_int = 9;
pub const LV_IMG_CF_INDEXED_8BIT: cty::c_int = 10;
pub const LV_IMG_CF_ALPHA_1BIT: cty::c_int = 11;
pub const LV_IMG_CF_ALPHA_2BIT: cty::c_int = 12;
pub const LV_IMG_CF_ALPHA_4BIT: cty::c_int = 13;
pub const LV_IMG_CF_ALPHA_8BIT: cty::c_int = 14;
pub const LV_IMG_CF_RESERVED_15: cty::c_int = 15;
pub const LV_IMG_CF_RESERVED_16: cty::c_int = 16;
pub const LV_IMG_CF_RESERVED_17: cty::c_int = 17;
pub const LV_IMG_CF_RESERVED_18: cty::c_int = 18;
pub const LV_IMG_CF_RESERVED_19: cty::c_int = 19;
pub const LV_IMG_CF_RESERVED_20: cty::c_int = 20;
pub const LV_IMG_CF_RESERVED_21: cty::c_int = 21;
pub const LV_IMG_CF_RESERVED_22: cty::c_int = 22;
pub const LV_IMG_CF_RESERVED_23: cty::c_int = 23;
pub const LV_IMG_CF_USER_ENCODED_0: cty::c_int = 24;
pub const LV_IMG_CF_USER_ENCODED_1: cty::c_int = 25;
pub const LV_IMG_CF_USER_ENCODED_2: cty::c_int = 26;
pub const LV_IMG_CF_USER_ENCODED_3: cty::c_int = 27;
pub const LV_IMG_CF_USER_ENCODED_4: cty::c_int = 28;
pub const LV_IMG_CF_USER_ENCODED_5: cty::c_int = 29;
pub const LV_IMG_CF_USER_ENCODED_6: cty::c_int = 30;
pub const LV_IMG_CF_USER_ENCODED_7: cty::c_int = 31;
pub type _bindgen_ty_20 = cty::c_int;
pub type lv_img_cf_t = u8;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct lv_img_header_t {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl lv_img_header_t {
    #[inline]
    pub fn cf(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_cf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn always_zero(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_always_zero(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn w(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_w(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn h(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_h(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cf: u32,
        always_zero: u32,
        reserved: u32,
        w: u32,
        h: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let cf: u32 = unsafe { ::core::mem::transmute(cf) };
            cf as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let always_zero: u32 = unsafe { ::core::mem::transmute(always_zero) };
            always_zero as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit.set(10usize, 11u8, {
            let w: u32 = unsafe { ::core::mem::transmute(w) };
            w as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let h: u32 = unsafe { ::core::mem::transmute(h) };
            h as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_img_dsc_t {
    pub header: lv_img_header_t,
    pub data_size: u32,
    pub data: *const u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_img_transform_dsc_t {
    pub cfg: lv_img_transform_dsc_t__bindgen_ty_1,
    pub res: lv_img_transform_dsc_t__bindgen_ty_2,
    pub tmp: lv_img_transform_dsc_t__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_img_transform_dsc_t__bindgen_ty_1 {
    pub src: *const cty::c_void,
    pub src_w: lv_coord_t,
    pub src_h: lv_coord_t,
    pub pivot_x: lv_coord_t,
    pub pivot_y: lv_coord_t,
    pub angle: i16,
    pub zoom: u16,
    pub color: lv_color_t,
    pub cf: lv_img_cf_t,
    pub antialias: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_img_transform_dsc_t__bindgen_ty_2 {
    pub color: lv_color_t,
    pub opa: lv_opa_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_img_transform_dsc_t__bindgen_ty_3 {
    pub img_dsc: lv_img_dsc_t,
    pub pivot_x_256: i32,
    pub pivot_y_256: i32,
    pub sinma: i32,
    pub cosma: i32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub zoom_inv: u32,
    pub xs: lv_coord_t,
    pub ys: lv_coord_t,
    pub xs_int: lv_coord_t,
    pub ys_int: lv_coord_t,
    pub pxi: u32,
    pub px_size: u8,
}
impl lv_img_transform_dsc_t__bindgen_ty_3 {
    #[inline]
    pub fn chroma_keyed(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_chroma_keyed(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_alpha(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_has_alpha(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn native_color(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_native_color(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        chroma_keyed: u8,
        has_alpha: u8,
        native_color: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let chroma_keyed: u8 = unsafe { ::core::mem::transmute(chroma_keyed) };
            chroma_keyed as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let has_alpha: u8 = unsafe { ::core::mem::transmute(has_alpha) };
            has_alpha as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let native_color: u8 = unsafe { ::core::mem::transmute(native_color) };
            native_color as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn lv_img_buf_alloc(w: lv_coord_t, h: lv_coord_t, cf: lv_img_cf_t) -> *mut lv_img_dsc_t;
}
extern "C" {
    pub fn lv_img_buf_get_px_color(
        dsc: *mut lv_img_dsc_t,
        x: lv_coord_t,
        y: lv_coord_t,
        color: lv_color_t,
    ) -> lv_color_t;
}
extern "C" {
    pub fn lv_img_buf_get_px_alpha(
        dsc: *mut lv_img_dsc_t,
        x: lv_coord_t,
        y: lv_coord_t,
    ) -> lv_opa_t;
}
extern "C" {
    pub fn lv_img_buf_set_px_color(
        dsc: *mut lv_img_dsc_t,
        x: lv_coord_t,
        y: lv_coord_t,
        c: lv_color_t,
    );
}
extern "C" {
    pub fn lv_img_buf_set_px_alpha(
        dsc: *mut lv_img_dsc_t,
        x: lv_coord_t,
        y: lv_coord_t,
        opa: lv_opa_t,
    );
}
extern "C" {
    pub fn lv_img_buf_set_palette(dsc: *mut lv_img_dsc_t, id: u8, c: lv_color_t);
}
extern "C" {
    pub fn lv_img_buf_free(dsc: *mut lv_img_dsc_t);
}
extern "C" {
    pub fn lv_img_buf_get_img_size(w: lv_coord_t, h: lv_coord_t, cf: lv_img_cf_t) -> u32;
}
extern "C" {
    pub fn _lv_img_buf_transform_init(dsc: *mut lv_img_transform_dsc_t);
}
extern "C" {
    pub fn _lv_img_buf_transform_anti_alias(dsc: *mut lv_img_transform_dsc_t) -> bool;
}
extern "C" {
    pub fn _lv_img_buf_transform(
        dsc: *mut lv_img_transform_dsc_t,
        x: lv_coord_t,
        y: lv_coord_t,
    ) -> bool;
}
extern "C" {
    pub fn _lv_img_buf_get_transformed_area(
        res: *mut lv_area_t,
        w: lv_coord_t,
        h: lv_coord_t,
        angle: i16,
        zoom: u16,
        pivot: *const lv_point_t,
    );
}
pub const LV_FS_RES_OK: cty::c_int = 0;
pub const LV_FS_RES_HW_ERR: cty::c_int = 1;
pub const LV_FS_RES_FS_ERR: cty::c_int = 2;
pub const LV_FS_RES_NOT_EX: cty::c_int = 3;
pub const LV_FS_RES_FULL: cty::c_int = 4;
pub const LV_FS_RES_LOCKED: cty::c_int = 5;
pub const LV_FS_RES_DENIED: cty::c_int = 6;
pub const LV_FS_RES_BUSY: cty::c_int = 7;
pub const LV_FS_RES_TOUT: cty::c_int = 8;
pub const LV_FS_RES_NOT_IMP: cty::c_int = 9;
pub const LV_FS_RES_OUT_OF_MEM: cty::c_int = 10;
pub const LV_FS_RES_INV_PARAM: cty::c_int = 11;
pub const LV_FS_RES_UNKNOWN: cty::c_int = 12;
pub type _bindgen_ty_21 = cty::c_int;
pub type lv_fs_res_t = u8;
pub const LV_FS_MODE_WR: cty::c_int = 1;
pub const LV_FS_MODE_RD: cty::c_int = 2;
pub type _bindgen_ty_22 = cty::c_int;
pub type lv_fs_mode_t = u8;
pub const lv_fs_whence_t_LV_FS_SEEK_SET: lv_fs_whence_t = 0;
pub const lv_fs_whence_t_LV_FS_SEEK_CUR: lv_fs_whence_t = 1;
pub const lv_fs_whence_t_LV_FS_SEEK_END: lv_fs_whence_t = 2;
pub type lv_fs_whence_t = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_fs_drv_t {
    pub letter: cty::c_char,
    pub ready_cb: ::core::option::Option<unsafe extern "C" fn(drv: *mut _lv_fs_drv_t) -> bool>,
    pub open_cb: ::core::option::Option<
        unsafe extern "C" fn(
            drv: *mut _lv_fs_drv_t,
            path: *const cty::c_char,
            mode: lv_fs_mode_t,
        ) -> *mut cty::c_void,
    >,
    pub close_cb: ::core::option::Option<
        unsafe extern "C" fn(drv: *mut _lv_fs_drv_t, file_p: *mut cty::c_void) -> lv_fs_res_t,
    >,
    pub read_cb: ::core::option::Option<
        unsafe extern "C" fn(
            drv: *mut _lv_fs_drv_t,
            file_p: *mut cty::c_void,
            buf: *mut cty::c_void,
            btr: u32,
            br: *mut u32,
        ) -> lv_fs_res_t,
    >,
    pub write_cb: ::core::option::Option<
        unsafe extern "C" fn(
            drv: *mut _lv_fs_drv_t,
            file_p: *mut cty::c_void,
            buf: *const cty::c_void,
            btw: u32,
            bw: *mut u32,
        ) -> lv_fs_res_t,
    >,
    pub seek_cb: ::core::option::Option<
        unsafe extern "C" fn(
            drv: *mut _lv_fs_drv_t,
            file_p: *mut cty::c_void,
            pos: u32,
            whence: lv_fs_whence_t,
        ) -> lv_fs_res_t,
    >,
    pub tell_cb: ::core::option::Option<
        unsafe extern "C" fn(
            drv: *mut _lv_fs_drv_t,
            file_p: *mut cty::c_void,
            pos_p: *mut u32,
        ) -> lv_fs_res_t,
    >,
    pub dir_open_cb: ::core::option::Option<
        unsafe extern "C" fn(drv: *mut _lv_fs_drv_t, path: *const cty::c_char) -> *mut cty::c_void,
    >,
    pub dir_read_cb: ::core::option::Option<
        unsafe extern "C" fn(
            drv: *mut _lv_fs_drv_t,
            rddir_p: *mut cty::c_void,
            fn_: *mut cty::c_char,
        ) -> lv_fs_res_t,
    >,
    pub dir_close_cb: ::core::option::Option<
        unsafe extern "C" fn(drv: *mut _lv_fs_drv_t, rddir_p: *mut cty::c_void) -> lv_fs_res_t,
    >,
    pub user_data: *mut cty::c_void,
}
pub type lv_fs_drv_t = _lv_fs_drv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_fs_file_t {
    pub file_d: *mut cty::c_void,
    pub drv: *mut lv_fs_drv_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_fs_dir_t {
    pub dir_d: *mut cty::c_void,
    pub drv: *mut lv_fs_drv_t,
}
extern "C" {
    pub fn _lv_fs_init();
}
extern "C" {
    pub fn lv_fs_drv_init(drv: *mut lv_fs_drv_t);
}
extern "C" {
    pub fn lv_fs_drv_register(drv_p: *mut lv_fs_drv_t);
}
extern "C" {
    pub fn lv_fs_get_drv(letter: cty::c_char) -> *mut lv_fs_drv_t;
}
extern "C" {
    pub fn lv_fs_is_ready(letter: cty::c_char) -> bool;
}
extern "C" {
    pub fn lv_fs_open(
        file_p: *mut lv_fs_file_t,
        path: *const cty::c_char,
        mode: lv_fs_mode_t,
    ) -> lv_fs_res_t;
}
extern "C" {
    pub fn lv_fs_close(file_p: *mut lv_fs_file_t) -> lv_fs_res_t;
}
extern "C" {
    pub fn lv_fs_read(
        file_p: *mut lv_fs_file_t,
        buf: *mut cty::c_void,
        btr: u32,
        br: *mut u32,
    ) -> lv_fs_res_t;
}
extern "C" {
    pub fn lv_fs_write(
        file_p: *mut lv_fs_file_t,
        buf: *const cty::c_void,
        btw: u32,
        bw: *mut u32,
    ) -> lv_fs_res_t;
}
extern "C" {
    pub fn lv_fs_seek(file_p: *mut lv_fs_file_t, pos: u32, whence: lv_fs_whence_t) -> lv_fs_res_t;
}
extern "C" {
    pub fn lv_fs_tell(file_p: *mut lv_fs_file_t, pos: *mut u32) -> lv_fs_res_t;
}
extern "C" {
    pub fn lv_fs_dir_open(rddir_p: *mut lv_fs_dir_t, path: *const cty::c_char) -> lv_fs_res_t;
}
extern "C" {
    pub fn lv_fs_dir_read(rddir_p: *mut lv_fs_dir_t, fn_: *mut cty::c_char) -> lv_fs_res_t;
}
extern "C" {
    pub fn lv_fs_dir_close(rddir_p: *mut lv_fs_dir_t) -> lv_fs_res_t;
}
extern "C" {
    pub fn lv_fs_get_letters(buf: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn lv_fs_get_ext(fn_: *const cty::c_char) -> *const cty::c_char;
}
extern "C" {
    pub fn lv_fs_up(path: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn lv_fs_get_last(path: *const cty::c_char) -> *const cty::c_char;
}
pub const LV_IMG_SRC_VARIABLE: cty::c_int = 0;
pub const LV_IMG_SRC_FILE: cty::c_int = 1;
pub const LV_IMG_SRC_SYMBOL: cty::c_int = 2;
pub const LV_IMG_SRC_UNKNOWN: cty::c_int = 3;
pub type _bindgen_ty_23 = cty::c_int;
pub type lv_img_src_t = u8;
pub type lv_img_decoder_info_f_t = ::core::option::Option<
    unsafe extern "C" fn(
        decoder: *mut _lv_img_decoder_t,
        src: *const cty::c_void,
        header: *mut lv_img_header_t,
    ) -> lv_res_t,
>;
pub type lv_img_decoder_open_f_t = ::core::option::Option<
    unsafe extern "C" fn(
        decoder: *mut _lv_img_decoder_t,
        dsc: *mut _lv_img_decoder_dsc_t,
    ) -> lv_res_t,
>;
pub type lv_img_decoder_read_line_f_t = ::core::option::Option<
    unsafe extern "C" fn(
        decoder: *mut _lv_img_decoder_t,
        dsc: *mut _lv_img_decoder_dsc_t,
        x: lv_coord_t,
        y: lv_coord_t,
        len: lv_coord_t,
        buf: *mut u8,
    ) -> lv_res_t,
>;
pub type lv_img_decoder_close_f_t = ::core::option::Option<
    unsafe extern "C" fn(decoder: *mut _lv_img_decoder_t, dsc: *mut _lv_img_decoder_dsc_t),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_img_decoder_t {
    pub info_cb: lv_img_decoder_info_f_t,
    pub open_cb: lv_img_decoder_open_f_t,
    pub read_line_cb: lv_img_decoder_read_line_f_t,
    pub close_cb: lv_img_decoder_close_f_t,
    pub user_data: *mut cty::c_void,
}
pub type lv_img_decoder_t = _lv_img_decoder_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _lv_img_decoder_dsc_t {
    pub decoder: *mut lv_img_decoder_t,
    pub src: *const cty::c_void,
    pub color: lv_color_t,
    pub frame_id: i32,
    pub src_type: lv_img_src_t,
    pub header: lv_img_header_t,
    pub img_data: *const u8,
    pub time_to_open: u32,
    pub error_msg: *const cty::c_char,
    pub user_data: *mut cty::c_void,
}
pub type lv_img_decoder_dsc_t = _lv_img_decoder_dsc_t;
extern "C" {
    pub fn _lv_img_decoder_init();
}
extern "C" {
    pub fn lv_img_decoder_get_info(
        src: *const cty::c_void,
        header: *mut lv_img_header_t,
    ) -> lv_res_t;
}
extern "C" {
    pub fn lv_img_decoder_open(
        dsc: *mut lv_img_decoder_dsc_t,
        src: *const cty::c_void,
        color: lv_color_t,
        frame_id: i32,
    ) -> lv_res_t;
}
extern "C" {
    pub fn lv_img_decoder_read_line(
        dsc: *mut lv_img_decoder_dsc_t,
        x: lv_coord_t,
        y: lv_coord_t,
        len: lv_coord_t,
        buf: *mut u8,
    ) -> lv_res_t;
}
extern "C" {
    pub fn lv_img_decoder_close(dsc: *mut lv_img_decoder_dsc_t);
}
extern "C" {
    pub fn lv_img_decoder_create() -> *mut lv_img_decoder_t;
}
extern "C" {
    pub fn lv_img_decoder_delete(decoder: *mut lv_img_decoder_t);
}
extern "C" {
    pub fn lv_img_decoder_set_info_cb(
        decoder: *mut lv_img_decoder_t,
        info_cb: lv_img_decoder_info_f_t,
    );
}
extern "C" {
    pub fn lv_img_decoder_set_open_cb(
        decoder: *mut lv_img_decoder_t,
        open_cb: lv_img_decoder_open_f_t,
    );
}
extern "C" {
    pub fn lv_img_decoder_set_read_line_cb(
        decoder: *mut lv_img_decoder_t,
        read_line_cb: lv_img_decoder_read_line_f_t,
    );
}
extern "C" {
    pub fn lv_img_decoder_set_close_cb(
        decoder: *mut lv_img_decoder_t,
        close_cb: lv_img_decoder_close_f_t,
    );
}
extern "C" {
    pub fn lv_img_decoder_built_in_info(
        decoder: *mut lv_img_decoder_t,
        src: *const cty::c_void,
        header: *mut lv_img_header_t,
    ) -> lv_res_t;
}
extern "C" {
    pub fn lv_img_decoder_built_in_open(
        decoder: *mut lv_img_decoder_t,
        dsc: *mut lv_img_decoder_dsc_t,
    ) -> lv_res_t;
}
extern "C" {
    pub fn lv_img_decoder_built_in_read_line(
        decoder: *mut lv_img_decoder_t,
        dsc: *mut lv_img_decoder_dsc_t,
        x: lv_coord_t,
        y: lv_coord_t,
        len: lv_coord_t,
        buf: *mut u8,
    ) -> lv_res_t;
}
extern "C" {
    pub fn lv_img_decoder_built_in_close(
        decoder: *mut lv_img_decoder_t,
        dsc: *mut lv_img_decoder_dsc_t,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _lv_img_cache_entry_t {
    pub dec_dsc: lv_img_decoder_dsc_t,
    pub life: i32,
}
extern "C" {
    pub fn _lv_img_cache_open(
        src: *const cty::c_void,
        color: lv_color_t,
        frame_id: i32,
    ) -> *mut _lv_img_cache_entry_t;
}
extern "C" {
    pub fn lv_img_cache_set_size(new_slot_num: u16);
}
extern "C" {
    pub fn lv_img_cache_invalidate_src(src: *const cty::c_void);
}
pub const LV_DRAW_MASK_RES_TRANSP: cty::c_int = 0;
pub const LV_DRAW_MASK_RES_FULL_COVER: cty::c_int = 1;
pub const LV_DRAW_MASK_RES_CHANGED: cty::c_int = 2;
pub const LV_DRAW_MASK_RES_UNKNOWN: cty::c_int = 3;
pub type _bindgen_ty_24 = cty::c_int;
pub type lv_draw_mask_res_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_draw_mask_saved_t {
    pub param: *mut cty::c_void,
    pub custom_id: *mut cty::c_void,
}
pub type _lv_draw_mask_saved_arr_t = [_lv_draw_mask_saved_t; 16usize];
pub const LV_DRAW_MASK_TYPE_LINE: cty::c_int = 0;
pub const LV_DRAW_MASK_TYPE_ANGLE: cty::c_int = 1;
pub const LV_DRAW_MASK_TYPE_RADIUS: cty::c_int = 2;
pub const LV_DRAW_MASK_TYPE_FADE: cty::c_int = 3;
pub const LV_DRAW_MASK_TYPE_MAP: cty::c_int = 4;
pub type _bindgen_ty_25 = cty::c_int;
pub type lv_draw_mask_type_t = u8;
pub const LV_DRAW_MASK_LINE_SIDE_LEFT: cty::c_int = 0;
pub const LV_DRAW_MASK_LINE_SIDE_RIGHT: cty::c_int = 1;
pub const LV_DRAW_MASK_LINE_SIDE_TOP: cty::c_int = 2;
pub const LV_DRAW_MASK_LINE_SIDE_BOTTOM: cty::c_int = 3;
pub type _bindgen_ty_26 = cty::c_int;
pub type lv_draw_mask_xcb_t = ::core::option::Option<
    unsafe extern "C" fn(
        mask_buf: *mut lv_opa_t,
        abs_x: lv_coord_t,
        abs_y: lv_coord_t,
        len: lv_coord_t,
        p: *mut cty::c_void,
    ) -> lv_draw_mask_res_t,
>;
pub type lv_draw_mask_line_side_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_draw_mask_common_dsc_t {
    pub cb: lv_draw_mask_xcb_t,
    pub type_: lv_draw_mask_type_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_draw_mask_line_param_t {
    pub dsc: _lv_draw_mask_common_dsc_t,
    pub cfg: lv_draw_mask_line_param_t__bindgen_ty_1,
    pub origo: lv_point_t,
    pub xy_steep: i32,
    pub yx_steep: i32,
    pub steep: i32,
    pub spx: i32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_draw_mask_line_param_t__bindgen_ty_1 {
    pub p1: lv_point_t,
    pub p2: lv_point_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
impl lv_draw_mask_line_param_t__bindgen_ty_1 {
    #[inline]
    pub fn side(&self) -> lv_draw_mask_line_side_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_side(&mut self, val: lv_draw_mask_line_side_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(side: lv_draw_mask_line_side_t) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let side: u8 = unsafe { ::core::mem::transmute(side) };
            side as u64
        });
        __bindgen_bitfield_unit
    }
}
impl lv_draw_mask_line_param_t {
    #[inline]
    pub fn flat(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_flat(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn inv(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_inv(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(flat: u8, inv: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let flat: u8 = unsafe { ::core::mem::transmute(flat) };
            flat as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let inv: u8 = unsafe { ::core::mem::transmute(inv) };
            inv as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_draw_mask_angle_param_t {
    pub dsc: _lv_draw_mask_common_dsc_t,
    pub cfg: lv_draw_mask_angle_param_t__bindgen_ty_1,
    pub start_line: lv_draw_mask_line_param_t,
    pub end_line: lv_draw_mask_line_param_t,
    pub delta_deg: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_draw_mask_angle_param_t__bindgen_ty_1 {
    pub vertex_p: lv_point_t,
    pub start_angle: lv_coord_t,
    pub end_angle: lv_coord_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_draw_mask_radius_param_t {
    pub dsc: _lv_draw_mask_common_dsc_t,
    pub cfg: lv_draw_mask_radius_param_t__bindgen_ty_1,
    pub y_prev: i32,
    pub y_prev_x: lv_sqrt_res_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_draw_mask_radius_param_t__bindgen_ty_1 {
    pub rect: lv_area_t,
    pub radius: lv_coord_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
impl lv_draw_mask_radius_param_t__bindgen_ty_1 {
    #[inline]
    pub fn outer(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_outer(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(outer: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let outer: u8 = unsafe { ::core::mem::transmute(outer) };
            outer as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_draw_mask_fade_param_t {
    pub dsc: _lv_draw_mask_common_dsc_t,
    pub cfg: lv_draw_mask_fade_param_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_draw_mask_fade_param_t__bindgen_ty_1 {
    pub coords: lv_area_t,
    pub y_top: lv_coord_t,
    pub y_bottom: lv_coord_t,
    pub opa_top: lv_opa_t,
    pub opa_bottom: lv_opa_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_draw_mask_map_param_t {
    pub dsc: _lv_draw_mask_common_dsc_t,
    pub cfg: _lv_draw_mask_map_param_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_draw_mask_map_param_t__bindgen_ty_1 {
    pub coords: lv_area_t,
    pub map: *const lv_opa_t,
}
pub type lv_draw_mask_map_param_t = _lv_draw_mask_map_param_t;
extern "C" {
    pub fn lv_draw_mask_add(param: *mut cty::c_void, custom_id: *mut cty::c_void) -> i16;
}
extern "C" {
    pub fn lv_draw_mask_apply(
        mask_buf: *mut lv_opa_t,
        abs_x: lv_coord_t,
        abs_y: lv_coord_t,
        len: lv_coord_t,
    ) -> lv_draw_mask_res_t;
}
extern "C" {
    pub fn lv_draw_mask_remove_id(id: i16) -> *mut cty::c_void;
}
extern "C" {
    pub fn lv_draw_mask_remove_custom(custom_id: *mut cty::c_void) -> *mut cty::c_void;
}
extern "C" {
    pub fn lv_draw_mask_get_cnt() -> u8;
}
extern "C" {
    pub fn lv_draw_mask_line_points_init(
        param: *mut lv_draw_mask_line_param_t,
        p1x: lv_coord_t,
        p1y: lv_coord_t,
        p2x: lv_coord_t,
        p2y: lv_coord_t,
        side: lv_draw_mask_line_side_t,
    );
}
extern "C" {
    pub fn lv_draw_mask_line_angle_init(
        param: *mut lv_draw_mask_line_param_t,
        p1x: lv_coord_t,
        py: lv_coord_t,
        angle: i16,
        side: lv_draw_mask_line_side_t,
    );
}
extern "C" {
    pub fn lv_draw_mask_angle_init(
        param: *mut lv_draw_mask_angle_param_t,
        vertex_x: lv_coord_t,
        vertex_y: lv_coord_t,
        start_angle: lv_coord_t,
        end_angle: lv_coord_t,
    );
}
extern "C" {
    pub fn lv_draw_mask_radius_init(
        param: *mut lv_draw_mask_radius_param_t,
        rect: *const lv_area_t,
        radius: lv_coord_t,
        inv: bool,
    );
}
extern "C" {
    pub fn lv_draw_mask_fade_init(
        param: *mut lv_draw_mask_fade_param_t,
        coords: *const lv_area_t,
        opa_top: lv_opa_t,
        y_top: lv_coord_t,
        opa_bottom: lv_opa_t,
        y_bottom: lv_coord_t,
    );
}
extern "C" {
    pub fn lv_draw_mask_map_init(
        param: *mut lv_draw_mask_map_param_t,
        coords: *const lv_area_t,
        map: *const lv_opa_t,
    );
}
extern "C" {
    pub fn _lv_blend_fill(
        clip_area: *const lv_area_t,
        fill_area: *const lv_area_t,
        color: lv_color_t,
        mask: *mut lv_opa_t,
        mask_res: lv_draw_mask_res_t,
        opa: lv_opa_t,
        mode: lv_blend_mode_t,
    );
}
extern "C" {
    pub fn _lv_blend_map(
        clip_area: *const lv_area_t,
        map_area: *const lv_area_t,
        map_buf: *const lv_color_t,
        mask: *mut lv_opa_t,
        mask_res: lv_draw_mask_res_t,
        opa: lv_opa_t,
        mode: lv_blend_mode_t,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_draw_rect_dsc_t {
    pub radius: lv_coord_t,
    pub blend_mode: lv_blend_mode_t,
    pub bg_color: lv_color_t,
    pub bg_grad_color: lv_color_t,
    pub bg_main_color_stop: u8,
    pub bg_grad_color_stop: u8,
    pub bg_opa: lv_opa_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub bg_img_src: *const cty::c_void,
    pub bg_img_symbol_font: *const cty::c_void,
    pub bg_img_recolor: lv_color_t,
    pub bg_img_opa: lv_opa_t,
    pub bg_img_recolor_opa: lv_opa_t,
    pub bg_img_tiled: u8,
    pub border_color: lv_color_t,
    pub border_width: lv_coord_t,
    pub border_opa: lv_opa_t,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub outline_color: lv_color_t,
    pub outline_width: lv_coord_t,
    pub outline_pad: lv_coord_t,
    pub outline_opa: lv_opa_t,
    pub shadow_color: lv_color_t,
    pub shadow_width: lv_coord_t,
    pub shadow_ofs_x: lv_coord_t,
    pub shadow_ofs_y: lv_coord_t,
    pub shadow_spread: lv_coord_t,
    pub shadow_opa: lv_opa_t,
}
impl lv_draw_rect_dsc_t {
    #[inline]
    pub fn bg_grad_dir(&self) -> lv_grad_dir_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_bg_grad_dir(&mut self, val: lv_grad_dir_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(bg_grad_dir: lv_grad_dir_t) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let bg_grad_dir: u8 = unsafe { ::core::mem::transmute(bg_grad_dir) };
            bg_grad_dir as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn border_post(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_border_post(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn border_side(&self) -> lv_border_side_t {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(1usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_border_side(&mut self, val: lv_border_side_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(1usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        border_post: u8,
        border_side: lv_border_side_t,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let border_post: u8 = unsafe { ::core::mem::transmute(border_post) };
            border_post as u64
        });
        __bindgen_bitfield_unit.set(1usize, 5u8, {
            let border_side: u8 = unsafe { ::core::mem::transmute(border_side) };
            border_side as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn lv_draw_rect_dsc_init(dsc: *mut lv_draw_rect_dsc_t);
}
extern "C" {
    pub fn lv_draw_rect(
        coords: *const lv_area_t,
        mask: *const lv_area_t,
        dsc: *const lv_draw_rect_dsc_t,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_draw_label_dsc_t {
    pub font: *const lv_font_t,
    pub sel_start: u32,
    pub sel_end: u32,
    pub color: lv_color_t,
    pub sel_color: lv_color_t,
    pub sel_bg_color: lv_color_t,
    pub line_space: lv_coord_t,
    pub letter_space: lv_coord_t,
    pub ofs_x: lv_coord_t,
    pub ofs_y: lv_coord_t,
    pub opa: lv_opa_t,
    pub bidi_dir: lv_base_dir_t,
    pub flag: lv_text_flag_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl lv_draw_label_dsc_t {
    #[inline]
    pub fn align(&self) -> lv_text_align_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_align(&mut self, val: lv_text_align_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn decor(&self) -> lv_text_decor_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_decor(&mut self, val: lv_text_decor_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn blend_mode(&self) -> lv_blend_mode_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_blend_mode(&mut self, val: lv_blend_mode_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        align: lv_text_align_t,
        decor: lv_text_decor_t,
        blend_mode: lv_blend_mode_t,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let align: u8 = unsafe { ::core::mem::transmute(align) };
            align as u64
        });
        __bindgen_bitfield_unit.set(2usize, 3u8, {
            let decor: u8 = unsafe { ::core::mem::transmute(decor) };
            decor as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let blend_mode: u8 = unsafe { ::core::mem::transmute(blend_mode) };
            blend_mode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_draw_label_hint_t {
    pub line_start: i32,
    pub y: i32,
    pub coord_y: i32,
}
pub type lv_draw_label_hint_t = _lv_draw_label_hint_t;
extern "C" {
    pub fn lv_draw_label_dsc_init(dsc: *mut lv_draw_label_dsc_t);
}
extern "C" {
    pub fn lv_draw_label(
        coords: *const lv_area_t,
        mask: *const lv_area_t,
        dsc: *const lv_draw_label_dsc_t,
        txt: *const cty::c_char,
        hint: *mut lv_draw_label_hint_t,
    );
}
extern "C" {
    pub fn lv_draw_letter(
        pos_p: *const lv_point_t,
        clip_area: *const lv_area_t,
        font_p: *const lv_font_t,
        letter: u32,
        color: lv_color_t,
        opa: lv_opa_t,
        blend_mode: lv_blend_mode_t,
    );
}
extern "C" {
    pub static mut _lv_bpp2_opa_table: [u8; 0usize];
}
extern "C" {
    pub static mut _lv_bpp3_opa_table: [u8; 0usize];
}
extern "C" {
    pub static mut _lv_bpp1_opa_table: [u8; 0usize];
}
extern "C" {
    pub static mut _lv_bpp4_opa_table: [u8; 0usize];
}
extern "C" {
    pub static mut _lv_bpp8_opa_table: [u8; 0usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_draw_img_dsc_t {
    pub angle: u16,
    pub zoom: u16,
    pub pivot: lv_point_t,
    pub recolor: lv_color_t,
    pub recolor_opa: lv_opa_t,
    pub opa: lv_opa_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub frame_id: i32,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl lv_draw_img_dsc_t {
    #[inline]
    pub fn blend_mode(&self) -> lv_blend_mode_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_blend_mode(&mut self, val: lv_blend_mode_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(blend_mode: lv_blend_mode_t) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let blend_mode: u8 = unsafe { ::core::mem::transmute(blend_mode) };
            blend_mode as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn antialias(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_antialias(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(antialias: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let antialias: u8 = unsafe { ::core::mem::transmute(antialias) };
            antialias as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn lv_draw_img_dsc_init(dsc: *mut lv_draw_img_dsc_t);
}
extern "C" {
    pub fn lv_draw_img(
        coords: *const lv_area_t,
        mask: *const lv_area_t,
        src: *const cty::c_void,
        dsc: *const lv_draw_img_dsc_t,
    );
}
extern "C" {
    pub fn lv_img_src_get_type(src: *const cty::c_void) -> lv_img_src_t;
}
extern "C" {
    pub fn lv_img_cf_get_px_size(cf: lv_img_cf_t) -> u8;
}
extern "C" {
    pub fn lv_img_cf_is_chroma_keyed(cf: lv_img_cf_t) -> bool;
}
extern "C" {
    pub fn lv_img_cf_has_alpha(cf: lv_img_cf_t) -> bool;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_draw_line_dsc_t {
    pub color: lv_color_t,
    pub width: lv_coord_t,
    pub dash_width: lv_coord_t,
    pub dash_gap: lv_coord_t,
    pub opa: lv_opa_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl lv_draw_line_dsc_t {
    #[inline]
    pub fn blend_mode(&self) -> lv_blend_mode_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_blend_mode(&mut self, val: lv_blend_mode_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn round_start(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_round_start(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn round_end(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_round_end(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn raw_end(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_raw_end(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        blend_mode: lv_blend_mode_t,
        round_start: u8,
        round_end: u8,
        raw_end: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let blend_mode: u8 = unsafe { ::core::mem::transmute(blend_mode) };
            blend_mode as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let round_start: u8 = unsafe { ::core::mem::transmute(round_start) };
            round_start as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let round_end: u8 = unsafe { ::core::mem::transmute(round_end) };
            round_end as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let raw_end: u8 = unsafe { ::core::mem::transmute(raw_end) };
            raw_end as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn lv_draw_line(
        point1: *const lv_point_t,
        point2: *const lv_point_t,
        clip: *const lv_area_t,
        dsc: *const lv_draw_line_dsc_t,
    );
}
extern "C" {
    pub fn lv_draw_line_dsc_init(dsc: *mut lv_draw_line_dsc_t);
}
extern "C" {
    pub fn lv_draw_triangle(
        points: *const lv_point_t,
        clip: *const lv_area_t,
        draw_dsc: *const lv_draw_rect_dsc_t,
    );
}
extern "C" {
    pub fn lv_draw_polygon(
        points: *const lv_point_t,
        point_cnt: u16,
        mask: *const lv_area_t,
        draw_dsc: *const lv_draw_rect_dsc_t,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_draw_arc_dsc_t {
    pub color: lv_color_t,
    pub width: lv_coord_t,
    pub img_src: *const cty::c_void,
    pub opa: lv_opa_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u16; 3usize],
}
impl lv_draw_arc_dsc_t {
    #[inline]
    pub fn blend_mode(&self) -> lv_blend_mode_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_blend_mode(&mut self, val: lv_blend_mode_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rounded(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rounded(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        blend_mode: lv_blend_mode_t,
        rounded: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let blend_mode: u8 = unsafe { ::core::mem::transmute(blend_mode) };
            blend_mode as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let rounded: u8 = unsafe { ::core::mem::transmute(rounded) };
            rounded as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn lv_draw_arc_dsc_init(dsc: *mut lv_draw_arc_dsc_t);
}
extern "C" {
    pub fn lv_draw_arc(
        center_x: lv_coord_t,
        center_y: lv_coord_t,
        radius: u16,
        start_angle: u16,
        end_angle: u16,
        clip_area: *const lv_area_t,
        dsc: *const lv_draw_arc_dsc_t,
    );
}
extern "C" {
    pub fn lv_draw_arc_get_area(
        x: lv_coord_t,
        y: lv_coord_t,
        radius: u16,
        start_angle: u16,
        end_angle: u16,
        w: lv_coord_t,
        rounded: bool,
        area: *mut lv_area_t,
    );
}
pub const lv_cover_res_t_LV_COVER_RES_COVER: lv_cover_res_t = 0;
pub const lv_cover_res_t_LV_COVER_RES_NOT_COVER: lv_cover_res_t = 1;
pub const lv_cover_res_t_LV_COVER_RES_MASKED: lv_cover_res_t = 2;
pub type lv_cover_res_t = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_obj_draw_part_dsc_t {
    pub clip_area: *const lv_area_t,
    pub draw_area: *mut lv_area_t,
    pub rect_dsc: *mut lv_draw_rect_dsc_t,
    pub label_dsc: *mut lv_draw_label_dsc_t,
    pub line_dsc: *mut lv_draw_line_dsc_t,
    pub img_dsc: *mut lv_draw_img_dsc_t,
    pub arc_dsc: *mut lv_draw_arc_dsc_t,
    pub p1: *const lv_point_t,
    pub p2: *const lv_point_t,
    pub text: [cty::c_char; 16usize],
    pub part: u32,
    pub id: u32,
    pub radius: lv_coord_t,
    pub value: i32,
    pub sub_part_ptr: *const cty::c_void,
}
extern "C" {
    pub fn lv_obj_init_draw_rect_dsc(
        obj: *mut _lv_obj_t,
        part: u32,
        draw_dsc: *mut lv_draw_rect_dsc_t,
    );
}
extern "C" {
    pub fn lv_obj_init_draw_label_dsc(
        obj: *mut _lv_obj_t,
        part: u32,
        draw_dsc: *mut lv_draw_label_dsc_t,
    );
}
extern "C" {
    pub fn lv_obj_init_draw_img_dsc(
        obj: *mut _lv_obj_t,
        part: u32,
        draw_dsc: *mut lv_draw_img_dsc_t,
    );
}
extern "C" {
    pub fn lv_obj_init_draw_line_dsc(
        obj: *mut _lv_obj_t,
        part: u32,
        draw_dsc: *mut lv_draw_line_dsc_t,
    );
}
extern "C" {
    pub fn lv_obj_init_draw_arc_dsc(
        obj: *mut _lv_obj_t,
        part: u32,
        draw_dsc: *mut lv_draw_arc_dsc_t,
    );
}
extern "C" {
    pub fn lv_obj_calculate_ext_draw_size(obj: *mut _lv_obj_t, part: u32) -> lv_coord_t;
}
extern "C" {
    pub fn lv_obj_draw_dsc_init(dsc: *mut lv_obj_draw_part_dsc_t, clip_area: *const lv_area_t);
}
extern "C" {
    pub fn lv_obj_refresh_ext_draw_size(obj: *mut _lv_obj_t);
}
extern "C" {
    pub fn _lv_obj_get_ext_draw_size(obj: *const _lv_obj_t) -> lv_coord_t;
}
pub const lv_obj_class_editable_t_LV_OBJ_CLASS_EDITABLE_INHERIT: lv_obj_class_editable_t = 0;
pub const lv_obj_class_editable_t_LV_OBJ_CLASS_EDITABLE_TRUE: lv_obj_class_editable_t = 1;
pub const lv_obj_class_editable_t_LV_OBJ_CLASS_EDITABLE_FALSE: lv_obj_class_editable_t = 2;
pub type lv_obj_class_editable_t = cty::c_int;
pub const lv_obj_class_group_def_t_LV_OBJ_CLASS_GROUP_DEF_INHERIT: lv_obj_class_group_def_t = 0;
pub const lv_obj_class_group_def_t_LV_OBJ_CLASS_GROUP_DEF_TRUE: lv_obj_class_group_def_t = 1;
pub const lv_obj_class_group_def_t_LV_OBJ_CLASS_GROUP_DEF_FALSE: lv_obj_class_group_def_t = 2;
pub type lv_obj_class_group_def_t = cty::c_int;
pub type lv_obj_class_event_cb_t = ::core::option::Option<
    unsafe extern "C" fn(class_p: *mut _lv_obj_class_t, e: *mut _lv_event_t),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_obj_class_t {
    pub base_class: *const _lv_obj_class_t,
    pub constructor_cb: ::core::option::Option<
        unsafe extern "C" fn(class_p: *const _lv_obj_class_t, obj: *mut _lv_obj_t),
    >,
    pub destructor_cb: ::core::option::Option<
        unsafe extern "C" fn(class_p: *const _lv_obj_class_t, obj: *mut _lv_obj_t),
    >,
    pub user_data: *mut cty::c_void,
    pub event_cb: ::core::option::Option<
        unsafe extern "C" fn(class_p: *const _lv_obj_class_t, e: *mut _lv_event_t),
    >,
    pub width_def: lv_coord_t,
    pub height_def: lv_coord_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
}
impl _lv_obj_class_t {
    #[inline]
    pub fn editable(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_editable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn group_def(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_group_def(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn instance_size(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_instance_size(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        editable: u32,
        group_def: u32,
        instance_size: u32,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let editable: u32 = unsafe { ::core::mem::transmute(editable) };
            editable as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let group_def: u32 = unsafe { ::core::mem::transmute(group_def) };
            group_def as u64
        });
        __bindgen_bitfield_unit.set(4usize, 16u8, {
            let instance_size: u32 = unsafe { ::core::mem::transmute(instance_size) };
            instance_size as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type lv_obj_class_t = _lv_obj_class_t;
extern "C" {
    pub fn lv_obj_class_create_obj(
        class_p: *const _lv_obj_class_t,
        parent: *mut _lv_obj_t,
    ) -> *mut _lv_obj_t;
}
extern "C" {
    pub fn lv_obj_class_init_obj(obj: *mut _lv_obj_t);
}
extern "C" {
    pub fn _lv_obj_destruct(obj: *mut _lv_obj_t);
}
extern "C" {
    pub fn lv_obj_is_editable(obj: *mut _lv_obj_t) -> bool;
}
extern "C" {
    pub fn lv_obj_is_group_def(obj: *mut _lv_obj_t) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_event_dsc_t {
    _unused: [u8; 0],
}
pub const lv_event_code_t_LV_EVENT_ALL: lv_event_code_t = 0;
pub const lv_event_code_t_LV_EVENT_PRESSED: lv_event_code_t = 1;
pub const lv_event_code_t_LV_EVENT_PRESSING: lv_event_code_t = 2;
pub const lv_event_code_t_LV_EVENT_PRESS_LOST: lv_event_code_t = 3;
pub const lv_event_code_t_LV_EVENT_SHORT_CLICKED: lv_event_code_t = 4;
pub const lv_event_code_t_LV_EVENT_LONG_PRESSED: lv_event_code_t = 5;
pub const lv_event_code_t_LV_EVENT_LONG_PRESSED_REPEAT: lv_event_code_t = 6;
pub const lv_event_code_t_LV_EVENT_CLICKED: lv_event_code_t = 7;
pub const lv_event_code_t_LV_EVENT_RELEASED: lv_event_code_t = 8;
pub const lv_event_code_t_LV_EVENT_SCROLL_BEGIN: lv_event_code_t = 9;
pub const lv_event_code_t_LV_EVENT_SCROLL_END: lv_event_code_t = 10;
pub const lv_event_code_t_LV_EVENT_SCROLL: lv_event_code_t = 11;
pub const lv_event_code_t_LV_EVENT_GESTURE: lv_event_code_t = 12;
pub const lv_event_code_t_LV_EVENT_KEY: lv_event_code_t = 13;
pub const lv_event_code_t_LV_EVENT_FOCUSED: lv_event_code_t = 14;
pub const lv_event_code_t_LV_EVENT_DEFOCUSED: lv_event_code_t = 15;
pub const lv_event_code_t_LV_EVENT_LEAVE: lv_event_code_t = 16;
pub const lv_event_code_t_LV_EVENT_HIT_TEST: lv_event_code_t = 17;
pub const lv_event_code_t_LV_EVENT_COVER_CHECK: lv_event_code_t = 18;
pub const lv_event_code_t_LV_EVENT_REFR_EXT_DRAW_SIZE: lv_event_code_t = 19;
pub const lv_event_code_t_LV_EVENT_DRAW_MAIN_BEGIN: lv_event_code_t = 20;
pub const lv_event_code_t_LV_EVENT_DRAW_MAIN: lv_event_code_t = 21;
pub const lv_event_code_t_LV_EVENT_DRAW_MAIN_END: lv_event_code_t = 22;
pub const lv_event_code_t_LV_EVENT_DRAW_POST_BEGIN: lv_event_code_t = 23;
pub const lv_event_code_t_LV_EVENT_DRAW_POST: lv_event_code_t = 24;
pub const lv_event_code_t_LV_EVENT_DRAW_POST_END: lv_event_code_t = 25;
pub const lv_event_code_t_LV_EVENT_DRAW_PART_BEGIN: lv_event_code_t = 26;
pub const lv_event_code_t_LV_EVENT_DRAW_PART_END: lv_event_code_t = 27;
pub const lv_event_code_t_LV_EVENT_VALUE_CHANGED: lv_event_code_t = 28;
pub const lv_event_code_t_LV_EVENT_INSERT: lv_event_code_t = 29;
pub const lv_event_code_t_LV_EVENT_REFRESH: lv_event_code_t = 30;
pub const lv_event_code_t_LV_EVENT_READY: lv_event_code_t = 31;
pub const lv_event_code_t_LV_EVENT_CANCEL: lv_event_code_t = 32;
pub const lv_event_code_t_LV_EVENT_DELETE: lv_event_code_t = 33;
pub const lv_event_code_t_LV_EVENT_CHILD_CHANGED: lv_event_code_t = 34;
pub const lv_event_code_t_LV_EVENT_SIZE_CHANGED: lv_event_code_t = 35;
pub const lv_event_code_t_LV_EVENT_STYLE_CHANGED: lv_event_code_t = 36;
pub const lv_event_code_t_LV_EVENT_LAYOUT_CHANGED: lv_event_code_t = 37;
pub const lv_event_code_t_LV_EVENT_GET_SELF_SIZE: lv_event_code_t = 38;
pub const lv_event_code_t__LV_EVENT_LAST: lv_event_code_t = 39;
pub type lv_event_code_t = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_event_t {
    pub target: *mut _lv_obj_t,
    pub current_target: *mut _lv_obj_t,
    pub code: lv_event_code_t,
    pub user_data: *mut cty::c_void,
    pub param: *mut cty::c_void,
    pub prev: *mut _lv_event_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
impl _lv_event_t {
    #[inline]
    pub fn deleted(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_deleted(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(deleted: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let deleted: u8 = unsafe { ::core::mem::transmute(deleted) };
            deleted as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type lv_event_t = _lv_event_t;
pub type lv_event_cb_t = ::core::option::Option<unsafe extern "C" fn(e: *mut lv_event_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_hit_test_info_t {
    pub point: *const lv_point_t,
    pub res: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_cover_check_info_t {
    pub res: lv_cover_res_t,
    pub area: *const lv_area_t,
}
extern "C" {
    pub fn lv_event_send(
        obj: *mut _lv_obj_t,
        event_code: lv_event_code_t,
        param: *mut cty::c_void,
    ) -> lv_res_t;
}
extern "C" {
    pub fn lv_obj_event_base(class_p: *const lv_obj_class_t, e: *mut lv_event_t) -> lv_res_t;
}
extern "C" {
    pub fn lv_event_get_target(e: *mut lv_event_t) -> *mut _lv_obj_t;
}
extern "C" {
    pub fn lv_event_get_current_target(e: *mut lv_event_t) -> *mut _lv_obj_t;
}
extern "C" {
    pub fn lv_event_get_code(e: *mut lv_event_t) -> lv_event_code_t;
}
extern "C" {
    pub fn lv_event_get_param(e: *mut lv_event_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn lv_event_get_user_data(e: *mut lv_event_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn lv_event_register_id() -> u32;
}
extern "C" {
    pub fn _lv_event_mark_deleted(obj: *mut _lv_obj_t);
}
extern "C" {
    pub fn lv_obj_add_event_cb(
        obj: *mut _lv_obj_t,
        event_cb: lv_event_cb_t,
        filter: lv_event_code_t,
        user_data: *mut cty::c_void,
    ) -> *mut _lv_event_dsc_t;
}
extern "C" {
    pub fn lv_obj_remove_event_cb(obj: *mut _lv_obj_t, event_cb: lv_event_cb_t) -> bool;
}
extern "C" {
    pub fn lv_obj_remove_event_dsc(obj: *mut _lv_obj_t, event_dsc: *mut _lv_event_dsc_t) -> bool;
}
extern "C" {
    pub fn lv_event_get_indev(e: *mut lv_event_t) -> *mut lv_indev_t;
}
extern "C" {
    pub fn lv_event_get_draw_part_dsc(e: *mut lv_event_t) -> *mut lv_obj_draw_part_dsc_t;
}
extern "C" {
    pub fn lv_event_get_clip_area(e: *mut lv_event_t) -> *const lv_area_t;
}
extern "C" {
    pub fn lv_event_get_old_size(e: *mut lv_event_t) -> *const lv_area_t;
}
extern "C" {
    pub fn lv_event_get_key(e: *mut lv_event_t) -> u32;
}
extern "C" {
    pub fn lv_event_get_scroll_anim(e: *mut lv_event_t) -> *mut lv_anim_t;
}
extern "C" {
    pub fn lv_event_set_ext_draw_size(e: *mut lv_event_t, size: lv_coord_t);
}
extern "C" {
    pub fn lv_event_get_self_size_info(e: *mut lv_event_t) -> *mut lv_point_t;
}
extern "C" {
    pub fn lv_event_get_hit_test_info(e: *mut lv_event_t) -> *mut lv_hit_test_info_t;
}
extern "C" {
    pub fn lv_event_get_cover_area(e: *mut lv_event_t) -> *const lv_area_t;
}
extern "C" {
    pub fn lv_event_set_cover_res(e: *mut lv_event_t, res: lv_cover_res_t);
}
pub const LV_KEY_UP: cty::c_int = 17;
pub const LV_KEY_DOWN: cty::c_int = 18;
pub const LV_KEY_RIGHT: cty::c_int = 19;
pub const LV_KEY_LEFT: cty::c_int = 20;
pub const LV_KEY_ESC: cty::c_int = 27;
pub const LV_KEY_DEL: cty::c_int = 127;
pub const LV_KEY_BACKSPACE: cty::c_int = 8;
pub const LV_KEY_ENTER: cty::c_int = 10;
pub const LV_KEY_NEXT: cty::c_int = 9;
pub const LV_KEY_PREV: cty::c_int = 11;
pub const LV_KEY_HOME: cty::c_int = 2;
pub const LV_KEY_END: cty::c_int = 3;
pub type _bindgen_ty_27 = cty::c_int;
pub type lv_key_t = u8;
pub type lv_group_focus_cb_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut _lv_group_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_group_t {
    pub obj_ll: lv_ll_t,
    pub obj_focus: *mut *mut _lv_obj_t,
    pub focus_cb: lv_group_focus_cb_t,
    pub user_data: *mut cty::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
impl _lv_group_t {
    #[inline]
    pub fn frozen(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_frozen(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn editing(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_editing(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn refocus_policy(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_refocus_policy(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wrap(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wrap(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        frozen: u8,
        editing: u8,
        refocus_policy: u8,
        wrap: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let frozen: u8 = unsafe { ::core::mem::transmute(frozen) };
            frozen as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let editing: u8 = unsafe { ::core::mem::transmute(editing) };
            editing as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let refocus_policy: u8 = unsafe { ::core::mem::transmute(refocus_policy) };
            refocus_policy as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let wrap: u8 = unsafe { ::core::mem::transmute(wrap) };
            wrap as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type lv_group_t = _lv_group_t;
pub const lv_group_refocus_policy_t_LV_GROUP_REFOCUS_POLICY_NEXT: lv_group_refocus_policy_t = 0;
pub const lv_group_refocus_policy_t_LV_GROUP_REFOCUS_POLICY_PREV: lv_group_refocus_policy_t = 1;
pub type lv_group_refocus_policy_t = cty::c_int;
extern "C" {
    pub fn _lv_group_init();
}
extern "C" {
    pub fn lv_group_create() -> *mut lv_group_t;
}
extern "C" {
    pub fn lv_group_del(group: *mut lv_group_t);
}
extern "C" {
    pub fn lv_group_set_default(group: *mut lv_group_t);
}
extern "C" {
    pub fn lv_group_get_default() -> *mut lv_group_t;
}
extern "C" {
    pub fn lv_group_add_obj(group: *mut lv_group_t, obj: *mut _lv_obj_t);
}
extern "C" {
    pub fn lv_group_remove_obj(obj: *mut _lv_obj_t);
}
extern "C" {
    pub fn lv_group_remove_all_objs(group: *mut lv_group_t);
}
extern "C" {
    pub fn lv_group_focus_obj(obj: *mut _lv_obj_t);
}
extern "C" {
    pub fn lv_group_focus_next(group: *mut lv_group_t);
}
extern "C" {
    pub fn lv_group_focus_prev(group: *mut lv_group_t);
}
extern "C" {
    pub fn lv_group_focus_freeze(group: *mut lv_group_t, en: bool);
}
extern "C" {
    pub fn lv_group_send_data(group: *mut lv_group_t, c: u32) -> lv_res_t;
}
extern "C" {
    pub fn lv_group_set_focus_cb(group: *mut lv_group_t, focus_cb: lv_group_focus_cb_t);
}
extern "C" {
    pub fn lv_group_set_refocus_policy(group: *mut lv_group_t, policy: lv_group_refocus_policy_t);
}
extern "C" {
    pub fn lv_group_set_editing(group: *mut lv_group_t, edit: bool);
}
extern "C" {
    pub fn lv_group_set_wrap(group: *mut lv_group_t, en: bool);
}
extern "C" {
    pub fn lv_group_get_focused(group: *const lv_group_t) -> *mut _lv_obj_t;
}
extern "C" {
    pub fn lv_group_get_focus_cb(group: *const lv_group_t) -> lv_group_focus_cb_t;
}
extern "C" {
    pub fn lv_group_get_editing(group: *const lv_group_t) -> bool;
}
extern "C" {
    pub fn lv_group_get_wrap(group: *mut lv_group_t) -> bool;
}
extern "C" {
    pub fn lv_group_get_obj_count(group: *mut lv_group_t) -> u32;
}
extern "C" {
    pub static lv_obj_class: lv_obj_class_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_obj_spec_attr_t {
    pub children: *mut *mut _lv_obj_t,
    pub child_cnt: u32,
    pub group_p: *mut lv_group_t,
    pub event_dsc: *mut _lv_event_dsc_t,
    pub scroll: lv_point_t,
    pub ext_click_pad: lv_coord_t,
    pub ext_draw_size: lv_coord_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub event_dsc_cnt: u8,
}
impl _lv_obj_spec_attr_t {
    #[inline]
    pub fn scrollbar_mode(&self) -> lv_scrollbar_mode_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_scrollbar_mode(&mut self, val: lv_scrollbar_mode_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn scroll_snap_x(&self) -> lv_scroll_snap_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_scroll_snap_x(&mut self, val: lv_scroll_snap_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn scroll_snap_y(&self) -> lv_scroll_snap_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_scroll_snap_y(&mut self, val: lv_scroll_snap_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn scroll_dir(&self) -> lv_dir_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_scroll_dir(&mut self, val: lv_dir_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        scrollbar_mode: lv_scrollbar_mode_t,
        scroll_snap_x: lv_scroll_snap_t,
        scroll_snap_y: lv_scroll_snap_t,
        scroll_dir: lv_dir_t,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let scrollbar_mode: u8 = unsafe { ::core::mem::transmute(scrollbar_mode) };
            scrollbar_mode as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let scroll_snap_x: u8 = unsafe { ::core::mem::transmute(scroll_snap_x) };
            scroll_snap_x as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let scroll_snap_y: u8 = unsafe { ::core::mem::transmute(scroll_snap_y) };
            scroll_snap_y as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let scroll_dir: u8 = unsafe { ::core::mem::transmute(scroll_dir) };
            scroll_dir as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_obj_t {
    pub class_p: *const lv_obj_class_t,
    pub parent: *mut _lv_obj_t,
    pub spec_attr: *mut _lv_obj_spec_attr_t,
    pub styles: *mut _lv_obj_style_t,
    pub user_data: *mut cty::c_void,
    pub coords: lv_area_t,
    pub flags: lv_obj_flag_t,
    pub state: lv_state_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl _lv_obj_t {
    #[inline]
    pub fn layout_inv(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_layout_inv(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scr_layout_inv(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_scr_layout_inv(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn skip_trans(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_skip_trans(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn style_cnt(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_style_cnt(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn h_layout(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_h_layout(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_layout(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_w_layout(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        layout_inv: u16,
        scr_layout_inv: u16,
        skip_trans: u16,
        style_cnt: u16,
        h_layout: u16,
        w_layout: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let layout_inv: u16 = unsafe { ::core::mem::transmute(layout_inv) };
            layout_inv as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let scr_layout_inv: u16 = unsafe { ::core::mem::transmute(scr_layout_inv) };
            scr_layout_inv as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let skip_trans: u16 = unsafe { ::core::mem::transmute(skip_trans) };
            skip_trans as u64
        });
        __bindgen_bitfield_unit.set(3usize, 6u8, {
            let style_cnt: u16 = unsafe { ::core::mem::transmute(style_cnt) };
            style_cnt as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let h_layout: u16 = unsafe { ::core::mem::transmute(h_layout) };
            h_layout as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let w_layout: u16 = unsafe { ::core::mem::transmute(w_layout) };
            w_layout as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type lv_obj_t = _lv_obj_t;
extern "C" {
    pub fn lv_init();
}
extern "C" {
    pub fn lv_deinit();
}
extern "C" {
    pub fn lv_obj_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_obj_add_flag(obj: *mut lv_obj_t, f: lv_obj_flag_t);
}
extern "C" {
    pub fn lv_obj_clear_flag(obj: *mut lv_obj_t, f: lv_obj_flag_t);
}
extern "C" {
    pub fn lv_obj_add_state(obj: *mut lv_obj_t, state: lv_state_t);
}
extern "C" {
    pub fn lv_obj_clear_state(obj: *mut lv_obj_t, state: lv_state_t);
}
extern "C" {
    pub fn lv_obj_has_flag(obj: *const lv_obj_t, f: lv_obj_flag_t) -> bool;
}
extern "C" {
    pub fn lv_obj_has_flag_any(obj: *const lv_obj_t, f: lv_obj_flag_t) -> bool;
}
extern "C" {
    pub fn lv_obj_get_state(obj: *const lv_obj_t) -> lv_state_t;
}
extern "C" {
    pub fn lv_obj_has_state(obj: *const lv_obj_t, state: lv_state_t) -> bool;
}
extern "C" {
    pub fn lv_obj_get_group(obj: *const lv_obj_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn lv_obj_allocate_spec_attr(obj: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_obj_check_type(obj: *const lv_obj_t, class_p: *const lv_obj_class_t) -> bool;
}
extern "C" {
    pub fn lv_obj_has_class(obj: *const lv_obj_t, class_p: *const lv_obj_class_t) -> bool;
}
extern "C" {
    pub fn lv_obj_get_class(obj: *const lv_obj_t) -> *const lv_obj_class_t;
}
extern "C" {
    pub fn lv_obj_is_valid(obj: *const lv_obj_t) -> bool;
}
extern "C" {
    pub fn lv_indev_read_timer_cb(timer: *mut lv_timer_t);
}
extern "C" {
    pub fn lv_indev_enable(indev: *mut lv_indev_t, en: bool);
}
extern "C" {
    pub fn lv_indev_get_act() -> *mut lv_indev_t;
}
extern "C" {
    pub fn lv_indev_get_type(indev: *const lv_indev_t) -> lv_indev_type_t;
}
extern "C" {
    pub fn lv_indev_reset(indev: *mut lv_indev_t, obj: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_indev_reset_long_press(indev: *mut lv_indev_t);
}
extern "C" {
    pub fn lv_indev_set_cursor(indev: *mut lv_indev_t, cur_obj: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_indev_set_group(indev: *mut lv_indev_t, group: *mut lv_group_t);
}
extern "C" {
    pub fn lv_indev_set_button_points(indev: *mut lv_indev_t, points: *const lv_point_t);
}
extern "C" {
    pub fn lv_indev_get_point(indev: *const lv_indev_t, point: *mut lv_point_t);
}
extern "C" {
    pub fn lv_indev_get_gesture_dir(indev: *const lv_indev_t) -> lv_dir_t;
}
extern "C" {
    pub fn lv_indev_get_key(indev: *const lv_indev_t) -> u32;
}
extern "C" {
    pub fn lv_indev_get_scroll_dir(indev: *const lv_indev_t) -> lv_dir_t;
}
extern "C" {
    pub fn lv_indev_get_scroll_obj(indev: *const lv_indev_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_indev_get_vect(indev: *const lv_indev_t, point: *mut lv_point_t);
}
extern "C" {
    pub fn lv_indev_wait_release(indev: *mut lv_indev_t);
}
extern "C" {
    pub fn lv_indev_get_obj_act() -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_indev_get_read_timer(indev: *mut lv_disp_t) -> *mut lv_timer_t;
}
extern "C" {
    pub fn lv_indev_search_obj(obj: *mut lv_obj_t, point: *mut lv_point_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn _lv_refr_init();
}
extern "C" {
    pub fn lv_refr_now(disp: *mut lv_disp_t);
}
extern "C" {
    pub fn _lv_inv_area(disp: *mut lv_disp_t, area_p: *const lv_area_t);
}
extern "C" {
    pub fn _lv_refr_get_disp_refreshing() -> *mut lv_disp_t;
}
extern "C" {
    pub fn _lv_refr_set_disp_refreshing(disp: *mut lv_disp_t);
}
extern "C" {
    pub fn _lv_disp_refr_timer(timer: *mut lv_timer_t);
}
pub type lv_theme_apply_cb_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut _lv_theme_t, arg2: *mut lv_obj_t)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _lv_theme_t {
    pub apply_cb: lv_theme_apply_cb_t,
    pub parent: *mut _lv_theme_t,
    pub user_data: *mut cty::c_void,
    pub disp: *mut _lv_disp_t,
    pub color_primary: lv_color_t,
    pub color_secondary: lv_color_t,
    pub font_small: *const lv_font_t,
    pub font_normal: *const lv_font_t,
    pub font_large: *const lv_font_t,
    pub flags: u32,
}
pub type lv_theme_t = _lv_theme_t;
extern "C" {
    pub fn lv_theme_get_from_obj(obj: *mut lv_obj_t) -> *mut lv_theme_t;
}
extern "C" {
    pub fn lv_theme_apply(obj: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_theme_set_parent(new_theme: *mut lv_theme_t, parent: *mut lv_theme_t);
}
extern "C" {
    pub fn lv_theme_set_apply_cb(theme: *mut lv_theme_t, apply_cb: lv_theme_apply_cb_t);
}
extern "C" {
    pub fn lv_theme_get_font_small(obj: *mut lv_obj_t) -> *const lv_font_t;
}
extern "C" {
    pub fn lv_theme_get_font_normal(obj: *mut lv_obj_t) -> *const lv_font_t;
}
extern "C" {
    pub fn lv_theme_get_font_large(obj: *mut lv_obj_t) -> *const lv_font_t;
}
extern "C" {
    pub fn lv_theme_get_color_primary(obj: *mut lv_obj_t) -> lv_color_t;
}
extern "C" {
    pub fn lv_theme_get_color_secondary(obj: *mut lv_obj_t) -> lv_color_t;
}
pub const lv_scr_load_anim_t_LV_SCR_LOAD_ANIM_NONE: lv_scr_load_anim_t = 0;
pub const lv_scr_load_anim_t_LV_SCR_LOAD_ANIM_OVER_LEFT: lv_scr_load_anim_t = 1;
pub const lv_scr_load_anim_t_LV_SCR_LOAD_ANIM_OVER_RIGHT: lv_scr_load_anim_t = 2;
pub const lv_scr_load_anim_t_LV_SCR_LOAD_ANIM_OVER_TOP: lv_scr_load_anim_t = 3;
pub const lv_scr_load_anim_t_LV_SCR_LOAD_ANIM_OVER_BOTTOM: lv_scr_load_anim_t = 4;
pub const lv_scr_load_anim_t_LV_SCR_LOAD_ANIM_MOVE_LEFT: lv_scr_load_anim_t = 5;
pub const lv_scr_load_anim_t_LV_SCR_LOAD_ANIM_MOVE_RIGHT: lv_scr_load_anim_t = 6;
pub const lv_scr_load_anim_t_LV_SCR_LOAD_ANIM_MOVE_TOP: lv_scr_load_anim_t = 7;
pub const lv_scr_load_anim_t_LV_SCR_LOAD_ANIM_MOVE_BOTTOM: lv_scr_load_anim_t = 8;
pub const lv_scr_load_anim_t_LV_SCR_LOAD_ANIM_FADE_ON: lv_scr_load_anim_t = 9;
pub type lv_scr_load_anim_t = cty::c_int;
extern "C" {
    pub fn lv_disp_get_scr_act(disp: *mut lv_disp_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_disp_get_scr_prev(disp: *mut lv_disp_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_disp_load_scr(scr: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_disp_get_layer_top(disp: *mut lv_disp_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_disp_get_layer_sys(disp: *mut lv_disp_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_disp_set_theme(disp: *mut lv_disp_t, th: *mut lv_theme_t);
}
extern "C" {
    pub fn lv_disp_get_theme(disp: *mut lv_disp_t) -> *mut lv_theme_t;
}
extern "C" {
    pub fn lv_disp_set_bg_color(disp: *mut lv_disp_t, color: lv_color_t);
}
extern "C" {
    pub fn lv_disp_set_bg_image(disp: *mut lv_disp_t, img_src: *const cty::c_void);
}
extern "C" {
    pub fn lv_disp_set_bg_opa(disp: *mut lv_disp_t, opa: lv_opa_t);
}
extern "C" {
    pub fn lv_scr_load_anim(
        scr: *mut lv_obj_t,
        anim_type: lv_scr_load_anim_t,
        time: u32,
        delay: u32,
        auto_del: bool,
    );
}
extern "C" {
    pub fn lv_disp_get_inactive_time(disp: *const lv_disp_t) -> u32;
}
extern "C" {
    pub fn lv_disp_trig_activity(disp: *mut lv_disp_t);
}
extern "C" {
    pub fn lv_disp_clean_dcache(disp: *mut lv_disp_t);
}
extern "C" {
    pub fn _lv_disp_get_refr_timer(disp: *mut lv_disp_t) -> *mut lv_timer_t;
}
extern "C" {
    pub fn lv_font_load(fontName: *const cty::c_char) -> *mut lv_font_t;
}
extern "C" {
    pub fn lv_font_free(font: *mut lv_font_t);
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct lv_font_fmt_txt_glyph_dsc_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub box_w: u8,
    pub box_h: u8,
    pub ofs_x: i8,
    pub ofs_y: i8,
}
impl lv_font_fmt_txt_glyph_dsc_t {
    #[inline]
    pub fn bitmap_index(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_bitmap_index(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn adv_w(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_adv_w(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(bitmap_index: u32, adv_w: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 20u8, {
            let bitmap_index: u32 = unsafe { ::core::mem::transmute(bitmap_index) };
            bitmap_index as u64
        });
        __bindgen_bitfield_unit.set(20usize, 12u8, {
            let adv_w: u32 = unsafe { ::core::mem::transmute(adv_w) };
            adv_w as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL: cty::c_int = 0;
pub const LV_FONT_FMT_TXT_CMAP_SPARSE_FULL: cty::c_int = 1;
pub const LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY: cty::c_int = 2;
pub const LV_FONT_FMT_TXT_CMAP_SPARSE_TINY: cty::c_int = 3;
pub type _bindgen_ty_28 = cty::c_int;
pub type lv_font_fmt_txt_cmap_type_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_font_fmt_txt_cmap_t {
    pub range_start: u32,
    pub range_length: u16,
    pub glyph_id_start: u16,
    pub unicode_list: *const u16,
    pub glyph_id_ofs_list: *const cty::c_void,
    pub list_length: u16,
    pub type_: lv_font_fmt_txt_cmap_type_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_font_fmt_txt_kern_pair_t {
    pub glyph_ids: *const cty::c_void,
    pub values: *const i8,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
impl lv_font_fmt_txt_kern_pair_t {
    #[inline]
    pub fn pair_cnt(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_pair_cnt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn glyph_ids_size(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_glyph_ids_size(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pair_cnt: u32,
        glyph_ids_size: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 30u8, {
            let pair_cnt: u32 = unsafe { ::core::mem::transmute(pair_cnt) };
            pair_cnt as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let glyph_ids_size: u32 = unsafe { ::core::mem::transmute(glyph_ids_size) };
            glyph_ids_size as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_font_fmt_txt_kern_classes_t {
    pub class_pair_values: *const i8,
    pub left_class_mapping: *const u8,
    pub right_class_mapping: *const u8,
    pub left_class_cnt: u8,
    pub right_class_cnt: u8,
}
pub const lv_font_fmt_txt_bitmap_format_t_LV_FONT_FMT_TXT_PLAIN: lv_font_fmt_txt_bitmap_format_t =
    0;
pub const lv_font_fmt_txt_bitmap_format_t_LV_FONT_FMT_TXT_COMPRESSED:
    lv_font_fmt_txt_bitmap_format_t = 1;
pub const lv_font_fmt_txt_bitmap_format_t_LV_FONT_FMT_TXT_COMPRESSED_NO_PREFILTER:
    lv_font_fmt_txt_bitmap_format_t = 1;
pub type lv_font_fmt_txt_bitmap_format_t = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_font_fmt_txt_glyph_cache_t {
    pub last_letter: u32,
    pub last_glyph_id: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_font_fmt_txt_dsc_t {
    pub glyph_bitmap: *const u8,
    pub glyph_dsc: *const lv_font_fmt_txt_glyph_dsc_t,
    pub cmaps: *const lv_font_fmt_txt_cmap_t,
    pub kern_dsc: *const cty::c_void,
    pub kern_scale: u16,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub cache: *mut lv_font_fmt_txt_glyph_cache_t,
}
impl lv_font_fmt_txt_dsc_t {
    #[inline]
    pub fn cmap_num(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_cmap_num(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn bpp(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_bpp(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn kern_classes(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_kern_classes(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitmap_format(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_bitmap_format(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cmap_num: u16,
        bpp: u16,
        kern_classes: u16,
        bitmap_format: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let cmap_num: u16 = unsafe { ::core::mem::transmute(cmap_num) };
            cmap_num as u64
        });
        __bindgen_bitfield_unit.set(9usize, 4u8, {
            let bpp: u16 = unsafe { ::core::mem::transmute(bpp) };
            bpp as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let kern_classes: u16 = unsafe { ::core::mem::transmute(kern_classes) };
            kern_classes as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let bitmap_format: u16 = unsafe { ::core::mem::transmute(bitmap_format) };
            bitmap_format as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn lv_font_get_bitmap_fmt_txt(font: *const lv_font_t, letter: u32) -> *const u8;
}
extern "C" {
    pub fn lv_font_get_glyph_dsc_fmt_txt(
        font: *const lv_font_t,
        dsc_out: *mut lv_font_glyph_dsc_t,
        unicode_letter: u32,
        unicode_letter_next: u32,
    ) -> bool;
}
extern "C" {
    pub fn _lv_font_clean_up_fmt_txt();
}
pub const LV_ARC_MODE_NORMAL: cty::c_int = 0;
pub const LV_ARC_MODE_SYMMETRICAL: cty::c_int = 1;
pub const LV_ARC_MODE_REVERSE: cty::c_int = 2;
pub type _bindgen_ty_29 = cty::c_int;
pub type lv_arc_mode_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_arc_t {
    pub obj: lv_obj_t,
    pub rotation: u16,
    pub indic_angle_start: u16,
    pub indic_angle_end: u16,
    pub bg_angle_start: u16,
    pub bg_angle_end: u16,
    pub value: i16,
    pub min_value: i16,
    pub max_value: i16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub chg_rate: u16,
    pub last_tick: u32,
    pub last_angle: i16,
}
impl lv_arc_t {
    #[inline]
    pub fn dragging(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_dragging(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn min_close(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_min_close(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dragging: u16,
        type_: u16,
        min_close: u16,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dragging: u16 = unsafe { ::core::mem::transmute(dragging) };
            dragging as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let type_: u16 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let min_close: u16 = unsafe { ::core::mem::transmute(min_close) };
            min_close as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static lv_arc_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_arc_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_arc_set_start_angle(arc: *mut lv_obj_t, start: u16);
}
extern "C" {
    pub fn lv_arc_set_end_angle(arc: *mut lv_obj_t, end: u16);
}
extern "C" {
    pub fn lv_arc_set_angles(arc: *mut lv_obj_t, start: u16, end: u16);
}
extern "C" {
    pub fn lv_arc_set_bg_start_angle(arc: *mut lv_obj_t, start: u16);
}
extern "C" {
    pub fn lv_arc_set_bg_end_angle(arc: *mut lv_obj_t, end: u16);
}
extern "C" {
    pub fn lv_arc_set_bg_angles(arc: *mut lv_obj_t, start: u16, end: u16);
}
extern "C" {
    pub fn lv_arc_set_rotation(arc: *mut lv_obj_t, rotation: u16);
}
extern "C" {
    pub fn lv_arc_set_mode(arc: *mut lv_obj_t, type_: lv_arc_mode_t);
}
extern "C" {
    pub fn lv_arc_set_value(arc: *mut lv_obj_t, value: i16);
}
extern "C" {
    pub fn lv_arc_set_range(arc: *mut lv_obj_t, min: i16, max: i16);
}
extern "C" {
    pub fn lv_arc_set_change_rate(arc: *mut lv_obj_t, rate: u16);
}
extern "C" {
    pub fn lv_arc_get_angle_start(obj: *mut lv_obj_t) -> u16;
}
extern "C" {
    pub fn lv_arc_get_angle_end(obj: *mut lv_obj_t) -> u16;
}
extern "C" {
    pub fn lv_arc_get_bg_angle_start(obj: *mut lv_obj_t) -> u16;
}
extern "C" {
    pub fn lv_arc_get_bg_angle_end(obj: *mut lv_obj_t) -> u16;
}
extern "C" {
    pub fn lv_arc_get_value(obj: *const lv_obj_t) -> i16;
}
extern "C" {
    pub fn lv_arc_get_min_value(obj: *const lv_obj_t) -> i16;
}
extern "C" {
    pub fn lv_arc_get_max_value(obj: *const lv_obj_t) -> i16;
}
extern "C" {
    pub fn lv_arc_get_mode(obj: *const lv_obj_t) -> lv_arc_mode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_btn_t {
    pub obj: lv_obj_t,
}
extern "C" {
    pub static lv_btn_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_btn_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_img_t {
    pub obj: lv_obj_t,
    pub src: *const cty::c_void,
    pub offset: lv_point_t,
    pub w: lv_coord_t,
    pub h: lv_coord_t,
    pub angle: u16,
    pub pivot: lv_point_t,
    pub zoom: u16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
impl lv_img_t {
    #[inline]
    pub fn src_type(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_src_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn cf(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_cf(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn antialias(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_antialias(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        src_type: u8,
        cf: u8,
        antialias: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let src_type: u8 = unsafe { ::core::mem::transmute(src_type) };
            src_type as u64
        });
        __bindgen_bitfield_unit.set(2usize, 5u8, {
            let cf: u8 = unsafe { ::core::mem::transmute(cf) };
            cf as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let antialias: u8 = unsafe { ::core::mem::transmute(antialias) };
            antialias as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static lv_img_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_img_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_img_set_src(obj: *mut lv_obj_t, src: *const cty::c_void);
}
extern "C" {
    pub fn lv_img_set_offset_x(obj: *mut lv_obj_t, x: lv_coord_t);
}
extern "C" {
    pub fn lv_img_set_offset_y(obj: *mut lv_obj_t, y: lv_coord_t);
}
extern "C" {
    pub fn lv_img_set_angle(obj: *mut lv_obj_t, angle: i16);
}
extern "C" {
    pub fn lv_img_set_pivot(obj: *mut lv_obj_t, x: lv_coord_t, y: lv_coord_t);
}
extern "C" {
    pub fn lv_img_set_zoom(obj: *mut lv_obj_t, zoom: u16);
}
extern "C" {
    pub fn lv_img_set_antialias(obj: *mut lv_obj_t, antialias: bool);
}
extern "C" {
    pub fn lv_img_get_src(obj: *mut lv_obj_t) -> *const cty::c_void;
}
extern "C" {
    pub fn lv_img_get_offset_x(obj: *mut lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_img_get_offset_y(obj: *mut lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_img_get_angle(obj: *mut lv_obj_t) -> u16;
}
extern "C" {
    pub fn lv_img_get_pivot(obj: *mut lv_obj_t, pivot: *mut lv_point_t);
}
extern "C" {
    pub fn lv_img_get_zoom(obj: *mut lv_obj_t) -> u16;
}
extern "C" {
    pub fn lv_img_get_antialias(obj: *mut lv_obj_t) -> bool;
}
pub const LV_LABEL_LONG_WRAP: cty::c_int = 0;
pub const LV_LABEL_LONG_DOT: cty::c_int = 1;
pub const LV_LABEL_LONG_SCROLL: cty::c_int = 2;
pub const LV_LABEL_LONG_SCROLL_CIRCULAR: cty::c_int = 3;
pub const LV_LABEL_LONG_CLIP: cty::c_int = 4;
pub type _bindgen_ty_30 = cty::c_int;
pub type lv_label_long_mode_t = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_label_t {
    pub obj: lv_obj_t,
    pub text: *mut cty::c_char,
    pub dot: lv_label_t__bindgen_ty_1,
    pub dot_end: u32,
    pub hint: lv_draw_label_hint_t,
    pub sel_start: u32,
    pub sel_end: u32,
    pub offset: lv_point_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lv_label_t__bindgen_ty_1 {
    pub tmp_ptr: *mut cty::c_char,
    pub tmp: [cty::c_char; 4usize],
}
impl lv_label_t {
    #[inline]
    pub fn long_mode(&self) -> lv_label_long_mode_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_long_mode(&mut self, val: lv_label_long_mode_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn static_txt(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_static_txt(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn recolor(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_recolor(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn expand(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_expand(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dot_tmp_alloc(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dot_tmp_alloc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        long_mode: lv_label_long_mode_t,
        static_txt: u8,
        recolor: u8,
        expand: u8,
        dot_tmp_alloc: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let long_mode: u8 = unsafe { ::core::mem::transmute(long_mode) };
            long_mode as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let static_txt: u8 = unsafe { ::core::mem::transmute(static_txt) };
            static_txt as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let recolor: u8 = unsafe { ::core::mem::transmute(recolor) };
            recolor as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let expand: u8 = unsafe { ::core::mem::transmute(expand) };
            expand as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let dot_tmp_alloc: u8 = unsafe { ::core::mem::transmute(dot_tmp_alloc) };
            dot_tmp_alloc as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static lv_label_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_label_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_label_set_text(obj: *mut lv_obj_t, text: *const cty::c_char);
}
extern "C" {
    pub fn lv_label_set_text_fmt(obj: *mut lv_obj_t, fmt: *const cty::c_char, ...);
}
extern "C" {
    pub fn lv_label_set_text_static(obj: *mut lv_obj_t, text: *const cty::c_char);
}
extern "C" {
    pub fn lv_label_set_long_mode(obj: *mut lv_obj_t, long_mode: lv_label_long_mode_t);
}
extern "C" {
    pub fn lv_label_set_recolor(obj: *mut lv_obj_t, en: bool);
}
extern "C" {
    pub fn lv_label_set_text_sel_start(obj: *mut lv_obj_t, index: u32);
}
extern "C" {
    pub fn lv_label_set_text_sel_end(obj: *mut lv_obj_t, index: u32);
}
extern "C" {
    pub fn lv_label_get_text(obj: *const lv_obj_t) -> *mut cty::c_char;
}
extern "C" {
    pub fn lv_label_get_long_mode(obj: *const lv_obj_t) -> lv_label_long_mode_t;
}
extern "C" {
    pub fn lv_label_get_recolor(obj: *const lv_obj_t) -> bool;
}
extern "C" {
    pub fn lv_label_get_letter_pos(obj: *const lv_obj_t, char_id: u32, pos: *mut lv_point_t);
}
extern "C" {
    pub fn lv_label_get_letter_on(obj: *const lv_obj_t, pos_in: *mut lv_point_t) -> u32;
}
extern "C" {
    pub fn lv_label_is_char_under_pos(obj: *const lv_obj_t, pos: *mut lv_point_t) -> bool;
}
extern "C" {
    pub fn lv_label_get_text_selection_start(obj: *const lv_obj_t) -> u32;
}
extern "C" {
    pub fn lv_label_get_text_selection_end(obj: *const lv_obj_t) -> u32;
}
extern "C" {
    pub fn lv_label_ins_text(obj: *mut lv_obj_t, pos: u32, txt: *const cty::c_char);
}
extern "C" {
    pub fn lv_label_cut_text(obj: *mut lv_obj_t, pos: u32, cnt: u32);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_line_t {
    pub obj: lv_obj_t,
    pub point_array: *const lv_point_t,
    pub point_num: u16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 5usize],
}
impl lv_line_t {
    #[inline]
    pub fn y_inv(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_y_inv(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(y_inv: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let y_inv: u8 = unsafe { ::core::mem::transmute(y_inv) };
            y_inv as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static lv_line_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_line_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_line_set_points(obj: *mut lv_obj_t, points: *const lv_point_t, point_num: u16);
}
extern "C" {
    pub fn lv_line_set_y_invert(obj: *mut lv_obj_t, en: bool);
}
extern "C" {
    pub fn lv_line_get_y_invert(obj: *const lv_obj_t) -> bool;
}
pub const LV_TABLE_CELL_CTRL_MERGE_RIGHT: cty::c_int = 1;
pub const LV_TABLE_CELL_CTRL_TEXT_CROP: cty::c_int = 2;
pub const LV_TABLE_CELL_CTRL_CUSTOM_1: cty::c_int = 16;
pub const LV_TABLE_CELL_CTRL_CUSTOM_2: cty::c_int = 32;
pub const LV_TABLE_CELL_CTRL_CUSTOM_3: cty::c_int = 64;
pub const LV_TABLE_CELL_CTRL_CUSTOM_4: cty::c_int = 128;
pub type _bindgen_ty_31 = cty::c_int;
pub type lv_table_cell_ctrl_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_table_t {
    pub obj: lv_obj_t,
    pub col_cnt: u16,
    pub row_cnt: u16,
    pub cell_data: *mut *mut cty::c_char,
    pub row_h: *mut lv_coord_t,
    pub col_w: *mut lv_coord_t,
    pub col_act: u16,
    pub row_act: u16,
}
extern "C" {
    pub static lv_table_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_table_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_table_set_cell_value(obj: *mut lv_obj_t, row: u16, col: u16, txt: *const cty::c_char);
}
extern "C" {
    pub fn lv_table_set_cell_value_fmt(
        obj: *mut lv_obj_t,
        row: u16,
        col: u16,
        fmt: *const cty::c_char,
        ...
    );
}
extern "C" {
    pub fn lv_table_set_row_cnt(obj: *mut lv_obj_t, row_cnt: u16);
}
extern "C" {
    pub fn lv_table_set_col_cnt(obj: *mut lv_obj_t, col_cnt: u16);
}
extern "C" {
    pub fn lv_table_set_col_width(obj: *mut lv_obj_t, col_id: u16, w: lv_coord_t);
}
extern "C" {
    pub fn lv_table_add_cell_ctrl(
        obj: *mut lv_obj_t,
        row: u16,
        col: u16,
        ctrl: lv_table_cell_ctrl_t,
    );
}
extern "C" {
    pub fn lv_table_clear_cell_ctrl(
        obj: *mut lv_obj_t,
        row: u16,
        col: u16,
        ctrl: lv_table_cell_ctrl_t,
    );
}
extern "C" {
    pub fn lv_table_get_cell_value(obj: *mut lv_obj_t, row: u16, col: u16) -> *const cty::c_char;
}
extern "C" {
    pub fn lv_table_get_row_cnt(obj: *mut lv_obj_t) -> u16;
}
extern "C" {
    pub fn lv_table_get_col_cnt(obj: *mut lv_obj_t) -> u16;
}
extern "C" {
    pub fn lv_table_get_col_width(obj: *mut lv_obj_t, col: u16) -> lv_coord_t;
}
extern "C" {
    pub fn lv_table_has_cell_ctrl(
        obj: *mut lv_obj_t,
        row: u16,
        col: u16,
        ctrl: lv_table_cell_ctrl_t,
    ) -> bool;
}
extern "C" {
    pub fn lv_table_get_selected_cell(obj: *mut lv_obj_t, row: *mut u16, col: *mut u16);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_checkbox_t {
    pub obj: lv_obj_t,
    pub txt: *mut cty::c_char,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
impl lv_checkbox_t {
    #[inline]
    pub fn static_txt(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_static_txt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(static_txt: u32) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let static_txt: u32 = unsafe { ::core::mem::transmute(static_txt) };
            static_txt as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static lv_checkbox_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_checkbox_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_checkbox_set_text(obj: *mut lv_obj_t, txt: *const cty::c_char);
}
extern "C" {
    pub fn lv_checkbox_set_text_static(obj: *mut lv_obj_t, txt: *const cty::c_char);
}
extern "C" {
    pub fn lv_checkbox_get_text(obj: *const lv_obj_t) -> *const cty::c_char;
}
pub const LV_BAR_MODE_NORMAL: cty::c_int = 0;
pub const LV_BAR_MODE_SYMMETRICAL: cty::c_int = 1;
pub const LV_BAR_MODE_RANGE: cty::c_int = 2;
pub type _bindgen_ty_32 = cty::c_int;
pub type lv_bar_mode_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lv_bar_anim_t {
    pub bar: *mut lv_obj_t,
    pub anim_start: i32,
    pub anim_end: i32,
    pub anim_state: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_bar_t {
    pub obj: lv_obj_t,
    pub cur_value: i32,
    pub min_value: i32,
    pub max_value: i32,
    pub start_value: i32,
    pub indic_area: lv_area_t,
    pub cur_value_anim: _lv_bar_anim_t,
    pub start_value_anim: _lv_bar_anim_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
impl lv_bar_t {
    #[inline]
    pub fn mode(&self) -> lv_bar_mode_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_mode(&mut self, val: lv_bar_mode_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(mode: lv_bar_mode_t) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let mode: u8 = unsafe { ::core::mem::transmute(mode) };
            mode as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static lv_bar_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_bar_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_bar_set_value(obj: *mut lv_obj_t, value: i32, anim: lv_anim_enable_t);
}
extern "C" {
    pub fn lv_bar_set_start_value(obj: *mut lv_obj_t, start_value: i32, anim: lv_anim_enable_t);
}
extern "C" {
    pub fn lv_bar_set_range(obj: *mut lv_obj_t, min: i32, max: i32);
}
extern "C" {
    pub fn lv_bar_set_mode(obj: *mut lv_obj_t, mode: lv_bar_mode_t);
}
extern "C" {
    pub fn lv_bar_get_value(obj: *const lv_obj_t) -> i32;
}
extern "C" {
    pub fn lv_bar_get_start_value(obj: *const lv_obj_t) -> i32;
}
extern "C" {
    pub fn lv_bar_get_min_value(obj: *const lv_obj_t) -> i32;
}
extern "C" {
    pub fn lv_bar_get_max_value(obj: *const lv_obj_t) -> i32;
}
extern "C" {
    pub fn lv_bar_get_mode(obj: *mut lv_obj_t) -> lv_bar_mode_t;
}
pub const LV_SLIDER_MODE_NORMAL: cty::c_int = 0;
pub const LV_SLIDER_MODE_SYMMETRICAL: cty::c_int = 1;
pub const LV_SLIDER_MODE_RANGE: cty::c_int = 2;
pub type _bindgen_ty_33 = cty::c_int;
pub type lv_slider_mode_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_slider_t {
    pub bar: lv_bar_t,
    pub left_knob_area: lv_area_t,
    pub right_knob_area: lv_area_t,
    pub value_to_set: *mut i32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
impl lv_slider_t {
    #[inline]
    pub fn dragging(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dragging(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn left_knob_focus(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_left_knob_focus(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dragging: u8,
        left_knob_focus: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dragging: u8 = unsafe { ::core::mem::transmute(dragging) };
            dragging as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let left_knob_focus: u8 = unsafe { ::core::mem::transmute(left_knob_focus) };
            left_knob_focus as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static lv_slider_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_slider_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_slider_is_dragged(obj: *const lv_obj_t) -> bool;
}
pub const _LV_BTNMATRIX_WIDTH: cty::c_int = 7;
pub const LV_BTNMATRIX_CTRL_HIDDEN: cty::c_int = 8;
pub const LV_BTNMATRIX_CTRL_NO_REPEAT: cty::c_int = 16;
pub const LV_BTNMATRIX_CTRL_DISABLED: cty::c_int = 32;
pub const LV_BTNMATRIX_CTRL_CHECKABLE: cty::c_int = 64;
pub const LV_BTNMATRIX_CTRL_CHECKED: cty::c_int = 128;
pub const LV_BTNMATRIX_CTRL_CLICK_TRIG: cty::c_int = 256;
pub const LV_BTNMATRIX_CTRL_RECOLOR: cty::c_int = 4096;
pub const _LV_BTNMATRIX_CTRL_RESERVED: cty::c_int = 8192;
pub const LV_BTNMATRIX_CTRL_CUSTOM_1: cty::c_int = 16384;
pub const LV_BTNMATRIX_CTRL_CUSTOM_2: cty::c_int = 32768;
pub type _bindgen_ty_34 = cty::c_int;
pub type lv_btnmatrix_ctrl_t = u16;
pub type lv_btnmatrix_btn_draw_cb_t = ::core::option::Option<
    unsafe extern "C" fn(
        btnm: *mut lv_obj_t,
        btn_id: u32,
        draw_area: *const lv_area_t,
        clip_area: *const lv_area_t,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_btnmatrix_t {
    pub obj: lv_obj_t,
    pub map_p: *mut *const cty::c_char,
    pub button_areas: *mut lv_area_t,
    pub ctrl_bits: *mut lv_btnmatrix_ctrl_t,
    pub btn_cnt: u16,
    pub btn_id_sel: u16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl lv_btnmatrix_t {
    #[inline]
    pub fn one_check(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_one_check(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(one_check: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let one_check: u8 = unsafe { ::core::mem::transmute(one_check) };
            one_check as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static lv_btnmatrix_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_btnmatrix_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_btnmatrix_set_map(obj: *mut lv_obj_t, map: *mut *const cty::c_char);
}
extern "C" {
    pub fn lv_btnmatrix_set_ctrl_map(obj: *mut lv_obj_t, ctrl_map: *const lv_btnmatrix_ctrl_t);
}
extern "C" {
    pub fn lv_btnmatrix_set_selected_btn(obj: *mut lv_obj_t, btn_id: u16);
}
extern "C" {
    pub fn lv_btnmatrix_set_btn_ctrl(obj: *mut lv_obj_t, btn_id: u16, ctrl: lv_btnmatrix_ctrl_t);
}
extern "C" {
    pub fn lv_btnmatrix_clear_btn_ctrl(
        obj: *const lv_obj_t,
        btn_id: u16,
        ctrl: lv_btnmatrix_ctrl_t,
    );
}
extern "C" {
    pub fn lv_btnmatrix_set_btn_ctrl_all(obj: *mut lv_obj_t, ctrl: lv_btnmatrix_ctrl_t);
}
extern "C" {
    pub fn lv_btnmatrix_clear_btn_ctrl_all(obj: *mut lv_obj_t, ctrl: lv_btnmatrix_ctrl_t);
}
extern "C" {
    pub fn lv_btnmatrix_set_btn_width(obj: *mut lv_obj_t, btn_id: u16, width: u8);
}
extern "C" {
    pub fn lv_btnmatrix_set_one_checked(obj: *mut lv_obj_t, en: bool);
}
extern "C" {
    pub fn lv_btnmatrix_get_map(obj: *const lv_obj_t) -> *mut *const cty::c_char;
}
extern "C" {
    pub fn lv_btnmatrix_get_selected_btn(obj: *const lv_obj_t) -> u16;
}
extern "C" {
    pub fn lv_btnmatrix_get_btn_text(obj: *const lv_obj_t, btn_id: u16) -> *const cty::c_char;
}
extern "C" {
    pub fn lv_btnmatrix_has_btn_ctrl(
        obj: *mut lv_obj_t,
        btn_id: u16,
        ctrl: lv_btnmatrix_ctrl_t,
    ) -> bool;
}
extern "C" {
    pub fn lv_btnmatrix_get_one_checked(obj: *const lv_obj_t) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_dropdown_t {
    pub obj: lv_obj_t,
    pub list: *mut lv_obj_t,
    pub text: *const cty::c_char,
    pub symbol: *const cty::c_void,
    pub options: *mut cty::c_char,
    pub option_cnt: u16,
    pub sel_opt_id: u16,
    pub sel_opt_id_orig: u16,
    pub pr_opt_id: u16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
impl lv_dropdown_t {
    #[inline]
    pub fn dir(&self) -> lv_dir_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_dir(&mut self, val: lv_dir_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn static_txt(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_static_txt(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn selected_highlight(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_selected_highlight(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dir: lv_dir_t,
        static_txt: u8,
        selected_highlight: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let dir: u8 = unsafe { ::core::mem::transmute(dir) };
            dir as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let static_txt: u8 = unsafe { ::core::mem::transmute(static_txt) };
            static_txt as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let selected_highlight: u8 = unsafe { ::core::mem::transmute(selected_highlight) };
            selected_highlight as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_dropdown_list_t {
    pub obj: lv_obj_t,
    pub dropdown: *mut lv_obj_t,
}
extern "C" {
    pub static lv_dropdown_class: lv_obj_class_t;
}
extern "C" {
    pub static lv_dropdownlist_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_dropdown_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_dropdown_set_text(obj: *mut lv_obj_t, txt: *const cty::c_char);
}
extern "C" {
    pub fn lv_dropdown_set_options(obj: *mut lv_obj_t, options: *const cty::c_char);
}
extern "C" {
    pub fn lv_dropdown_set_options_static(obj: *mut lv_obj_t, options: *const cty::c_char);
}
extern "C" {
    pub fn lv_dropdown_add_option(obj: *mut lv_obj_t, option: *const cty::c_char, pos: u32);
}
extern "C" {
    pub fn lv_dropdown_clear_options(obj: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_dropdown_set_selected(obj: *mut lv_obj_t, sel_opt: u16);
}
extern "C" {
    pub fn lv_dropdown_set_dir(obj: *mut lv_obj_t, dir: lv_dir_t);
}
extern "C" {
    pub fn lv_dropdown_set_symbol(obj: *mut lv_obj_t, symbol: *const cty::c_void);
}
extern "C" {
    pub fn lv_dropdown_set_selected_highlight(obj: *mut lv_obj_t, en: bool);
}
extern "C" {
    pub fn lv_dropdown_get_list(obj: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_dropdown_get_text(obj: *mut lv_obj_t) -> *const cty::c_char;
}
extern "C" {
    pub fn lv_dropdown_get_options(obj: *const lv_obj_t) -> *const cty::c_char;
}
extern "C" {
    pub fn lv_dropdown_get_selected(obj: *const lv_obj_t) -> u16;
}
extern "C" {
    pub fn lv_dropdown_get_option_cnt(obj: *const lv_obj_t) -> u16;
}
extern "C" {
    pub fn lv_dropdown_get_selected_str(obj: *const lv_obj_t, buf: *mut cty::c_char, buf_size: u32);
}
extern "C" {
    pub fn lv_dropdown_get_symbol(obj: *mut lv_obj_t) -> *const cty::c_char;
}
extern "C" {
    pub fn lv_dropdown_get_selected_highlight(obj: *mut lv_obj_t) -> bool;
}
extern "C" {
    pub fn lv_dropdown_get_dir(obj: *const lv_obj_t) -> lv_dir_t;
}
extern "C" {
    pub fn lv_dropdown_open(dropdown_obj: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_dropdown_close(obj: *mut lv_obj_t);
}
pub const LV_ROLLER_MODE_NORMAL: cty::c_int = 0;
pub const LV_ROLLER_MODE_INFINITE: cty::c_int = 1;
pub type _bindgen_ty_35 = cty::c_int;
pub type lv_roller_mode_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_roller_t {
    pub obj: lv_obj_t,
    pub option_cnt: u16,
    pub sel_opt_id: u16,
    pub sel_opt_id_ori: u16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 9usize],
}
impl lv_roller_t {
    #[inline]
    pub fn mode(&self) -> lv_roller_mode_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mode(&mut self, val: lv_roller_mode_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn moved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_moved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mode: lv_roller_mode_t,
        moved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let mode: u8 = unsafe { ::core::mem::transmute(mode) };
            mode as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let moved: u32 = unsafe { ::core::mem::transmute(moved) };
            moved as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static lv_roller_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_roller_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_roller_set_options(
        obj: *mut lv_obj_t,
        options: *const cty::c_char,
        mode: lv_roller_mode_t,
    );
}
extern "C" {
    pub fn lv_roller_set_selected(obj: *mut lv_obj_t, sel_opt: u16, anim: lv_anim_enable_t);
}
extern "C" {
    pub fn lv_roller_set_visible_row_count(obj: *mut lv_obj_t, row_cnt: u8);
}
extern "C" {
    pub fn lv_roller_get_selected(obj: *const lv_obj_t) -> u16;
}
extern "C" {
    pub fn lv_roller_get_selected_str(obj: *const lv_obj_t, buf: *mut cty::c_char, buf_size: u32);
}
extern "C" {
    pub fn lv_roller_get_options(obj: *const lv_obj_t) -> *const cty::c_char;
}
extern "C" {
    pub fn lv_roller_get_option_cnt(obj: *const lv_obj_t) -> u16;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_textarea_t {
    pub obj: lv_obj_t,
    pub label: *mut lv_obj_t,
    pub placeholder_txt: *mut cty::c_char,
    pub pwd_tmp: *mut cty::c_char,
    pub accepted_chars: *const cty::c_char,
    pub max_length: u32,
    pub pwd_show_time: u16,
    pub cursor: lv_textarea_t__bindgen_ty_1,
    pub sel_start: u32,
    pub sel_end: u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_textarea_t__bindgen_ty_1 {
    pub valid_x: lv_coord_t,
    pub pos: u32,
    pub area: lv_area_t,
    pub txt_byte_pos: u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl lv_textarea_t__bindgen_ty_1 {
    #[inline]
    pub fn show(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_show(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn click_pos(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_click_pos(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(show: u8, click_pos: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let show: u8 = unsafe { ::core::mem::transmute(show) };
            show as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let click_pos: u8 = unsafe { ::core::mem::transmute(click_pos) };
            click_pos as u64
        });
        __bindgen_bitfield_unit
    }
}
impl lv_textarea_t {
    #[inline]
    pub fn text_sel_in_prog(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_text_sel_in_prog(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn text_sel_en(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_text_sel_en(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pwd_mode(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pwd_mode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn one_line(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_one_line(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        text_sel_in_prog: u8,
        text_sel_en: u8,
        pwd_mode: u8,
        one_line: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let text_sel_in_prog: u8 = unsafe { ::core::mem::transmute(text_sel_in_prog) };
            text_sel_in_prog as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let text_sel_en: u8 = unsafe { ::core::mem::transmute(text_sel_en) };
            text_sel_en as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let pwd_mode: u8 = unsafe { ::core::mem::transmute(pwd_mode) };
            pwd_mode as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let one_line: u8 = unsafe { ::core::mem::transmute(one_line) };
            one_line as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static lv_textarea_class: lv_obj_class_t;
}
pub const LV_PART_TEXTAREA_PLACEHOLDER: cty::c_int = 524288;
pub type _bindgen_ty_36 = cty::c_int;
extern "C" {
    pub fn lv_textarea_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_textarea_add_char(obj: *mut lv_obj_t, c: u32);
}
extern "C" {
    pub fn lv_textarea_add_text(obj: *mut lv_obj_t, txt: *const cty::c_char);
}
extern "C" {
    pub fn lv_textarea_del_char(obj: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_textarea_del_char_forward(obj: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_textarea_set_text(obj: *mut lv_obj_t, txt: *const cty::c_char);
}
extern "C" {
    pub fn lv_textarea_set_placeholder_text(obj: *mut lv_obj_t, txt: *const cty::c_char);
}
extern "C" {
    pub fn lv_textarea_set_cursor_pos(obj: *mut lv_obj_t, pos: i32);
}
extern "C" {
    pub fn lv_textarea_set_cursor_click_pos(obj: *mut lv_obj_t, en: bool);
}
extern "C" {
    pub fn lv_textarea_set_password_mode(obj: *mut lv_obj_t, en: bool);
}
extern "C" {
    pub fn lv_textarea_set_one_line(obj: *mut lv_obj_t, en: bool);
}
extern "C" {
    pub fn lv_textarea_set_accepted_chars(obj: *mut lv_obj_t, list: *const cty::c_char);
}
extern "C" {
    pub fn lv_textarea_set_max_length(obj: *mut lv_obj_t, num: u32);
}
extern "C" {
    pub fn lv_textarea_set_insert_replace(obj: *mut lv_obj_t, txt: *const cty::c_char);
}
extern "C" {
    pub fn lv_textarea_set_text_selection(obj: *mut lv_obj_t, en: bool);
}
extern "C" {
    pub fn lv_textarea_set_password_show_time(obj: *mut lv_obj_t, time: u16);
}
extern "C" {
    pub fn lv_textarea_set_align(obj: *mut lv_obj_t, align: lv_text_align_t);
}
extern "C" {
    pub fn lv_textarea_get_text(obj: *const lv_obj_t) -> *const cty::c_char;
}
extern "C" {
    pub fn lv_textarea_get_placeholder_text(obj: *mut lv_obj_t) -> *const cty::c_char;
}
extern "C" {
    pub fn lv_textarea_get_label(obj: *const lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_textarea_get_cursor_pos(obj: *const lv_obj_t) -> u32;
}
extern "C" {
    pub fn lv_textarea_get_cursor_click_pos(obj: *mut lv_obj_t) -> bool;
}
extern "C" {
    pub fn lv_textarea_get_password_mode(obj: *const lv_obj_t) -> bool;
}
extern "C" {
    pub fn lv_textarea_get_one_line(obj: *const lv_obj_t) -> bool;
}
extern "C" {
    pub fn lv_textarea_get_accepted_chars(obj: *mut lv_obj_t) -> *const cty::c_char;
}
extern "C" {
    pub fn lv_textarea_get_max_length(obj: *mut lv_obj_t) -> u32;
}
extern "C" {
    pub fn lv_textarea_text_is_selected(obj: *const lv_obj_t) -> bool;
}
extern "C" {
    pub fn lv_textarea_get_text_selection(obj: *mut lv_obj_t) -> bool;
}
extern "C" {
    pub fn lv_textarea_get_password_show_time(obj: *mut lv_obj_t) -> u16;
}
extern "C" {
    pub fn lv_textarea_clear_selection(obj: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_textarea_cursor_right(obj: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_textarea_cursor_left(obj: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_textarea_cursor_down(obj: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_textarea_cursor_up(obj: *mut lv_obj_t);
}
extern "C" {
    pub static lv_canvas_class: lv_obj_class_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_canvas_t {
    pub img: lv_img_t,
    pub dsc: lv_img_dsc_t,
}
extern "C" {
    pub fn lv_canvas_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_canvas_set_buffer(
        canvas: *mut lv_obj_t,
        buf: *mut cty::c_void,
        w: lv_coord_t,
        h: lv_coord_t,
        cf: lv_img_cf_t,
    );
}
extern "C" {
    pub fn lv_canvas_set_px(canvas: *mut lv_obj_t, x: lv_coord_t, y: lv_coord_t, c: lv_color_t);
}
extern "C" {
    pub fn lv_canvas_set_palette(canvas: *mut lv_obj_t, id: u8, c: lv_color_t);
}
extern "C" {
    pub fn lv_canvas_get_px(canvas: *mut lv_obj_t, x: lv_coord_t, y: lv_coord_t) -> lv_color_t;
}
extern "C" {
    pub fn lv_canvas_get_img(canvas: *mut lv_obj_t) -> *mut lv_img_dsc_t;
}
extern "C" {
    pub fn lv_canvas_copy_buf(
        canvas: *mut lv_obj_t,
        to_copy: *const cty::c_void,
        x: lv_coord_t,
        y: lv_coord_t,
        w: lv_coord_t,
        h: lv_coord_t,
    );
}
extern "C" {
    pub fn lv_canvas_transform(
        canvas: *mut lv_obj_t,
        img: *mut lv_img_dsc_t,
        angle: i16,
        zoom: u16,
        offset_x: lv_coord_t,
        offset_y: lv_coord_t,
        pivot_x: i32,
        pivot_y: i32,
        antialias: bool,
    );
}
extern "C" {
    pub fn lv_canvas_blur_hor(canvas: *mut lv_obj_t, area: *const lv_area_t, r: u16);
}
extern "C" {
    pub fn lv_canvas_blur_ver(canvas: *mut lv_obj_t, area: *const lv_area_t, r: u16);
}
extern "C" {
    pub fn lv_canvas_fill_bg(canvas: *mut lv_obj_t, color: lv_color_t, opa: lv_opa_t);
}
extern "C" {
    pub fn lv_canvas_draw_rect(
        canvas: *mut lv_obj_t,
        x: lv_coord_t,
        y: lv_coord_t,
        w: lv_coord_t,
        h: lv_coord_t,
        draw_dsc: *const lv_draw_rect_dsc_t,
    );
}
extern "C" {
    pub fn lv_canvas_draw_text(
        canvas: *mut lv_obj_t,
        x: lv_coord_t,
        y: lv_coord_t,
        max_w: lv_coord_t,
        draw_dsc: *mut lv_draw_label_dsc_t,
        txt: *const cty::c_char,
    );
}
extern "C" {
    pub fn lv_canvas_draw_img(
        canvas: *mut lv_obj_t,
        x: lv_coord_t,
        y: lv_coord_t,
        src: *const cty::c_void,
        draw_dsc: *const lv_draw_img_dsc_t,
    );
}
extern "C" {
    pub fn lv_canvas_draw_line(
        canvas: *mut lv_obj_t,
        points: *const lv_point_t,
        point_cnt: u32,
        draw_dsc: *const lv_draw_line_dsc_t,
    );
}
extern "C" {
    pub fn lv_canvas_draw_polygon(
        canvas: *mut lv_obj_t,
        points: *const lv_point_t,
        point_cnt: u32,
        draw_dsc: *const lv_draw_rect_dsc_t,
    );
}
extern "C" {
    pub fn lv_canvas_draw_arc(
        canvas: *mut lv_obj_t,
        x: lv_coord_t,
        y: lv_coord_t,
        r: lv_coord_t,
        start_angle: i32,
        end_angle: i32,
        draw_dsc: *const lv_draw_arc_dsc_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_switch_t {
    pub obj: lv_obj_t,
}
extern "C" {
    pub static lv_switch_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_switch_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_extra_init();
}
extern "C" {
    pub static lv_animimg_class: lv_obj_class_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_animimg_t {
    pub img: lv_img_t,
    pub anim: lv_anim_t,
    pub dsc: *mut *mut lv_img_dsc_t,
    pub pic_count: i8,
}
pub const LV_ANIM_IMG_PART_MAIN: cty::c_int = 0;
pub type _bindgen_ty_37 = cty::c_int;
pub type lv_animimg_part_t = u8;
extern "C" {
    pub fn lv_animimg_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_animimg_set_src(img: *mut lv_obj_t, dsc: *mut *mut lv_img_dsc_t, num: u8);
}
extern "C" {
    pub fn lv_animimg_start(obj: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_animimg_set_duration(img: *mut lv_obj_t, duration: u32);
}
extern "C" {
    pub fn lv_animimg_set_repeat_count(img: *mut lv_obj_t, count: u16);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_calendar_date_t {
    pub year: u16,
    pub month: i8,
    pub day: i8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_calendar_t {
    pub btnm: lv_btnmatrix_t,
    pub today: lv_calendar_date_t,
    pub showed_date: lv_calendar_date_t,
    pub highlighted_dates: *mut lv_calendar_date_t,
    pub highlighted_dates_num: u16,
    pub map: [*const cty::c_char; 56usize],
    pub nums: [[cty::c_char; 4usize]; 42usize],
}
extern "C" {
    pub static lv_calendar_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_calendar_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_calendar_set_today_date(obj: *mut lv_obj_t, year: u32, month: u32, day: u32);
}
extern "C" {
    pub fn lv_calendar_set_showed_date(obj: *mut lv_obj_t, year: u32, month: u32);
}
extern "C" {
    pub fn lv_calendar_set_highlighted_dates(
        obj: *mut lv_obj_t,
        highlighted: *mut lv_calendar_date_t,
        date_num: u16,
    );
}
extern "C" {
    pub fn lv_calendar_set_day_names(obj: *mut lv_obj_t, day_names: *mut *const cty::c_char);
}
extern "C" {
    pub fn lv_calendar_get_today_date(calendar: *const lv_obj_t) -> *const lv_calendar_date_t;
}
extern "C" {
    pub fn lv_calendar_get_showed_date(calendar: *const lv_obj_t) -> *const lv_calendar_date_t;
}
extern "C" {
    pub fn lv_calendar_get_highlighted_dates(calendar: *const lv_obj_t) -> *mut lv_calendar_date_t;
}
extern "C" {
    pub fn lv_calendar_get_highlighted_dates_num(calendar: *const lv_obj_t) -> u16;
}
extern "C" {
    pub fn lv_calendar_get_pressed_date(
        calendar: *const lv_obj_t,
        date: *mut lv_calendar_date_t,
    ) -> lv_res_t;
}
extern "C" {
    pub static lv_calendar_header_arrow_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_calendar_header_arrow_create(
        parent: *mut lv_obj_t,
        calendar: *mut lv_obj_t,
        btn_size: lv_coord_t,
    ) -> *mut lv_obj_t;
}
extern "C" {
    pub static lv_calendar_header_dropdown_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_calendar_header_dropdown_create(
        parent: *mut lv_obj_t,
        calendar: *mut lv_obj_t,
    ) -> *mut lv_obj_t;
}
pub const LV_CHART_TYPE_NONE: cty::c_int = 0;
pub const LV_CHART_TYPE_LINE: cty::c_int = 1;
pub const LV_CHART_TYPE_BAR: cty::c_int = 2;
pub const LV_CHART_TYPE_SCATTER: cty::c_int = 3;
pub type _bindgen_ty_38 = cty::c_int;
pub type lv_chart_type_t = u8;
pub const LV_CHART_UPDATE_MODE_SHIFT: cty::c_int = 0;
pub const LV_CHART_UPDATE_MODE_CIRCULAR: cty::c_int = 1;
pub type _bindgen_ty_39 = cty::c_int;
pub type lv_chart_update_mode_t = u8;
pub const LV_CHART_AXIS_PRIMARY_Y: cty::c_int = 0;
pub const LV_CHART_AXIS_SECONDARY_Y: cty::c_int = 1;
pub const LV_CHART_AXIS_PRIMARY_X: cty::c_int = 2;
pub const LV_CHART_AXIS_SECONDARY_X: cty::c_int = 4;
pub const _LV_CHART_AXIS_LAST: cty::c_int = 5;
pub type _bindgen_ty_40 = cty::c_int;
pub type lv_chart_axis_t = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_chart_series_t {
    pub x_points: *mut lv_coord_t,
    pub y_points: *mut lv_coord_t,
    pub color: lv_color_t,
    pub start_point: u16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
impl lv_chart_series_t {
    #[inline]
    pub fn hidden(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_hidden(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn x_ext_buf_assigned(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_x_ext_buf_assigned(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn y_ext_buf_assigned(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_y_ext_buf_assigned(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn x_axis_sec(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_x_axis_sec(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn y_axis_sec(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_y_axis_sec(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        hidden: u8,
        x_ext_buf_assigned: u8,
        y_ext_buf_assigned: u8,
        x_axis_sec: u8,
        y_axis_sec: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let hidden: u8 = unsafe { ::core::mem::transmute(hidden) };
            hidden as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let x_ext_buf_assigned: u8 = unsafe { ::core::mem::transmute(x_ext_buf_assigned) };
            x_ext_buf_assigned as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let y_ext_buf_assigned: u8 = unsafe { ::core::mem::transmute(y_ext_buf_assigned) };
            y_ext_buf_assigned as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let x_axis_sec: u8 = unsafe { ::core::mem::transmute(x_axis_sec) };
            x_axis_sec as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let y_axis_sec: u8 = unsafe { ::core::mem::transmute(y_axis_sec) };
            y_axis_sec as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_chart_cursor_t {
    pub pos: lv_point_t,
    pub point_id: u16,
    pub color: lv_color_t,
    pub ser: *mut lv_chart_series_t,
    pub dir: lv_dir_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u16; 3usize],
}
impl lv_chart_cursor_t {
    #[inline]
    pub fn pos_set(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pos_set(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(pos_set: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let pos_set: u8 = unsafe { ::core::mem::transmute(pos_set) };
            pos_set as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct lv_chart_tick_dsc_t {
    pub major_len: lv_coord_t,
    pub minor_len: lv_coord_t,
    pub draw_size: lv_coord_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u16,
}
impl lv_chart_tick_dsc_t {
    #[inline]
    pub fn minor_cnt(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_minor_cnt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn major_cnt(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_major_cnt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn label_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_label_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        minor_cnt: u32,
        major_cnt: u32,
        label_en: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 15u8, {
            let minor_cnt: u32 = unsafe { ::core::mem::transmute(minor_cnt) };
            minor_cnt as u64
        });
        __bindgen_bitfield_unit.set(15usize, 15u8, {
            let major_cnt: u32 = unsafe { ::core::mem::transmute(major_cnt) };
            major_cnt as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let label_en: u32 = unsafe { ::core::mem::transmute(label_en) };
            label_en as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_chart_t {
    pub obj: lv_obj_t,
    pub series_ll: lv_ll_t,
    pub cursor_ll: lv_ll_t,
    pub tick: [lv_chart_tick_dsc_t; 4usize],
    pub ymin: [lv_coord_t; 2usize],
    pub ymax: [lv_coord_t; 2usize],
    pub xmin: [lv_coord_t; 2usize],
    pub xmax: [lv_coord_t; 2usize],
    pub pressed_point_id: u16,
    pub hdiv_cnt: u16,
    pub vdiv_cnt: u16,
    pub point_cnt: u16,
    pub zoom_x: u16,
    pub zoom_y: u16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl lv_chart_t {
    #[inline]
    pub fn type_(&self) -> lv_chart_type_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_type(&mut self, val: lv_chart_type_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn update_mode(&self) -> lv_chart_update_mode_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_update_mode(&mut self, val: lv_chart_update_mode_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: lv_chart_type_t,
        update_mode: lv_chart_update_mode_t,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let type_: u8 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let update_mode: u8 = unsafe { ::core::mem::transmute(update_mode) };
            update_mode as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static lv_chart_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_chart_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_chart_set_type(obj: *mut lv_obj_t, type_: lv_chart_type_t);
}
extern "C" {
    pub fn lv_chart_set_point_count(obj: *mut lv_obj_t, cnt: u16);
}
extern "C" {
    pub fn lv_chart_set_range(
        obj: *mut lv_obj_t,
        axis: lv_chart_axis_t,
        min: lv_coord_t,
        max: lv_coord_t,
    );
}
extern "C" {
    pub fn lv_chart_set_update_mode(obj: *mut lv_obj_t, update_mode: lv_chart_update_mode_t);
}
extern "C" {
    pub fn lv_chart_set_div_line_count(obj: *mut lv_obj_t, hdiv: u8, vdiv: u8);
}
extern "C" {
    pub fn lv_chart_set_zoom_x(obj: *mut lv_obj_t, zoom_x: u16);
}
extern "C" {
    pub fn lv_chart_set_zoom_y(obj: *mut lv_obj_t, zoom_y: u16);
}
extern "C" {
    pub fn lv_chart_get_zoom_x(obj: *const lv_obj_t) -> u16;
}
extern "C" {
    pub fn lv_chart_get_zoom_y(obj: *const lv_obj_t) -> u16;
}
extern "C" {
    pub fn lv_chart_set_axis_tick(
        obj: *mut lv_obj_t,
        axis: lv_chart_axis_t,
        major_len: lv_coord_t,
        minor_len: lv_coord_t,
        major_cnt: lv_coord_t,
        minor_cnt: lv_coord_t,
        label_en: bool,
        draw_size: lv_coord_t,
    );
}
extern "C" {
    pub fn lv_chart_get_type(obj: *const lv_obj_t) -> lv_chart_type_t;
}
extern "C" {
    pub fn lv_chart_get_point_count(obj: *const lv_obj_t) -> u16;
}
extern "C" {
    pub fn lv_chart_get_x_start_point(obj: *const lv_obj_t, ser: *mut lv_chart_series_t) -> u16;
}
extern "C" {
    pub fn lv_chart_get_point_pos_by_id(
        obj: *mut lv_obj_t,
        ser: *mut lv_chart_series_t,
        id: u16,
        p_out: *mut lv_point_t,
    );
}
extern "C" {
    pub fn lv_chart_refresh(obj: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_chart_add_series(
        obj: *mut lv_obj_t,
        color: lv_color_t,
        axis: lv_chart_axis_t,
    ) -> *mut lv_chart_series_t;
}
extern "C" {
    pub fn lv_chart_remove_series(obj: *mut lv_obj_t, series: *mut lv_chart_series_t);
}
extern "C" {
    pub fn lv_chart_hide_series(chart: *mut lv_obj_t, series: *mut lv_chart_series_t, hide: bool);
}
extern "C" {
    pub fn lv_chart_set_series_color(
        chart: *mut lv_obj_t,
        series: *mut lv_chart_series_t,
        color: lv_color_t,
    );
}
extern "C" {
    pub fn lv_chart_set_x_start_point(obj: *mut lv_obj_t, ser: *mut lv_chart_series_t, id: u16);
}
extern "C" {
    pub fn lv_chart_get_series_next(
        chart: *const lv_obj_t,
        ser: *const lv_chart_series_t,
    ) -> *mut lv_chart_series_t;
}
extern "C" {
    pub fn lv_chart_add_cursor(
        obj: *mut lv_obj_t,
        color: lv_color_t,
        dir: lv_dir_t,
    ) -> *mut lv_chart_cursor_t;
}
extern "C" {
    pub fn lv_chart_set_cursor_pos(
        chart: *mut lv_obj_t,
        cursor: *mut lv_chart_cursor_t,
        pos: *mut lv_point_t,
    );
}
extern "C" {
    pub fn lv_chart_set_cursor_point(
        chart: *mut lv_obj_t,
        cursor: *mut lv_chart_cursor_t,
        ser: *mut lv_chart_series_t,
        point_id: u16,
    );
}
extern "C" {
    pub fn lv_chart_get_cursor_point(
        chart: *mut lv_obj_t,
        cursor: *mut lv_chart_cursor_t,
    ) -> lv_point_t;
}
extern "C" {
    pub fn lv_chart_set_all_value(
        obj: *mut lv_obj_t,
        ser: *mut lv_chart_series_t,
        value: lv_coord_t,
    );
}
extern "C" {
    pub fn lv_chart_set_next_value(
        obj: *mut lv_obj_t,
        ser: *mut lv_chart_series_t,
        value: lv_coord_t,
    );
}
extern "C" {
    pub fn lv_chart_set_next_value2(
        obj: *mut lv_obj_t,
        ser: *mut lv_chart_series_t,
        x_value: lv_coord_t,
        y_value: lv_coord_t,
    );
}
extern "C" {
    pub fn lv_chart_set_value_by_id(
        obj: *mut lv_obj_t,
        ser: *mut lv_chart_series_t,
        id: u16,
        value: lv_coord_t,
    );
}
extern "C" {
    pub fn lv_chart_set_value_by_id2(
        obj: *mut lv_obj_t,
        ser: *mut lv_chart_series_t,
        id: u16,
        x_value: lv_coord_t,
        y_value: lv_coord_t,
    );
}
extern "C" {
    pub fn lv_chart_set_ext_y_array(
        obj: *mut lv_obj_t,
        ser: *mut lv_chart_series_t,
        array: *mut lv_coord_t,
    );
}
extern "C" {
    pub fn lv_chart_set_ext_x_array(
        obj: *mut lv_obj_t,
        ser: *mut lv_chart_series_t,
        array: *mut lv_coord_t,
    );
}
extern "C" {
    pub fn lv_chart_get_y_array(
        obj: *const lv_obj_t,
        ser: *mut lv_chart_series_t,
    ) -> *mut lv_coord_t;
}
extern "C" {
    pub fn lv_chart_get_x_array(
        obj: *const lv_obj_t,
        ser: *mut lv_chart_series_t,
    ) -> *mut lv_coord_t;
}
extern "C" {
    pub fn lv_chart_get_pressed_point(obj: *const lv_obj_t) -> u32;
}
pub const LV_KEYBOARD_MODE_TEXT_LOWER: cty::c_int = 0;
pub const LV_KEYBOARD_MODE_TEXT_UPPER: cty::c_int = 1;
pub const LV_KEYBOARD_MODE_SPECIAL: cty::c_int = 2;
pub const LV_KEYBOARD_MODE_NUMBER: cty::c_int = 3;
pub type _bindgen_ty_41 = cty::c_int;
pub type lv_keyboard_mode_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_keyboard_t {
    pub btnm: lv_btnmatrix_t,
    pub ta: *mut lv_obj_t,
    pub mode: lv_keyboard_mode_t,
}
extern "C" {
    pub static lv_keyboard_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_keyboard_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_keyboard_set_textarea(kb: *mut lv_obj_t, ta: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_keyboard_set_mode(kb: *mut lv_obj_t, mode: lv_keyboard_mode_t);
}
extern "C" {
    pub fn lv_keyboard_set_map(
        kb: *mut lv_obj_t,
        mode: lv_keyboard_mode_t,
        map: *mut *const cty::c_char,
        ctrl_map: *const lv_btnmatrix_ctrl_t,
    );
}
extern "C" {
    pub fn lv_keyboard_get_textarea(kb: *const lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_keyboard_get_mode(kb: *const lv_obj_t) -> lv_keyboard_mode_t;
}
extern "C" {
    pub fn lv_keyboard_def_event_cb(e: *mut lv_event_t);
}
pub const lv_flex_align_t_LV_FLEX_ALIGN_START: lv_flex_align_t = 0;
pub const lv_flex_align_t_LV_FLEX_ALIGN_END: lv_flex_align_t = 1;
pub const lv_flex_align_t_LV_FLEX_ALIGN_CENTER: lv_flex_align_t = 2;
pub const lv_flex_align_t_LV_FLEX_ALIGN_SPACE_EVENLY: lv_flex_align_t = 3;
pub const lv_flex_align_t_LV_FLEX_ALIGN_SPACE_AROUND: lv_flex_align_t = 4;
pub const lv_flex_align_t_LV_FLEX_ALIGN_SPACE_BETWEEN: lv_flex_align_t = 5;
pub type lv_flex_align_t = cty::c_int;
pub const lv_flex_flow_t_LV_FLEX_FLOW_ROW: lv_flex_flow_t = 0;
pub const lv_flex_flow_t_LV_FLEX_FLOW_COLUMN: lv_flex_flow_t = 1;
pub const lv_flex_flow_t_LV_FLEX_FLOW_ROW_WRAP: lv_flex_flow_t = 4;
pub const lv_flex_flow_t_LV_FLEX_FLOW_ROW_REVERSE: lv_flex_flow_t = 8;
pub const lv_flex_flow_t_LV_FLEX_FLOW_ROW_WRAP_REVERSE: lv_flex_flow_t = 12;
pub const lv_flex_flow_t_LV_FLEX_FLOW_COLUMN_WRAP: lv_flex_flow_t = 5;
pub const lv_flex_flow_t_LV_FLEX_FLOW_COLUMN_REVERSE: lv_flex_flow_t = 9;
pub const lv_flex_flow_t_LV_FLEX_FLOW_COLUMN_WRAP_REVERSE: lv_flex_flow_t = 13;
pub type lv_flex_flow_t = cty::c_int;
extern "C" {
    pub static mut LV_LAYOUT_FLEX: u32;
}
extern "C" {
    pub static mut LV_STYLE_FLEX_FLOW: lv_style_prop_t;
}
extern "C" {
    pub static mut LV_STYLE_FLEX_MAIN_PLACE: lv_style_prop_t;
}
extern "C" {
    pub static mut LV_STYLE_FLEX_CROSS_PLACE: lv_style_prop_t;
}
extern "C" {
    pub static mut LV_STYLE_FLEX_TRACK_PLACE: lv_style_prop_t;
}
extern "C" {
    pub static mut LV_STYLE_FLEX_GROW: lv_style_prop_t;
}
extern "C" {
    pub fn lv_flex_init();
}
extern "C" {
    pub fn lv_obj_set_flex_flow(obj: *mut lv_obj_t, flow: lv_flex_flow_t);
}
extern "C" {
    pub fn lv_obj_set_flex_align(
        obj: *mut lv_obj_t,
        main_place: lv_flex_align_t,
        cross_place: lv_flex_align_t,
        track_cross_place: lv_flex_align_t,
    );
}
extern "C" {
    pub fn lv_obj_set_flex_grow(obj: *mut lv_obj_t, grow: u8);
}
extern "C" {
    pub fn lv_style_set_flex_flow(style: *mut lv_style_t, value: lv_flex_flow_t);
}
extern "C" {
    pub fn lv_style_set_flex_main_place(style: *mut lv_style_t, value: lv_flex_align_t);
}
extern "C" {
    pub fn lv_style_set_flex_cross_place(style: *mut lv_style_t, value: lv_flex_align_t);
}
extern "C" {
    pub fn lv_style_set_flex_track_place(style: *mut lv_style_t, value: lv_flex_align_t);
}
extern "C" {
    pub fn lv_style_set_flex_grow(style: *mut lv_style_t, value: u8);
}
extern "C" {
    pub fn lv_obj_set_style_flex_flow(
        obj: *mut lv_obj_t,
        value: lv_flex_flow_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_flex_main_place(
        obj: *mut lv_obj_t,
        value: lv_flex_align_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_flex_cross_place(
        obj: *mut lv_obj_t,
        value: lv_flex_align_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_flex_track_place(
        obj: *mut lv_obj_t,
        value: lv_flex_align_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_flex_grow(obj: *mut lv_obj_t, value: u8, selector: lv_style_selector_t);
}
extern "C" {
    pub static lv_list_class: lv_obj_class_t;
}
extern "C" {
    pub static lv_list_text_class: lv_obj_class_t;
}
extern "C" {
    pub static lv_list_btn_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_list_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_list_add_text(list: *mut lv_obj_t, txt: *const cty::c_char) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_list_add_btn(
        list: *mut lv_obj_t,
        icon: *const cty::c_char,
        txt: *const cty::c_char,
    ) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_list_get_btn_text(list: *mut lv_obj_t, btn: *mut lv_obj_t) -> *const cty::c_char;
}
extern "C" {
    pub static lv_msgbox_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_msgbox_create(
        parent: *mut lv_obj_t,
        title: *const cty::c_char,
        txt: *const cty::c_char,
        btn_txts: *mut *const cty::c_char,
        add_close_btn: bool,
    ) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_msgbox_get_title(mbox: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_msgbox_get_close_btn(mbox: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_msgbox_get_text(mbox: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_msgbox_get_btns(mbox: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_msgbox_get_active_btn_text(mbox: *mut lv_obj_t) -> *const cty::c_char;
}
extern "C" {
    pub fn lv_msgbox_close(mbox: *mut lv_obj_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_meter_scale_t {
    pub tick_color: lv_color_t,
    pub tick_cnt: u16,
    pub tick_length: u16,
    pub tick_width: u16,
    pub tick_major_color: lv_color_t,
    pub tick_major_nth: u16,
    pub tick_major_length: u16,
    pub tick_major_width: u16,
    pub label_gap: i16,
    pub label_color: i16,
    pub min: i32,
    pub max: i32,
    pub r_mod: i16,
    pub angle_range: u16,
    pub rotation: i16,
}
pub const lv_meter_indicator_type_t_LV_METER_INDICATOR_TYPE_NEEDLE_IMG: lv_meter_indicator_type_t =
    0;
pub const lv_meter_indicator_type_t_LV_METER_INDICATOR_TYPE_NEEDLE_LINE: lv_meter_indicator_type_t =
    1;
pub const lv_meter_indicator_type_t_LV_METER_INDICATOR_TYPE_SCALE_LINES: lv_meter_indicator_type_t =
    2;
pub const lv_meter_indicator_type_t_LV_METER_INDICATOR_TYPE_ARC: lv_meter_indicator_type_t = 3;
pub type lv_meter_indicator_type_t = cty::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_meter_indicator_t {
    pub scale: *mut lv_meter_scale_t,
    pub type_: lv_meter_indicator_type_t,
    pub opa: lv_opa_t,
    pub start_value: i32,
    pub end_value: i32,
    pub type_data: lv_meter_indicator_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lv_meter_indicator_t__bindgen_ty_1 {
    pub needle_img: lv_meter_indicator_t__bindgen_ty_1__bindgen_ty_1,
    pub needle_line: lv_meter_indicator_t__bindgen_ty_1__bindgen_ty_2,
    pub arc: lv_meter_indicator_t__bindgen_ty_1__bindgen_ty_3,
    pub scale_lines: lv_meter_indicator_t__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_meter_indicator_t__bindgen_ty_1__bindgen_ty_1 {
    pub src: *const cty::c_void,
    pub pivot: lv_point_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_meter_indicator_t__bindgen_ty_1__bindgen_ty_2 {
    pub width: u16,
    pub r_mod: i16,
    pub color: lv_color_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_meter_indicator_t__bindgen_ty_1__bindgen_ty_3 {
    pub width: u16,
    pub src: *const cty::c_void,
    pub color: lv_color_t,
    pub r_mod: i16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_meter_indicator_t__bindgen_ty_1__bindgen_ty_4 {
    pub width_mod: i16,
    pub color_start: lv_color_t,
    pub color_end: lv_color_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl lv_meter_indicator_t__bindgen_ty_1__bindgen_ty_4 {
    #[inline]
    pub fn local_grad(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_local_grad(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(local_grad: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let local_grad: u8 = unsafe { ::core::mem::transmute(local_grad) };
            local_grad as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_meter_t {
    pub obj: lv_obj_t,
    pub scale_ll: lv_ll_t,
    pub indicator_ll: lv_ll_t,
}
extern "C" {
    pub static lv_meter_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_meter_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_meter_add_scale(obj: *mut lv_obj_t) -> *mut lv_meter_scale_t;
}
extern "C" {
    pub fn lv_meter_set_scale_ticks(
        obj: *mut lv_obj_t,
        scale: *mut lv_meter_scale_t,
        cnt: u16,
        width: u16,
        len: u16,
        color: lv_color_t,
    );
}
extern "C" {
    pub fn lv_meter_set_scale_major_ticks(
        obj: *mut lv_obj_t,
        scale: *mut lv_meter_scale_t,
        nth: u16,
        width: u16,
        len: u16,
        color: lv_color_t,
        label_gap: i16,
    );
}
extern "C" {
    pub fn lv_meter_set_scale_range(
        obj: *mut lv_obj_t,
        scale: *mut lv_meter_scale_t,
        min: i32,
        max: i32,
        angle_range: u32,
        rotation: u32,
    );
}
extern "C" {
    pub fn lv_meter_add_needle_line(
        obj: *mut lv_obj_t,
        scale: *mut lv_meter_scale_t,
        width: u16,
        color: lv_color_t,
        r_mod: i16,
    ) -> *mut lv_meter_indicator_t;
}
extern "C" {
    pub fn lv_meter_add_needle_img(
        obj: *mut lv_obj_t,
        scale: *mut lv_meter_scale_t,
        src: *const cty::c_void,
        pivot_x: lv_coord_t,
        pivot_y: lv_coord_t,
    ) -> *mut lv_meter_indicator_t;
}
extern "C" {
    pub fn lv_meter_add_arc(
        obj: *mut lv_obj_t,
        scale: *mut lv_meter_scale_t,
        width: u16,
        color: lv_color_t,
        r_mod: i16,
    ) -> *mut lv_meter_indicator_t;
}
extern "C" {
    pub fn lv_meter_add_scale_lines(
        obj: *mut lv_obj_t,
        scale: *mut lv_meter_scale_t,
        color_start: lv_color_t,
        color_end: lv_color_t,
        local: bool,
        width_mod: i16,
    ) -> *mut lv_meter_indicator_t;
}
extern "C" {
    pub fn lv_meter_set_indicator_value(
        obj: *mut lv_obj_t,
        indic: *mut lv_meter_indicator_t,
        value: i32,
    );
}
extern "C" {
    pub fn lv_meter_set_indicator_start_value(
        obj: *mut lv_obj_t,
        indic: *mut lv_meter_indicator_t,
        value: i32,
    );
}
extern "C" {
    pub fn lv_meter_set_indicator_end_value(
        obj: *mut lv_obj_t,
        indic: *mut lv_meter_indicator_t,
        value: i32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_spinbox_t {
    pub ta: lv_textarea_t,
    pub value: i32,
    pub range_max: i32,
    pub range_min: i32,
    pub step: i32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: [u16; 3usize],
}
impl lv_spinbox_t {
    #[inline]
    pub fn digit_count(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_digit_count(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn dec_point_pos(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_dec_point_pos(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn rollover(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_rollover(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        digit_count: u16,
        dec_point_pos: u16,
        rollover: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let digit_count: u16 = unsafe { ::core::mem::transmute(digit_count) };
            digit_count as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let dec_point_pos: u16 = unsafe { ::core::mem::transmute(dec_point_pos) };
            dec_point_pos as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let rollover: u16 = unsafe { ::core::mem::transmute(rollover) };
            rollover as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static lv_spinbox_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_spinbox_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_spinbox_set_value(obj: *mut lv_obj_t, i: i32);
}
extern "C" {
    pub fn lv_spinbox_set_rollover(obj: *mut lv_obj_t, b: bool);
}
extern "C" {
    pub fn lv_spinbox_set_digit_format(obj: *mut lv_obj_t, digit_count: u8, separator_position: u8);
}
extern "C" {
    pub fn lv_spinbox_set_step(obj: *mut lv_obj_t, step: u32);
}
extern "C" {
    pub fn lv_spinbox_set_range(obj: *mut lv_obj_t, range_min: i32, range_max: i32);
}
extern "C" {
    pub fn lv_spinbox_get_rollover(obj: *mut lv_obj_t) -> bool;
}
extern "C" {
    pub fn lv_spinbox_get_value(obj: *mut lv_obj_t) -> i32;
}
extern "C" {
    pub fn lv_spinbox_get_step(obj: *mut lv_obj_t) -> i32;
}
extern "C" {
    pub fn lv_spinbox_step_next(obj: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_spinbox_step_prev(obj: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_spinbox_increment(obj: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_spinbox_decrement(obj: *mut lv_obj_t);
}
extern "C" {
    pub static lv_spinner_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_spinner_create(parent: *mut lv_obj_t, time: u32, arc_length: u32) -> *mut lv_obj_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_tabview_t {
    pub obj: lv_obj_t,
    pub map: *mut *mut cty::c_char,
    pub tab_cnt: u16,
    pub tab_cur: u16,
    pub tab_pos: lv_dir_t,
}
extern "C" {
    pub static lv_tabview_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_tabview_create(
        parent: *mut lv_obj_t,
        tab_pos: lv_dir_t,
        tab_size: lv_coord_t,
    ) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_tabview_add_tab(tv: *mut lv_obj_t, name: *const cty::c_char) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_tabview_get_content(tv: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_tabview_get_tab_btns(tv: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_tabview_set_act(obj: *mut lv_obj_t, id: u32, anim_en: lv_anim_enable_t);
}
extern "C" {
    pub fn lv_tabview_get_tab_act(tv: *mut lv_obj_t) -> u16;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_tileview_t {
    pub obj: lv_obj_t,
    pub tile_act: *mut lv_obj_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_tileview_tile_t {
    pub obj: lv_obj_t,
    pub dir: lv_dir_t,
}
extern "C" {
    pub static lv_tileview_class: lv_obj_class_t;
}
extern "C" {
    pub static lv_tileview_tile_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_tileview_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_tileview_add_tile(
        tv: *mut lv_obj_t,
        row_id: u8,
        col_id: u8,
        dir: lv_dir_t,
    ) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_obj_set_tile(tv: *mut lv_obj_t, tile_obj: *mut lv_obj_t, anim_en: lv_anim_enable_t);
}
extern "C" {
    pub fn lv_obj_set_tile_id(
        tv: *mut lv_obj_t,
        col_id: u32,
        row_id: u32,
        anim_en: lv_anim_enable_t,
    );
}
extern "C" {
    pub fn lv_tileview_get_tile_act(obj: *mut lv_obj_t) -> *mut lv_obj_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_win_t {
    pub obj: lv_obj_t,
}
extern "C" {
    pub static lv_win_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_win_create(parent: *mut lv_obj_t, header_height: lv_coord_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_win_add_title(win: *mut lv_obj_t, txt: *const cty::c_char) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_win_add_btn(
        win: *mut lv_obj_t,
        icon: *const cty::c_void,
        btn_w: lv_coord_t,
    ) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_win_get_header(win: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_win_get_content(win: *mut lv_obj_t) -> *mut lv_obj_t;
}
pub const LV_COLORWHEEL_MODE_HUE: cty::c_int = 0;
pub const LV_COLORWHEEL_MODE_SATURATION: cty::c_int = 1;
pub const LV_COLORWHEEL_MODE_VALUE: cty::c_int = 2;
pub type _bindgen_ty_42 = cty::c_int;
pub type lv_colorwheel_mode_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_colorwheel_t {
    pub obj: lv_obj_t,
    pub hsv: lv_color_hsv_t,
    pub knob: lv_colorwheel_t__bindgen_ty_1,
    pub last_click_time: u32,
    pub last_change_time: u32,
    pub last_press_point: lv_point_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_colorwheel_t__bindgen_ty_1 {
    pub pos: lv_point_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
impl lv_colorwheel_t__bindgen_ty_1 {
    #[inline]
    pub fn recolor(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_recolor(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(recolor: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let recolor: u8 = unsafe { ::core::mem::transmute(recolor) };
            recolor as u64
        });
        __bindgen_bitfield_unit
    }
}
impl lv_colorwheel_t {
    #[inline]
    pub fn mode(&self) -> lv_colorwheel_mode_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_mode(&mut self, val: lv_colorwheel_mode_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn mode_fixed(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mode_fixed(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mode: lv_colorwheel_mode_t,
        mode_fixed: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let mode: u8 = unsafe { ::core::mem::transmute(mode) };
            mode as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let mode_fixed: u8 = unsafe { ::core::mem::transmute(mode_fixed) };
            mode_fixed as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static lv_colorwheel_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_colorwheel_create(parent: *mut lv_obj_t, knob_recolor: bool) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_colorwheel_set_hsv(obj: *mut lv_obj_t, hsv: lv_color_hsv_t) -> bool;
}
extern "C" {
    pub fn lv_colorwheel_set_rgb(obj: *mut lv_obj_t, color: lv_color_t) -> bool;
}
extern "C" {
    pub fn lv_colorwheel_set_mode(obj: *mut lv_obj_t, mode: lv_colorwheel_mode_t);
}
extern "C" {
    pub fn lv_colorwheel_set_mode_fixed(obj: *mut lv_obj_t, fixed: bool);
}
extern "C" {
    pub fn lv_colorwheel_get_hsv(obj: *mut lv_obj_t) -> lv_color_hsv_t;
}
extern "C" {
    pub fn lv_colorwheel_get_rgb(obj: *mut lv_obj_t) -> lv_color_t;
}
extern "C" {
    pub fn lv_colorwheel_get_color_mode(obj: *mut lv_obj_t) -> lv_colorwheel_mode_t;
}
extern "C" {
    pub fn lv_colorwheel_get_color_mode_fixed(obj: *mut lv_obj_t) -> bool;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_led_t {
    pub obj: lv_obj_t,
    pub color: lv_color_t,
    pub bright: u8,
}
extern "C" {
    pub static lv_led_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_led_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_led_set_color(led: *mut lv_obj_t, color: lv_color_t);
}
extern "C" {
    pub fn lv_led_set_brightness(led: *mut lv_obj_t, bright: u8);
}
extern "C" {
    pub fn lv_led_on(led: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_led_off(led: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_led_toggle(led: *mut lv_obj_t);
}
extern "C" {
    pub fn lv_led_get_brightness(obj: *const lv_obj_t) -> u8;
}
pub const lv_imgbtn_state_t_LV_IMGBTN_STATE_RELEASED: lv_imgbtn_state_t = 0;
pub const lv_imgbtn_state_t_LV_IMGBTN_STATE_PRESSED: lv_imgbtn_state_t = 1;
pub const lv_imgbtn_state_t_LV_IMGBTN_STATE_DISABLED: lv_imgbtn_state_t = 2;
pub const lv_imgbtn_state_t_LV_IMGBTN_STATE_CHECKED_RELEASED: lv_imgbtn_state_t = 3;
pub const lv_imgbtn_state_t_LV_IMGBTN_STATE_CHECKED_PRESSED: lv_imgbtn_state_t = 4;
pub const lv_imgbtn_state_t_LV_IMGBTN_STATE_CHECKED_DISABLED: lv_imgbtn_state_t = 5;
pub const lv_imgbtn_state_t__LV_IMGBTN_STATE_NUM: lv_imgbtn_state_t = 6;
pub type lv_imgbtn_state_t = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_imgbtn_t {
    pub obj: lv_obj_t,
    pub img_src_mid: [*const cty::c_void; 6usize],
    pub img_src_left: [*const cty::c_void; 6usize],
    pub img_src_right: [*const cty::c_void; 6usize],
    pub act_cf: lv_img_cf_t,
}
extern "C" {
    pub static lv_imgbtn_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_imgbtn_create(parent: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_imgbtn_set_src(
        imgbtn: *mut lv_obj_t,
        state: lv_imgbtn_state_t,
        src_left: *const cty::c_void,
        src_mid: *const cty::c_void,
        src_right: *const cty::c_void,
    );
}
extern "C" {
    pub fn lv_imgbtn_get_src_left(
        imgbtn: *mut lv_obj_t,
        state: lv_imgbtn_state_t,
    ) -> *const cty::c_void;
}
extern "C" {
    pub fn lv_imgbtn_get_src_middle(
        imgbtn: *mut lv_obj_t,
        state: lv_imgbtn_state_t,
    ) -> *const cty::c_void;
}
extern "C" {
    pub fn lv_imgbtn_get_src_right(
        imgbtn: *mut lv_obj_t,
        state: lv_imgbtn_state_t,
    ) -> *const cty::c_void;
}
pub const LV_SPAN_OVERFLOW_CLIP: cty::c_int = 0;
pub const LV_SPAN_OVERFLOW_ELLIPSIS: cty::c_int = 1;
pub type _bindgen_ty_43 = cty::c_int;
pub type lv_span_overflow_t = u8;
pub const LV_SPAN_MODE_FIXED: cty::c_int = 0;
pub const LV_SPAN_MODE_EXPAND: cty::c_int = 1;
pub const LV_SPAN_MODE_BREAK: cty::c_int = 2;
pub type _bindgen_ty_44 = cty::c_int;
pub type lv_span_mode_t = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lv_span_t {
    pub txt: *mut cty::c_char,
    pub spangroup: *mut lv_obj_t,
    pub style: lv_style_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
impl lv_span_t {
    #[inline]
    pub fn static_flag(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_static_flag(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(static_flag: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let static_flag: u8 = unsafe { ::core::mem::transmute(static_flag) };
            static_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lv_spangroup_t {
    pub obj: lv_obj_t,
    pub indent: lv_coord_t,
    pub cache_w: lv_coord_t,
    pub cache_h: lv_coord_t,
    pub child_ll: lv_ll_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
impl lv_spangroup_t {
    #[inline]
    pub fn mode(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_mode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn overflow(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_overflow(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn refresh(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_refresh(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mode: u8,
        overflow: u8,
        refresh: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let mode: u8 = unsafe { ::core::mem::transmute(mode) };
            mode as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let overflow: u8 = unsafe { ::core::mem::transmute(overflow) };
            overflow as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let refresh: u8 = unsafe { ::core::mem::transmute(refresh) };
            refresh as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static lv_spangroup_class: lv_obj_class_t;
}
extern "C" {
    pub fn lv_spangroup_create(par: *mut lv_obj_t) -> *mut lv_obj_t;
}
extern "C" {
    pub fn lv_spangroup_new_span(obj: *mut lv_obj_t) -> *mut lv_span_t;
}
extern "C" {
    pub fn lv_spangroup_del_span(obj: *mut lv_obj_t, span: *mut lv_span_t);
}
extern "C" {
    pub fn lv_span_set_text(span: *mut lv_span_t, text: *const cty::c_char);
}
extern "C" {
    pub fn lv_span_set_text_static(span: *mut lv_span_t, text: *const cty::c_char);
}
extern "C" {
    pub fn lv_spangroup_set_align(obj: *mut lv_obj_t, align: lv_text_align_t);
}
extern "C" {
    pub fn lv_spangroup_set_overflow(obj: *mut lv_obj_t, overflow: lv_span_overflow_t);
}
extern "C" {
    pub fn lv_spangroup_set_indent(obj: *mut lv_obj_t, indent: lv_coord_t);
}
extern "C" {
    pub fn lv_spangroup_set_mode(obj: *mut lv_obj_t, mode: lv_span_mode_t);
}
extern "C" {
    pub fn lv_spangroup_get_align(obj: *mut lv_obj_t) -> lv_text_align_t;
}
extern "C" {
    pub fn lv_spangroup_get_overflow(obj: *mut lv_obj_t) -> lv_span_overflow_t;
}
extern "C" {
    pub fn lv_spangroup_get_indent(obj: *mut lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_spangroup_get_mode(obj: *mut lv_obj_t) -> lv_span_mode_t;
}
extern "C" {
    pub fn lv_spangroup_get_max_line_h(obj: *mut lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_spangroup_get_expand_width(obj: *mut lv_obj_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_spangroup_get_expand_height(obj: *mut lv_obj_t, width: lv_coord_t) -> lv_coord_t;
}
extern "C" {
    pub fn lv_spangroup_refr_mode(obj: *mut lv_obj_t);
}
pub const lv_grid_align_t_LV_GRID_ALIGN_START: lv_grid_align_t = 0;
pub const lv_grid_align_t_LV_GRID_ALIGN_CENTER: lv_grid_align_t = 1;
pub const lv_grid_align_t_LV_GRID_ALIGN_END: lv_grid_align_t = 2;
pub const lv_grid_align_t_LV_GRID_ALIGN_STRETCH: lv_grid_align_t = 3;
pub const lv_grid_align_t_LV_GRID_ALIGN_SPACE_EVENLY: lv_grid_align_t = 4;
pub const lv_grid_align_t_LV_GRID_ALIGN_SPACE_AROUND: lv_grid_align_t = 5;
pub const lv_grid_align_t_LV_GRID_ALIGN_SPACE_BETWEEN: lv_grid_align_t = 6;
pub type lv_grid_align_t = cty::c_int;
extern "C" {
    pub static mut LV_LAYOUT_GRID: u32;
}
extern "C" {
    pub static mut LV_STYLE_GRID_COLUMN_DSC_ARRAY: lv_style_prop_t;
}
extern "C" {
    pub static mut LV_STYLE_GRID_COLUMN_ALIGN: lv_style_prop_t;
}
extern "C" {
    pub static mut LV_STYLE_GRID_ROW_DSC_ARRAY: lv_style_prop_t;
}
extern "C" {
    pub static mut LV_STYLE_GRID_ROW_ALIGN: lv_style_prop_t;
}
extern "C" {
    pub static mut LV_STYLE_GRID_CELL_COLUMN_POS: lv_style_prop_t;
}
extern "C" {
    pub static mut LV_STYLE_GRID_CELL_COLUMN_SPAN: lv_style_prop_t;
}
extern "C" {
    pub static mut LV_STYLE_GRID_CELL_X_ALIGN: lv_style_prop_t;
}
extern "C" {
    pub static mut LV_STYLE_GRID_CELL_ROW_POS: lv_style_prop_t;
}
extern "C" {
    pub static mut LV_STYLE_GRID_CELL_ROW_SPAN: lv_style_prop_t;
}
extern "C" {
    pub static mut LV_STYLE_GRID_CELL_Y_ALIGN: lv_style_prop_t;
}
extern "C" {
    pub fn lv_grid_init();
}
extern "C" {
    pub fn lv_obj_set_grid_dsc_array(
        obj: *mut lv_obj_t,
        col_dsc: *const lv_coord_t,
        row_dsc: *const lv_coord_t,
    );
}
extern "C" {
    pub fn lv_obj_set_grid_align(
        obj: *mut lv_obj_t,
        column_align: lv_grid_align_t,
        row_align: lv_grid_align_t,
    );
}
extern "C" {
    pub fn lv_obj_set_grid_cell(
        obj: *mut lv_obj_t,
        column_align: lv_grid_align_t,
        col_pos: u8,
        col_span: u8,
        row_align: lv_grid_align_t,
        row_pos: u8,
        row_span: u8,
    );
}
extern "C" {
    pub fn lv_style_set_grid_row_dsc_array(style: *mut lv_style_t, value: *const lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_grid_column_dsc_array(style: *mut lv_style_t, value: *const lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_grid_row_align(style: *mut lv_style_t, value: lv_grid_align_t);
}
extern "C" {
    pub fn lv_style_set_grid_column_align(style: *mut lv_style_t, value: lv_grid_align_t);
}
extern "C" {
    pub fn lv_style_set_grid_cell_column_pos(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_grid_cell_column_span(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_grid_cell_row_pos(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_grid_cell_row_span(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_grid_cell_x_align(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_style_set_grid_cell_y_align(style: *mut lv_style_t, value: lv_coord_t);
}
extern "C" {
    pub fn lv_obj_set_style_grid_row_dsc_array(
        obj: *mut lv_obj_t,
        value: *const lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_grid_column_dsc_array(
        obj: *mut lv_obj_t,
        value: *const lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_grid_row_align(
        obj: *mut lv_obj_t,
        value: lv_grid_align_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_grid_column_align(
        obj: *mut lv_obj_t,
        value: lv_grid_align_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_grid_cell_column_pos(
        obj: *mut lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_grid_cell_column_span(
        obj: *mut lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_grid_cell_row_pos(
        obj: *mut lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_grid_cell_row_span(
        obj: *mut lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_grid_cell_x_align(
        obj: *mut lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_obj_set_style_grid_cell_y_align(
        obj: *mut lv_obj_t,
        value: lv_coord_t,
        selector: lv_style_selector_t,
    );
}
extern "C" {
    pub fn lv_theme_default_init(
        disp: *mut lv_disp_t,
        color_primary: lv_color_t,
        color_secondary: lv_color_t,
        dark: bool,
        font: *const lv_font_t,
    ) -> *mut lv_theme_t;
}
extern "C" {
    pub fn lv_theme_default_is_inited() -> bool;
}
extern "C" {
    pub fn lv_theme_mono_init(
        disp: *mut lv_disp_t,
        dark_bg: bool,
        font: *const lv_font_t,
    ) -> *mut lv_theme_t;
}
extern "C" {
    pub fn lv_theme_basic_init(disp: *mut lv_disp_t) -> *mut lv_theme_t;
}
extern "C" {
    pub fn _LV_COLOR_MAKE(r: u8, g: u8, b: u8) -> lv_color_t;
}
extern "C" {
    pub fn _LV_COLOR_GET_R(color: lv_color_t) -> u16;
}
extern "C" {
    pub fn _LV_COLOR_GET_G(color: lv_color_t) -> u16;
}
extern "C" {
    pub fn _LV_COLOR_GET_B(color: lv_color_t) -> u16;
}
extern "C" {
    pub fn _LV_COLOR_GET_A(color: lv_color_t) -> u16;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
